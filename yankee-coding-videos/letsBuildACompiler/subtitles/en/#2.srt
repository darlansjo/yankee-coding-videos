1
00:00:00,000 --> 00:00:03,170
Welcome to the second part of "Let's build a compiler".

2
00:00:03,170 --> 00:00:07,370
In this part I show you how to accept arbitrary  numbers as operand.

3
00:00:07,370 --> 00:00:10,900
And how to describe chain expressions in the ANTLR grammar.

4
00:00:10,900 --> 00:00:14,620
Admittedly up until now our parser was rather boring.

5
00:00:14,620 --> 00:00:18,390
All the parser can do is parse the expression "3+2",

6
00:00:18,390 --> 00:00:21,340
nothing more. Not eben "1+1".

7
00:00:21,340 --> 00:00:24,000
That is really very simple.

8
00:00:24,000 --> 00:00:26,590
Thus we want to extend our parser

9
00:00:26,590 --> 00:00:29,660
so that it accepts any arbitrary number.

10
00:00:29,660 --> 00:00:33,650
To do that we open our grammar

11
00:00:34,300 --> 00:00:39,010
and then we will deal with lexer rules for the first time.

12
00:00:39,010 --> 00:00:42,390
Up until now we have some implicit lexer rules here,

13
00:00:42,390 --> 00:00:44,220
these are those three here,

14
00:00:44,220 --> 00:00:50,090
three implicit lexer rules, we could also write these rules as follows:

15
00:00:50,090 --> 00:00:57,960
The three is a three and the plus is a plus

16
00:00:57,960 --> 00:01:02,730
and the same for the two as you are probably already expecting.

17
00:01:05,510 --> 00:01:08,550
And then we can write up here:

18
00:01:08,550 --> 00:01:13,820
Three plus two.

19
00:01:14,500 --> 00:01:17,020
What are these lexer rules doing?

20
00:01:17,020 --> 00:01:20,940
At first a lexer runs over the input source code

21
00:01:20,940 --> 00:01:23,240
and not before that the parser starts processing.

22
00:01:23,240 --> 00:01:26,290
What does the output of the lexer look like?

23
00:01:26,290 --> 00:01:30,010
To find out we can yet again ask out TestRig

24
00:01:30,010 --> 00:01:35,960
which has next to the options we have seen so far

25
00:01:35,960 --> 00:01:40,920
the option "-tokens". The "-tokens"-option

26
00:01:40,920 --> 00:01:45,350
outputs the tokens the lexer generated for us.

27
00:01:47,720 --> 00:01:52,960
That means I will search again for the command, there it is,

28
00:01:53,160 --> 00:01:56,310
no, we don't write any trash at the end

29
00:01:56,310 --> 00:02:02,230
and... this time we use the option "-tokens".

30
00:02:02,230 --> 00:02:04,650
Here you can what came out of this:

31
00:02:04,650 --> 00:02:12,360
We have four tokens: The three, the plus the two and the EOF.

32
00:02:12,360 --> 00:02:17,180
Currently all our tokens happen to be exactly one character long

33
00:02:17,180 --> 00:02:19,000
but this is not necessarily the case.

34
00:02:19,000 --> 00:02:21,530
For example if we would have the number 42

35
00:02:21,530 --> 00:02:23,470
then our number would be composed of two digits

36
00:02:23,470 --> 00:02:27,100
and we would want to combine those to a single token.

37
00:02:27,100 --> 00:02:31,110
If we as a human read such a text, we do this automatically:

38
00:02:31,110 --> 00:02:33,570
When we read a number we will usually recognize it

39
00:02:33,570 --> 00:02:38,090
not as individual digits, but instead as a single number

40
00:02:38,090 --> 00:02:40,280
and this is what the lexer does for us:

41
00:02:40,280 --> 00:02:44,340
It combines something which consists of several characters

42
00:02:44,540 --> 00:02:48,050
to a single s-called token.

43
00:02:48,050 --> 00:02:51,020
Last we have the EOF-Token,

44
00:02:51,020 --> 00:02:52,910
EOF means "end of file",

45
00:02:52,910 --> 00:02:55,560
which is simply the message for our compiler

46
00:02:55,560 --> 00:02:58,090
that we have reached the end of file,

47
00:02:58,090 --> 00:03:02,550
it is not really a character from our file.

48
00:03:04,690 --> 00:03:07,300
Now...

49
00:03:07,300 --> 00:03:11,780
we want to accept arbitrary numbers, which means

50
00:03:11,780 --> 00:03:16,970
I create a lexer rule "ZAHL" (german "number") and here I simply write

51
00:03:16,970 --> 00:03:19,680
in square brackets zero to nine,

52
00:03:19,680 --> 00:03:22,750
these are regular expressions, if you are already familiar with regular expressions,

53
00:03:22,750 --> 00:03:27,540
then you can already read them, if not, it is easy.

54
00:03:28,590 --> 00:03:31,080
The square brackets simply mean:

55
00:03:31,080 --> 00:03:35,920
Any one character from the range I supplied here.

56
00:03:35,920 --> 00:03:37,910
I remove the plus once again for the explaination.

57
00:03:37,910 --> 00:03:40,040
Zero to nine means at this position:

58
00:03:40,040 --> 00:03:44,420
Either a zero, a one, a three and so on until nine. One of those.

59
00:03:44,550 --> 00:03:49,210
Now of course I want to quantify that, because I also want to be able to accept 42

60
00:03:49,210 --> 00:03:51,620
and not the numbers zero to nine, only.

61
00:03:51,620 --> 00:03:55,160
An example for a quantifier is the plus.

62
00:03:55,160 --> 00:03:58,320
If I append a plus to the end it means:

63
00:03:58,320 --> 00:04:02,090
At least once, but arbitrary often.

64
00:04:03,100 --> 00:04:07,010
Then we obviously have to adapt our rule up here:

65
00:04:07,010 --> 00:04:09,710
We write "ZAHL" here,

66
00:04:09,710 --> 00:04:13,140
I leave the plus as it was for now,

67
00:04:13,140 --> 00:04:16,420
plus another number.

68
00:04:19,240 --> 00:04:22,590
Now we have to go through our usual process,

69
00:04:22,590 --> 00:04:25,320
execute ANTLR,

70
00:04:25,320 --> 00:04:27,190
I've got the command here somewhere,

71
00:04:35,460 --> 00:04:37,750
so much for that.

72
00:04:47,660 --> 00:04:52,060
Then we have to recompile the new files

73
00:04:56,350 --> 00:05:00,970
and now we can regenerate our tree.

74
00:05:06,420 --> 00:05:10,640
And the display the new tree.

75
00:05:10,640 --> 00:05:13,750
And, surprise, nothing has changed.

76
00:05:13,750 --> 00:05:17,620
That is because I haven't changed anything in the source code that we parse.

77
00:05:17,620 --> 00:05:19,850
Doesn't matter, we'll do that next

78
00:05:19,850 --> 00:05:23,270
in order to prove that it actually works with arbitrary expressions.

79
00:05:23,270 --> 00:05:29,900
Thus we open our "code.demo" file

80
00:05:29,900 --> 00:05:37,490
write instead of "3+2" "3+42",

81
00:05:39,980 --> 00:05:47,720
close this and allow our TestRig to rerun.

82
00:05:48,390 --> 00:05:50,790
Yes that was the right one.

83
00:05:56,940 --> 00:06:01,210
And then we display the tree.

84
00:06:01,210 --> 00:06:03,480
As you can see, the tree has changed.

85
00:06:03,480 --> 00:06:06,440
Our tree now contains the 42.

86
00:06:06,440 --> 00:06:09,980
Our parser is now capable of recognizing any addition

87
00:06:09,980 --> 00:06:12,850
consisting of two numbers.

88
00:06:12,850 --> 00:06:16,420
Next we want to support chain expressions as well.

89
00:06:16,420 --> 00:06:19,970
Thus I extend our sample code,

90
00:06:19,970 --> 00:06:24,660
append "+5+6" and then we already have a chain expression.

91
00:06:24,660 --> 00:06:29,780
What happens if we allow our parser to run on the new input?

92
00:06:33,320 --> 00:06:35,410
We generate the tree,

93
00:06:35,410 --> 00:06:37,630
have a look at the tree

94
00:06:37,630 --> 00:06:40,860
and note: Nothing has changed.

95
00:06:40,860 --> 00:06:45,530
Why is that? Why was the "+5+6" simply ignored?

96
00:06:45,530 --> 00:06:48,030
Let's look at our grammar to find the answer:

97
00:06:55,420 --> 00:06:59,250
Here you can see our parser rule "addition".

98
00:06:59,250 --> 00:07:01,800
It simply looks for a number,

99
00:07:01,800 --> 00:07:04,180
then a plus and then yet another number.

100
00:07:04,180 --> 00:07:06,020
After that it simply ends.

101
00:07:06,020 --> 00:07:09,200
No matter what follows: It will be ignored.

102
00:07:09,200 --> 00:07:12,070
That's what we want to change next.

103
00:07:12,340 --> 00:07:14,700
For that we have multiple possibilities:

104
00:07:14,700 --> 00:07:18,710
The most obvious one is to change it with the iterative approach.

105
00:07:18,710 --> 00:07:21,040
That means we create a group

106
00:07:21,040 --> 00:07:24,910
and we allow this part to occur multiple times.

107
00:07:25,180 --> 00:07:30,910
Through this it is possible that number plus number plus number plus number

108
00:07:31,830 --> 00:07:35,270
may appear as often as it wants.

109
00:07:35,270 --> 00:07:39,600
Let's try what happens to the tree with our new grammar.

110
00:07:40,220 --> 00:07:45,630
First I create the new parser,

111
00:07:46,160 --> 00:07:49,400
compile the stuff

112
00:07:50,670 --> 00:07:54,720
and then we regenerate the tree,

113
00:07:54,940 --> 00:07:56,990
display the tree

114
00:07:57,520 --> 00:07:59,980
and indeed, it worked:

115
00:07:59,980 --> 00:08:03,410
Our tree now contains the "+5+6" as well.

116
00:08:03,590 --> 00:08:05,620
Unfortunatelly however

117
00:08:05,620 --> 00:08:09,490
we cannot apply the system proposed in the beginning

118
00:08:09,490 --> 00:08:14,130
and traverse our tree post order

119
00:08:14,130 --> 00:08:17,320
to generate the instructions for our processor.

120
00:08:17,320 --> 00:08:19,130
If we traverse post order

121
00:08:19,130 --> 00:08:23,110
then that would mean (ignoring the plus sign) that we get

122
00:08:23,110 --> 00:08:28,130
2, 42, 5, 6 and then addition.

123
00:08:28,130 --> 00:08:32,720
These are way to few add instructions.

124
00:08:32,720 --> 00:08:36,220
Thus it is better if we make up another solution,

125
00:08:36,220 --> 00:08:38,460
so that we can keep our system.

126
00:08:39,490 --> 00:08:44,100
What we can do here is use the recursive approach.

127
00:08:44,100 --> 00:08:47,160
For that we open our grammar,

128
00:08:47,840 --> 00:08:52,180
remove our iterative definition here

129
00:08:52,180 --> 00:08:55,410
and replace it with a recursive definition.

130
00:08:55,410 --> 00:08:57,380
That is easy to do:

131
00:08:57,380 --> 00:09:00,260
We write instead of "Zahl" "addition"

132
00:09:00,260 --> 00:09:05,930
and now, everytime the parser evaluates the addition rule it can

133
00:09:05,930 --> 00:09:10,850
not only expect a number at this position, but also again an addition.

134
00:09:10,850 --> 00:09:15,650
However up until now the recursion is endless. We need a condition for termination.

135
00:09:15,650 --> 00:09:20,860
For that we add an alternative by writing "or",

136
00:09:20,860 --> 00:09:26,060
you don't need to write this into a new line as I do, but

137
00:09:26,060 --> 00:09:31,420
that is what most people agree that it can be read easily in the end.

138
00:09:31,420 --> 00:09:33,890
And here we write "ZAHL" again.

139
00:09:33,890 --> 00:09:39,290
Now an addition can consist of an addition

140
00:09:39,290 --> 00:09:42,400
which is just a number plus another number.

141
00:09:42,400 --> 00:09:46,390
Or the addition can consist of another addition,

142
00:09:46,390 --> 00:09:49,530
which in turn can consist of an addition

143
00:09:49,530 --> 00:09:52,170
which then might be a number

144
00:09:52,170 --> 00:09:56,050
and then the recursion returns

145
00:09:56,050 --> 00:09:59,910
and there can be another number and yet another number

146
00:09:59,910 --> 00:10:02,580
and the the recursion is complete.

147
00:10:02,580 --> 00:10:06,770
Let's have a look on our tree again.

148
00:10:08,010 --> 00:10:12,840
I recreate the parser,

149
00:10:12,840 --> 00:10:17,100
then we compile the parser

150
00:10:17,820 --> 00:10:21,300
and then we generate the tree,

151
00:10:21,970 --> 00:10:24,660
and have a look at the tree.

152
00:10:26,090 --> 00:10:30,980
Now you can see a recursive definition of our tree.

153
00:10:31,310 --> 00:10:35,810
The left side of our tree is again and again an addition.

154
00:10:35,810 --> 00:10:38,790
You can find our original calculation

155
00:10:38,790 --> 00:10:43,750
in the diagonal down here, namely "3+42+5+6"

156
00:10:43,750 --> 00:10:47,150
and using our compiler we can afterwards

157
00:10:47,150 --> 00:10:49,720
generate instructions from the tree easily.

158
00:10:49,720 --> 00:10:53,090
Unfortunately, in the moment I cannot save you from the confusion

159
00:10:53,090 --> 00:10:57,020
that this part of the tree is a special case

160
00:10:57,020 --> 00:11:00,890
because it has only a single child and in our compiler

161
00:11:00,890 --> 00:11:04,300
we must not generate an addition instruction for that node.

162
00:11:04,300 --> 00:11:07,450
However that will not be a problem in our compiler later on.

163
00:11:07,450 --> 00:11:11,040
This is the only thing I can say about this for now.

164
00:11:11,040 --> 00:11:13,480
For the rest our system works very well.

165
00:11:13,480 --> 00:11:16,790
If we travers through the left here,

166
00:11:16,790 --> 00:11:20,700
always at first the left side, then the right side and then the root node

167
00:11:20,700 --> 00:11:25,480
and take the special case her as just a three,

168
00:11:25,480 --> 00:11:32,840
then we get 3, 42, add, 5, add, 6, add.

169
00:11:32,840 --> 00:11:37,020
And thus we get the right instructions

170
00:11:37,020 --> 00:11:40,790
to execute the full calculation.

171
00:11:40,790 --> 00:11:44,240
This was the second part of "Let's build a compiler".

172
00:11:44,240 --> 00:11:47,470
In the next parts we will add further operators,

173
00:11:47,470 --> 00:11:52,490
including operator precedence, generate executable code and much more.

174
00:11:52,490 --> 00:11:55,770
You'll find yet again an affiliate link in the video description

175
00:11:55,770 --> 00:11:58,680
to the book "The definitive ANTLR4-Reference".

176
00:11:58,680 --> 00:12:01,400
I get a couple of cents when you use the link to buy the book

177
00:12:01,400 --> 00:12:03,250
or even if you use it to buy a refridgerator.

178
00:12:03,250 --> 00:12:07,220
Thank you to Gadarol, who allows me to to use his studio for the recordings

179
00:12:07,220 --> 00:12:10,760
and thank you for your attention, I hope you enjoyed it,

180
00:12:10,760 --> 00:12:14,250
return for the next episode of "Let's build a compiler".

181
00:12:14,250 --> 00:12:18,470
My name is yankee, good by until the next time.

