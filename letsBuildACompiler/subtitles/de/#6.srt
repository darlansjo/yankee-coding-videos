1
00:00:00,000 --> 00:00:03,270
Willkommen zurück zu Let's Build a compiler,

2
00:00:03,270 --> 00:00:04,580
in dieser Folge werden wir

3
00:00:04,580 --> 00:00:07,300
automatisierte Tests für unseren Compiler schreiben.

4
00:00:07,300 --> 00:00:08,490
Das Setup aufzubauen

5
00:00:08,490 --> 00:00:10,360
mag auf den ersten Blick zäh aussehen,

6
00:00:10,360 --> 00:00:11,730
aber es ist es wert.

7
00:00:11,730 --> 00:00:13,010
Denn mit jeder Änderung,

8
00:00:13,010 --> 00:00:15,050
die wir an unserem Compiler durchführen

9
00:00:15,050 --> 00:00:17,360
können wir mit nur einem Knopfdruck überprüfen,

10
00:00:17,360 --> 00:00:19,470
ob alles was wir vorher implementiert haben

11
00:00:19,470 --> 00:00:20,510
noch funktioniert.

12
00:00:20,940 --> 00:00:22,100
Mein Name ist yankee

13
00:00:22,100 --> 00:00:24,360
und ich wünsche euch viel Spaß.

14
00:00:25,190 --> 00:00:28,040
Als Erstes bauen wir uns eine Testumgebung auf.

15
00:00:28,040 --> 00:00:30,320
Ich verwende dafür TestNG,

16
00:00:30,320 --> 00:00:33,510
ihr könnt wenn ihr es gewohnt seit natürlich auch

17
00:00:33,510 --> 00:00:35,460
ein anderes Testframework nehmen,

18
00:00:35,460 --> 00:00:38,030
zum Beispiel JUnit.

19
00:00:38,300 --> 00:00:40,590
Um TestNG in Eclipse reinzubekommen

20
00:00:40,590 --> 00:00:42,880
geht ihr hier auf testng.org,

21
00:00:42,880 --> 00:00:44,690
geht dann hier auf "Download",

22
00:00:44,690 --> 00:00:46,230
dann kopiert ihr euch

23
00:00:46,230 --> 00:00:47,830
die obere Adresse hier,

24
00:00:47,830 --> 00:00:49,860
ich denke mal ihr habt offentlich ein Eclipse

25
00:00:49,860 --> 00:00:53,930
was neuer ist als Version 3.4.

26
00:00:54,380 --> 00:00:56,790
Dann geht ihr in Eclipse auf

27
00:00:56,790 --> 00:00:59,440
"Help"->"Install New Software...",

28
00:00:59,850 --> 00:01:02,760
pastet die Adresse hier rein

29
00:01:02,760 --> 00:01:03,960
drückt dann Enter,

30
00:01:03,960 --> 00:01:06,810
dann kommt hier unten "TestNG"

31
00:01:06,810 --> 00:01:08,830
als ein Installationskandidat,

32
00:01:08,830 --> 00:01:10,620
klickt euch hier durch, durch next,

33
00:01:10,620 --> 00:01:11,740
ihr werdet dann da durchgeführt,

34
00:01:11,740 --> 00:01:13,450
Ich hab' das schonmal für euch gemacht

35
00:01:13,450 --> 00:01:15,450
um euch damit nicht zu langweilen

36
00:01:15,450 --> 00:01:17,450
und dann kann's losgehen.

37
00:01:17,450 --> 00:01:19,180
Dann werden wir uns jetzt als Erstes

38
00:01:19,180 --> 00:01:21,290
hier in unserem Compilerprojekt

39
00:01:21,290 --> 00:01:25,490
ein... neuen... source-folder anlegen

40
00:01:25,490 --> 00:01:26,600
für unsere tests,

41
00:01:26,600 --> 00:01:28,600
den nennen wir dann auch "test"

42
00:01:29,600 --> 00:01:31,650
und in diesem "test"-Ordner

43
00:01:31,650 --> 00:01:34,300
werden wir eine neue TestNG-Klasse anlegen,

44
00:01:34,300 --> 00:01:36,370
dann gehen wir hier einfach auf "New"->"Other",

45
00:01:36,370 --> 00:01:38,370
dann "TestNG class",

46
00:01:39,060 --> 00:01:41,610
in unserem "test folder" bitte,

47
00:01:43,140 --> 00:01:51,950
im Package "de.letsbuildacompiler.compiler".

48
00:01:51,950 --> 00:01:54,800
Den Test nennen wir dann "CompilerTest"

49
00:01:56,750 --> 00:01:58,670
und dann gehen wir auf finish,

50
00:01:59,000 --> 00:02:02,450
lassen uns diese... die Einrückung einmal korrigieren

51
00:02:02,450 --> 00:02:04,470
und dann meckert Eclipse hier noch,

52
00:02:04,470 --> 00:02:06,600
dass es das "org.testng" nicht findet,

53
00:02:06,600 --> 00:02:08,710
wenn ich aber einfach nur mit der Maus drüber geh',

54
00:02:08,710 --> 00:02:10,540
dann findet ihr hier unter den Quick-fixes

55
00:02:10,540 --> 00:02:13,270
als Erstes bereits "Add TestNG library",

56
00:02:13,270 --> 00:02:14,720
da klicken wir dann drauf

57
00:02:15,190 --> 00:02:17,010
und schon ist Eclipse glücklich.

58
00:02:17,010 --> 00:02:19,640
Dann werden wir die automatisch generierte

59
00:02:19,640 --> 00:02:22,380
Testmethode mit dem vielsagenden Namen "f"

60
00:02:22,380 --> 00:02:23,530
umbenennen

61
00:02:24,630 --> 00:02:26,460
und zwar wollen wir in diese Methode

62
00:02:26,460 --> 00:02:29,490
jetzt testen, dass ein bestimmter Output

63
00:02:29,490 --> 00:02:32,320
von einem Programm ausgegeben wurde,

64
00:02:32,320 --> 00:02:34,080
welches wir kompiliert

65
00:02:34,080 --> 00:02:36,190
und dann laufengelassen haben.

66
00:02:36,640 --> 00:02:39,200
Deswegen nennen wir auch unser Testmethode entsprechend

67
00:02:39,200 --> 00:02:41,310
und nennen sie:

68
00:02:42,100 --> 00:02:52,060
"runningCode_outputsExpectedText".

69
00:02:52,790 --> 00:02:54,610
Die arbeitet mit zwei Parametern,

70
00:02:54,610 --> 00:02:56,130
nämlich einmal dem Code

71
00:02:57,370 --> 00:03:01,360
und dem "expected Text".

72
00:03:07,610 --> 00:03:10,960
Die Testmethode... unterteilt sich dann

73
00:03:10,960 --> 00:03:13,000
in eine "Execution",

74
00:03:13,820 --> 00:03:17,190
da bekommen wir den tatsächlichen Output,

75
00:03:17,190 --> 00:03:19,190
den "actualOutput"

76
00:03:29,560 --> 00:03:31,770
und danach werden wir überprüfen

77
00:03:31,770 --> 00:03:35,360
ob das Ergebnis auch unseren Erwartungen entspricht.

78
00:03:39,920 --> 00:03:42,580
Das können wir mit einer Assertion machen,

79
00:03:42,580 --> 00:03:46,110
Dafür nehmen wir "Assert.assertEquals"

80
00:03:54,970 --> 00:03:58,450
und schon ist unsere einfach Testmethode fast fertig.

81
00:04:00,030 --> 00:04:01,490
Als nächstes wollen wir den Code

82
00:04:01,490 --> 00:04:03,100
 in unser "compileAndRun"-Methode,

83
00:04:03,100 --> 00:04:05,890
die wir noch erzeugen müssen, kompilieren.

84
00:04:05,890 --> 00:04:07,550
Um den Code kompilieren zu können

85
00:04:07,550 --> 00:04:09,050
brauchen wir das Jasmin-Jar.

86
00:04:09,050 --> 00:04:11,340
Also holen wir uns das in unser Projekt rein,

87
00:04:11,340 --> 00:04:13,150
wir erzeugen hier wieder ein neues Verzeichnis,

88
00:04:13,150 --> 00:04:16,330
welches wir "lib" nennen in alter Gewohnheit,

89
00:04:18,420 --> 00:04:20,040
gehen dann hier auf "Import",

90
00:04:20,040 --> 00:04:23,000
holen uns aus dem "File System"

91
00:04:23,390 --> 00:04:26,280
unser Jasmin-Jar rein,

92
00:04:27,240 --> 00:04:28,600
dann müssen wir den "Build Path"

93
00:04:28,600 --> 00:04:30,600
noch entsprechend anpassen

94
00:04:33,020 --> 00:04:36,640
und das Jar hinzufügen,

95
00:04:36,640 --> 00:04:38,710
das "jasmin.jar"

96
00:04:40,260 --> 00:04:41,560
und dann können wir mit der

97
00:04:41,560 --> 00:04:43,630
"compileAndRun"-Methode loslegen.

98
00:04:43,630 --> 00:04:45,490
Wir gehen hier einfach mit dem Cursor drauf,

99
00:04:45,490 --> 00:04:47,100
drücken Steuerung+1

100
00:04:47,100 --> 00:04:49,730
und werden dann auf "create method"

101
00:04:49,730 --> 00:04:51,040
enter drücken.

102
00:04:51,040 --> 00:04:52,300
Dann bekommen wir hier schonmal

103
00:04:52,300 --> 00:04:54,130
ein Skelett für unsere Methode generiert

104
00:04:54,130 --> 00:04:55,830
mit der korrekten Signatur

105
00:04:55,830 --> 00:04:57,430
und es kann losgehen.

106
00:04:57,430 --> 00:04:59,470
Als erstes wollen wir jetzt den Code,

107
00:04:59,470 --> 00:05:02,690
den wir hier übergeben bekommen haben kompilieren.

108
00:05:02,690 --> 00:05:04,480
Das machen wir indem wir

109
00:05:04,480 --> 00:05:07,540
ein "ClassFile" erzeugen

110
00:05:15,400 --> 00:05:17,610
und dieses "classFile" jetzt

111
00:05:17,610 --> 00:05:19,610
mit unserem Code füttern.

112
00:05:20,990 --> 00:05:25,240
Dafür rufen wir die "readJasmin"-Methode auf,

113
00:05:25,240 --> 00:05:28,970
übergeben einen StringReader mit unserem Code,

114
00:05:29,550 --> 00:05:31,340
der Name hier interessiert uns nicht,

115
00:05:31,340 --> 00:05:34,410
da übergeben wir einfach einen leeren String

116
00:05:34,410 --> 00:05:36,990
und "numerLines" erkläre ich später mal

117
00:05:36,990 --> 00:05:38,310
wofür das gut ist,

118
00:05:38,310 --> 00:05:40,410
jetzt setzen wir das Flag hier einfach auf "false",

119
00:05:40,410 --> 00:05:41,980
denn das brauchen wir nicht.

120
00:05:41,980 --> 00:05:44,550
Schon haben wir unsere Klasse kompiliert.

121
00:05:44,550 --> 00:05:46,480
Jetzt müssen wir dieses "classFile",

122
00:05:46,480 --> 00:05:48,510
welches wir im Moment nur "in-memory" haben

123
00:05:48,510 --> 00:05:50,510
auch noch in eine Datei schreiben.

124
00:05:50,510 --> 00:05:53,360
Dafür erzeugen wir uns erstmal

125
00:05:53,490 --> 00:05:55,460
eine Variable mit einem Ordner

126
00:05:55,460 --> 00:05:57,460
mit dem wir arbeiten können,

127
00:05:59,450 --> 00:06:01,200
die nenn' ich jetzt hier einfach "tempDir",

128
00:06:01,200 --> 00:06:03,530
denn es wird ein temporäres Verzeichnis sein,

129
00:06:03,530 --> 00:06:04,590
welches wir immer am Ende

130
00:06:04,590 --> 00:06:06,390
einfach wieder löschen können

131
00:06:08,850 --> 00:06:11,300
und dann wird unsere Datei

132
00:06:11,300 --> 00:06:13,300
in die wir reinschreiben wollen

133
00:06:18,210 --> 00:06:20,430
in dem "tempDir"

134
00:06:21,030 --> 00:06:23,350
liegen und als Name

135
00:06:23,550 --> 00:06:24,810
den Name der Klasse,

136
00:06:24,810 --> 00:06:26,140
den kriegen wir raus indem wir

137
00:06:26,140 --> 00:06:29,980
classFile.getClassName() aufrufen,

138
00:06:30,160 --> 00:06:33,980
plus die Endung ".class" nehmen.

139
00:06:36,560 --> 00:06:38,440
Und dann werden wir

140
00:06:38,440 --> 00:06:43,470
"classFile.write" aufrufen,

141
00:06:43,470 --> 00:06:45,830
der hätte jetzt gerne ein OutputStream

142
00:06:45,830 --> 00:06:49,050
und der soll auf unseren "outputPath" verweisen,

143
00:06:49,050 --> 00:06:50,420
da kommen wir hin in dem wir jetzt

144
00:06:50,420 --> 00:06:52,990
"Files.newOutputStream" aufrufen,

145
00:06:53,380 --> 00:06:55,660
unseren Outputpath übergeben

146
00:06:55,660 --> 00:06:58,110
und keine "Options" übergeben.

147
00:06:59,350 --> 00:07:00,650
Jetzt müssen wir nurnoch

148
00:07:00,650 --> 00:07:02,490
die Klasse, die wir hier generiert haben

149
00:07:02,490 --> 00:07:04,030
auch ausführen

150
00:07:04,560 --> 00:07:05,730
und das Ergebnis

151
00:07:05,730 --> 00:07:08,100
was dabei rauskommt zurückgeben.

152
00:07:14,310 --> 00:07:15,320
Wir werden uns gleich noch

153
00:07:15,320 --> 00:07:17,950
diese Methode "runJavaClass" erzeugen,

154
00:07:17,950 --> 00:07:21,600
die soll einfach im tempDir

155
00:07:21,780 --> 00:07:24,340
die Klasse mit dem Namen

156
00:07:25,050 --> 00:07:29,780
"classFile.getClassName()" ausführen.

157
00:07:30,510 --> 00:07:33,830
Außerdem hatten wir hier eben noch ein paar Fehler

158
00:07:34,100 --> 00:07:36,510
weil wir uns nicht um Exceptions gekümmert haben,

159
00:07:36,510 --> 00:07:37,740
das schreibe ich jetzt noch

160
00:07:37,740 --> 00:07:39,710
ein "throws Exception"

161
00:07:39,710 --> 00:07:41,160
oben an die Methode dran,

162
00:07:41,160 --> 00:07:42,940
denn wenn eine Exception geworfen wird,

163
00:07:42,940 --> 00:07:43,910
dann müssen wir die

164
00:07:43,910 --> 00:07:45,520
bei einem Test nicht abfangen,

165
00:07:45,520 --> 00:07:48,030
der Test soll dann einfach fehlschlagen.

166
00:07:48,250 --> 00:07:49,590
Und dann erzeugen wir uns

167
00:07:49,590 --> 00:07:52,010
natürlich noch die Methode "runJavaClass".

168
00:07:52,420 --> 00:07:55,100
Wieder mit Steuerung+1->"create method"

169
00:07:57,820 --> 00:08:00,410
und schon sind wir wieder einen Schritt weiter.

170
00:08:01,110 --> 00:08:03,180
Dafür möchte ich einen neuen,

171
00:08:03,180 --> 00:08:05,460
seperaten Javaprozess starten,

172
00:08:05,460 --> 00:08:08,450
nur zur Sicherheit, damit alles seperat ist

173
00:08:09,070 --> 00:08:11,600
und das können wir machen indem wir

174
00:08:11,600 --> 00:08:18,380
"Runtime.getRuntime().exec()" aufrufen

175
00:08:18,380 --> 00:08:21,420
und jetzt hier ein Array übergeben

176
00:08:21,420 --> 00:08:24,160
mit unseren Kommando.

177
00:08:27,170 --> 00:08:30,980
Wir erzeugen uns also einen neuen Stringarray

178
00:08:33,540 --> 00:08:35,430
und da steht unser Kommando drin,

179
00:08:35,430 --> 00:08:37,530
das wäre "java",

180
00:08:38,020 --> 00:08:42,460
dann bekommt es den Classpath explizit angegeben,

181
00:08:42,460 --> 00:08:46,150
denn der Classpath ist unser

182
00:08:46,150 --> 00:08:48,470
Ordner indem unsere Klasse liegt

183
00:08:48,470 --> 00:08:50,230
denn benenn ich hier nochmal um

184
00:08:50,230 --> 00:08:52,230
in einfach nur "dir"

185
00:08:53,860 --> 00:08:55,070
und natürlich brauchen wir

186
00:08:55,070 --> 00:08:57,770
hier nur die Stringrepräsentation,

187
00:08:58,310 --> 00:09:00,040
und dann bekommt der auch noch

188
00:09:00,040 --> 00:09:02,310
den "className" übergeben.

189
00:09:03,540 --> 00:09:05,760
Aus diesem Methodenaufruf

190
00:09:05,760 --> 00:09:08,050
erhalten wir jetzt einen Prozess,

191
00:09:08,050 --> 00:09:10,270
den speichern wir uns in eine Variable

192
00:09:10,270 --> 00:09:14,770
ich markier es einfach und drück Alt+Shift+L,

193
00:09:15,900 --> 00:09:18,450
dann geben wir der Variable einen Namen

194
00:09:18,890 --> 00:09:20,700
und dann haben wir hier unseren Prozess.

195
00:09:20,700 --> 00:09:23,200
Das schmeißt natürlich mal wieder Exceptions,

196
00:09:23,200 --> 00:09:25,680
deswegen füge ich hier das generische

197
00:09:25,680 --> 00:09:28,120
"throws Exception" ein

198
00:09:31,770 --> 00:09:34,020
und jetzt können wir uns

199
00:09:34,550 --> 00:09:36,370
den InputStream holen,

200
00:09:36,370 --> 00:09:39,250
der von diesem Prozess wiederrum der OutputStream ist

201
00:09:53,370 --> 00:09:55,280
und jetzt möchten wir den

202
00:09:55,280 --> 00:09:58,240
kompletten InputStream einlesen

203
00:09:58,240 --> 00:10:01,670
und das Gesamtergebnis als String zurückgeben.

204
00:10:02,210 --> 00:10:05,270
Dafür greife ich jetzt zu einem kleinen Trick,

205
00:10:05,270 --> 00:10:07,560
weil der Code wird ansonsten

206
00:10:07,560 --> 00:10:08,960
sehr lang und unschön,

207
00:10:08,960 --> 00:10:10,770
auch das ist jetzt nicht unbedingt das Schönste,

208
00:10:10,770 --> 00:10:12,020
was man sich vorstellen könnte,

209
00:10:12,020 --> 00:10:14,450
aber es ist wenigstens kurz und schnell erklärt:

210
00:10:14,790 --> 00:10:17,550
Ich erzeuge nämlich einen neuen Scanner,

211
00:10:18,880 --> 00:10:22,060
der kann nämlich von einem InputStream lesen

212
00:10:22,420 --> 00:10:27,950
und der soll mit "useDelimiter(\\A)",

213
00:10:27,950 --> 00:10:31,620
das heißt dann "bitte bis zum Ende der Datei einlesen"

214
00:10:31,780 --> 00:10:33,770
und dann einfach das Nächste

215
00:10:33,770 --> 00:10:36,410
und einzige Ergebnis zurückliefern.

216
00:10:37,070 --> 00:10:39,250
Da schreiben wir jetzt noch "return" davor

217
00:10:40,710 --> 00:10:42,950
und schon ist diese Methode fertig.

218
00:10:43,170 --> 00:10:44,420
Was gibt es noch zu tun?

219
00:10:44,420 --> 00:10:47,030
Wir müssen vor jedem unser Tests

220
00:10:47,030 --> 00:10:49,030
dieses "tempDir" hier anlegen,

221
00:10:49,870 --> 00:10:53,500
dafür erzeuge ich einfach eine

222
00:10:53,500 --> 00:10:55,500
public-Methode

223
00:10:57,850 --> 00:10:59,870
"createTempDir"

224
00:11:02,450 --> 00:11:06,370
und die wird ein temporäres Verzeichnis anlegen

225
00:11:06,370 --> 00:11:09,900
und es in unser "tempDir"-Variable den Pfad dazu speichern.

226
00:11:15,150 --> 00:11:17,360
Als Prefix könnt ihr irgendwas nehmen,

227
00:11:17,360 --> 00:11:19,900
ich nehm' hier mal "CompilerTest"

228
00:11:20,920 --> 00:11:23,320
und Attribute müssen wir keine übergeben.

229
00:11:24,060 --> 00:11:26,130
Das schmeißt jetzt natürlich wieder noch eine Exception,

230
00:11:26,130 --> 00:11:27,610
die fügen wir einfach

231
00:11:27,610 --> 00:11:29,690
an die Methodensignatur an

232
00:11:29,690 --> 00:11:32,070
und dann schreiben wir hier dran:

233
00:11:32,070 --> 00:11:34,400
"@BeforeMethod" um TestNG zu sagen:

234
00:11:34,400 --> 00:11:37,350
Es soll dies bitte vor jedem einzelnen Test tun.

235
00:11:37,350 --> 00:11:39,750
Dann wollen wir natürlich nach jedem Test

236
00:11:39,750 --> 00:11:41,250
das Verzeichnis auch wieder löschen, 

237
00:11:41,250 --> 00:11:44,520
deswegen erstelle ich hier auch noch eine Methode

238
00:11:45,560 --> 00:11:47,980
"deleteTempDir".

239
00:11:52,060 --> 00:11:53,950
Und so etwas einfaches wie

240
00:11:53,950 --> 00:11:57,200
ein Verzeichnis in Java rekursiv zu löschen

241
00:11:57,200 --> 00:11:58,700
ist eine halbe Wissenschaft,

242
00:11:58,700 --> 00:12:01,490
da könnt ihr euch sehr lange im Internet zu schlau machen

243
00:12:01,490 --> 00:12:03,160
was man da alles beachten kann,

244
00:12:03,160 --> 00:12:04,680
ich mach jetzt mal in dem Fall

245
00:12:04,680 --> 00:12:07,180
keine Wissenschaft daraus, sondern

246
00:12:07,180 --> 00:12:11,000
nehme eine möglichst einfach und kurze Lösung

247
00:12:14,690 --> 00:12:18,180
und baue eine Funktion "deleteRecursive",

248
00:12:18,450 --> 00:12:21,120
der wir unseren "tempDir" als

249
00:12:21,120 --> 00:12:24,440
altgebackenes "File" übergeben können

250
00:12:26,200 --> 00:12:28,740
und die Methode wird dann

251
00:12:28,740 --> 00:12:31,420
nach jeder Testmethode aufgerufen.

252
00:12:32,810 --> 00:12:36,020
Jetzt müssen wir natürlich hier dieses "deleteRecursive"

253
00:12:36,270 --> 00:12:38,020
noch implementieren,

254
00:12:39,810 --> 00:12:42,140
das funktioniert dann so, dass wir nachgucken

255
00:12:42,140 --> 00:12:44,370
ob "file" ein "directory" ist

256
00:12:46,520 --> 00:12:48,510
und wenn dies der Fall ist,

257
00:12:48,510 --> 00:12:52,710
dann iterieren wir über die Kinder dieses Directorys

258
00:13:03,790 --> 00:13:08,830
und sagen hier wieder weiter "deleteRecursive"

259
00:13:08,830 --> 00:13:12,330
und dann "file", also "child"

260
00:13:17,020 --> 00:13:19,000
und am Ende der Methode

261
00:13:19,000 --> 00:13:21,090
löschen wir die Datei selbst.

262
00:13:21,090 --> 00:13:23,750
Und wir gucken nach ob das funktioniert hat:

263
00:13:26,230 --> 00:13:28,200
Denn wenn das nicht der Fall ist,

264
00:13:28,200 --> 00:13:30,420
dann haben wir irgendein Problem

265
00:13:31,590 --> 00:13:34,890
und wir schmeißen dann einfach ein "Error".

266
00:13:52,090 --> 00:13:53,670
So. Fertig.

267
00:13:54,000 --> 00:13:57,390
So dann gucken wir uns wieder unsere Testmethode an:

268
00:13:57,390 --> 00:13:59,420
Hier wird noch eine Exception geschmissen,

269
00:13:59,420 --> 00:14:01,450
die leiten wir auch wieder einfach weiter

270
00:14:01,450 --> 00:14:03,550
mit "throws Exception",

271
00:14:03,550 --> 00:14:05,240
wenn eine Exception geworfen wird,

272
00:14:05,240 --> 00:14:07,750
soll unser Test einfach fehlschlagen

273
00:14:07,750 --> 00:14:09,790
und jetzt müssen wir noch definieren

274
00:14:09,790 --> 00:14:13,320
wo hier der Code und der expectet Text herkommt.

275
00:14:13,320 --> 00:14:16,160
Dafür erzeugen wir einen "DataProvider".

276
00:14:16,660 --> 00:14:18,260
Das funktioniert ganz einfach:

277
00:14:18,260 --> 00:14:20,610
Wir erzeugen eine public-Methode,

278
00:14:20,610 --> 00:14:24,230
die ein zweidimensionalen Objektarray zurückgibt

279
00:14:24,230 --> 00:14:25,720
und nennen die:

280
00:14:25,720 --> 00:14:31,200
provide "code" und "expected text".

281
00:14:35,680 --> 00:14:39,730
Die gibt einfach einen festen Wert zurück,

282
00:14:39,730 --> 00:14:42,680
nämlich ein Objektarray,

283
00:14:50,610 --> 00:14:52,200
und hierdrin steht:

284
00:14:53,010 --> 00:14:55,740
immer ein Code und ein erwartetes Ergebnis.

285
00:14:55,740 --> 00:14:57,800
Zum Beispiel haben wir jetzt als Code:

286
00:14:57,800 --> 00:15:01,300
"1+2", das ist eine simple Rechnung,

287
00:15:01,300 --> 00:15:03,700
da sollte dann als Ergebnis

288
00:15:03,700 --> 00:15:05,570
drei und ein Zeilenumbruch,

289
00:15:05,570 --> 00:15:07,810
weil verwenden ja "println"

290
00:15:08,280 --> 00:15:10,130
herauskommen

291
00:15:12,840 --> 00:15:14,300
und wir könnten noch

292
00:15:14,300 --> 00:15:17,250
ein etwas komplexeres Beispiel nehmen,

293
00:15:17,250 --> 00:15:20,260
wo dann auch noch eine mehrstellige Zahl drin vorkommt,

294
00:15:20,260 --> 00:15:22,380
wie wir sie später hinzugefügt haben,

295
00:15:22,380 --> 00:15:24,570
also zum Beispiel noch plus 42

296
00:15:24,570 --> 00:15:26,550
und dann sind es 42 plus 3

297
00:15:26,550 --> 00:15:30,240
und das müsste 45 dabei herauskommen.

298
00:15:30,940 --> 00:15:32,740
Dann müssen wir hier oben in dem Test

299
00:15:32,740 --> 00:15:33,720
hier jetzt noch angeben,

300
00:15:33,720 --> 00:15:37,200
dass dieser DataProvider verwendet werden soll,

301
00:15:37,200 --> 00:15:40,670
da schreiben wir dann einfach den Namen dieser Methode hier rein.

302
00:15:43,440 --> 00:15:44,990
Dann speichern wir das,

303
00:15:46,240 --> 00:15:49,020
und wir markieren diese Methode hier

304
00:15:49,020 --> 00:15:51,020
auch noch als "DataProvider".

305
00:15:51,630 --> 00:15:54,360
So, jetzt gibt es hier noch etwas ganz wichtiges

306
00:15:54,360 --> 00:15:55,870
was wir übersehen haben

307
00:15:55,870 --> 00:15:58,280
(also ihr bestimmt auch, nicht nur ich ;-)):

308
00:15:58,640 --> 00:16:01,220
Und zwar haben wir hier natürlich die Ausdrücke

309
00:16:01,220 --> 00:16:03,860
in unser Sprache, die wir kompilieren wollen

310
00:16:03,860 --> 00:16:06,090
und die schiebe ich hier unten in

311
00:16:06,090 --> 00:16:07,480
Jasmin einfach rein,

312
00:16:07,480 --> 00:16:09,260
dabei ist das überhaupt kein Jasmincode,

313
00:16:09,260 --> 00:16:11,060
wir müssen natürlich erstmal unseren Compiler

314
00:16:11,060 --> 00:16:12,840
drüberlaufen lassen, damit der

315
00:16:12,840 --> 00:16:14,910
Jasmincode daraus generiert.

316
00:16:15,630 --> 00:16:17,700
Damit wir da hinkommen

317
00:16:17,700 --> 00:16:19,680
refactorn wir jetzt erstmal

318
00:16:19,680 --> 00:16:21,910
unsere Main-Klasse hier oben ein bißchen,

319
00:16:21,910 --> 00:16:25,050
denn so ist sie doch etwas unpraktisch zu verwenden.

320
00:16:25,050 --> 00:16:29,620
Statt einfach nur der main-Methode

321
00:16:29,620 --> 00:16:33,750
füge ich jetzt hier eine compile-Methode hinzu

322
00:16:36,930 --> 00:16:41,000
und die bekommt direkt einen ANTLRInputStream

323
00:16:45,360 --> 00:16:47,340
und das ist eigentlich garkeine void-Methode,

324
00:16:47,340 --> 00:16:49,140
sondern sie gibt einen String zurück,

325
00:16:49,140 --> 00:16:52,250
nämlich nachher mit unserem Jasmincode

326
00:16:52,780 --> 00:16:56,930
und dann werden wir all dies zu großen Teilen

327
00:16:56,930 --> 00:17:00,220
in die compile-Methode hier unten auslagern

328
00:17:02,130 --> 00:17:04,510
und werden dann hier an

329
00:17:06,020 --> 00:17:09,030
dieser Stelle kein "System.out" verwenden,

330
00:17:09,030 --> 00:17:11,830
sondern ein "return"

331
00:17:14,450 --> 00:17:18,620
und hier werden wir jetzt das "System.out" wieder einfügen

332
00:17:21,490 --> 00:17:25,950
und zwar mir "compile" und dann unserem "input".

333
00:17:30,020 --> 00:17:33,910
Jetzt werden wir diese Neuerungen von hier

334
00:17:33,910 --> 00:17:35,920
noch in unseren Test einbauen,

335
00:17:36,440 --> 00:17:39,270
dafür werden wir den Code

336
00:17:39,740 --> 00:17:41,440
einmal kompilieren

337
00:17:43,500 --> 00:17:45,230
und zwar rufen wir jetzt hier

338
00:17:45,230 --> 00:17:47,050
von unserer Main-Klasse

339
00:17:47,050 --> 00:17:49,510
die "compile"-Methode auf

340
00:17:50,080 --> 00:17:51,750
und die bekommt

341
00:17:52,550 --> 00:17:57,840
einen InputStream direkt mit unserem Code als Input.

342
00:17:58,970 --> 00:18:01,770
Jetzt führen wir den Test aus

343
00:18:02,030 --> 00:18:04,290
und seid ihr genaus gespannt wie ich

344
00:18:04,290 --> 00:18:06,290
was dabei rauskommt?

345
00:18:08,930 --> 00:18:11,250
Ihr seht, wir bekommen hier einen kleinen Report

346
00:18:11,250 --> 00:18:15,110
und da steht: "Total tests run: 2, Failures: 0".

347
00:18:15,740 --> 00:18:18,610
Beides soll angeblich "gepassed" haben.

348
00:18:18,610 --> 00:18:20,650
Jetzt wollen wir das doch mal herausfordern

349
00:18:20,650 --> 00:18:22,670
ob denn unser Code tatsächlich

350
00:18:22,670 --> 00:18:25,600
korrekt durch die Tests ausgeführt worden ist

351
00:18:25,600 --> 00:18:27,040
und wir schreiben jetzt hier mal

352
00:18:27,040 --> 00:18:31,930
statt "45" "46" und führen dann die Tests nochmal aus.

353
00:18:34,410 --> 00:18:37,620
Jetzt sehen wir hier: "Failures: 1"

354
00:18:38,900 --> 00:18:41,630
und hier sehen wir jetzt einen "AssertionError":

355
00:18:41,630 --> 00:18:45,380
"expected 46, but found 45".

356
00:18:46,050 --> 00:18:48,440
Die ersten Tests zu schreiben war viel Aufwand,

357
00:18:48,440 --> 00:18:51,880
weitere Tests hinzuzufügen ist dafür ein Kinderspiel.

358
00:18:51,880 --> 00:18:53,980
Und das wird uns noch viel weiterhelfen,

359
00:18:53,980 --> 00:18:55,820
denn wir können für jedes neue Feature,

360
00:18:55,820 --> 00:18:57,910
das wir in unseren Compiler einbauen

361
00:18:57,910 --> 00:19:00,790
einen neuen Test hinzufügen und mit nur einem Klick sehen,

362
00:19:00,790 --> 00:19:02,720
dass sowohl unser neues Feature,

363
00:19:02,720 --> 00:19:06,160
als auch alle bisherigen Features immernoch funktionieren.

364
00:19:06,160 --> 00:19:07,590
In den nächsten Videos

365
00:19:07,590 --> 00:19:09,670
werden wir unsere Sprache mächtiger machen

366
00:19:09,670 --> 00:19:12,480
damit wir mehr als nur eine Zahl ausgeben können.

367
00:19:12,810 --> 00:19:14,220
Vielen Dank an Gadarol,

368
00:19:14,220 --> 00:19:17,380
der mir für die Aufnahmen sein Studio zur Verfügung stellt.

369
00:19:17,650 --> 00:19:19,650
Vielen Dank für Eure Aufmerksamkeit,

370
00:19:19,650 --> 00:19:21,280
ich hoffe es hat euch Spaß gemacht,

371
00:19:21,280 --> 00:19:23,500
lasst mir Daumen, Kommentare und Abos da

372
00:19:23,500 --> 00:19:25,850
und schaltet wieder ein, wenn es wieder heißt:

373
00:19:25,850 --> 00:19:27,850
"Let's build a compiler".

