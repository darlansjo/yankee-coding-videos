1
00:00:00,000 --> 00:00:02,822
Willkommen zurück zu "Let's build a compiler".

2
00:00:02,820 --> 00:00:05,582
Mittlerweile können unsere Funktionen komplexen Code enthalten

3
00:00:05,580 --> 00:00:08,120
und haben getrennte lokale Variablen.

4
00:00:08,120 --> 00:00:09,711
Allerdings können unsere Funktionen

5
00:00:09,711 --> 00:00:11,710
immernoch keine Parameter entgegennehmen.

6
00:00:11,710 --> 00:00:14,302
In dieser Folge werden wir dieses Problem beheben

7
00:00:14,300 --> 00:00:16,791
und unseren Funktionen Parameter beibringen.

8
00:00:16,790 --> 00:00:19,573
Außerdem enthält diese Folge ein Experiment:

9
00:00:19,570 --> 00:00:21,680
Statt wie bisher während dem Coden zu erklären

10
00:00:21,680 --> 00:00:24,324
habe ich zuerst nur das Bildmaterial aufgezeichnet

11
00:00:24,320 --> 00:00:25,333
und in einem zweiten Schritt

12
00:00:25,330 --> 00:00:27,204
das Bildmaterial kommentiert.

13
00:00:27,200 --> 00:00:28,457
Schreibt mir in die Kommentare

14
00:00:28,450 --> 00:00:29,111
wie ihr dies findet

15
00:00:29,110 --> 00:00:32,031
und wie ich in zukünftigen Videos weitermachen soll.

16
00:00:32,924 --> 00:00:35,395
Als Erstes werden wir unsere Spezifikation erweitern,

17
00:00:35,390 --> 00:00:36,360
ihr kennt das ja.

18
00:00:36,360 --> 00:00:38,884
Dafür basteln wir uns eine Funktion

19
00:00:38,880 --> 00:00:40,506
die Parameter hat,

20
00:00:40,500 --> 00:00:42,608
ich habe jetzt einfach mal hier

21
00:00:42,600 --> 00:00:45,591
eine Funktion die äußerst kreativ "add" heißt genommen

22
00:00:45,590 --> 00:00:47,840
und die zwei C-Style-Parameter hat,

23
00:00:47,840 --> 00:00:49,013
nämlich "a" und "b"

24
00:00:49,010 --> 00:00:51,444
und die die beiden zusammenaddiert.

25
00:00:51,440 --> 00:00:53,288
Dann hier in einem Test

26
00:00:53,280 --> 00:00:56,111
lassen wir die Funktion 5 und 8 zusammenaddieren,

27
00:00:56,110 --> 00:00:58,377
da sollte dann also 13 rauskommen.

28
00:00:58,370 --> 00:01:01,355
Dann kopieren wir das ganze in unseren Test

29
00:01:05,195 --> 00:01:07,520
und definieren dann hier auch

30
00:01:07,520 --> 00:01:09,146
das erwartete Ergebnis,

31
00:01:09,140 --> 00:01:12,697
nämlich die 13 und ein Zeilenumbruch.

32
00:01:12,690 --> 00:01:14,528
So, dann lassen wir wie gewohnt erstmal

33
00:01:14,520 --> 00:01:15,644
unseren Test laufen,

34
00:01:15,640 --> 00:01:18,377
denn der Test müsste ja jetzt fehlschlagen

35
00:01:18,370 --> 00:01:20,711
und schauen uns mal an warum er fehlschlägt:

36
00:01:20,710 --> 00:01:22,755
Wir haben hier also diesen mismatched input

37
00:01:22,750 --> 00:01:24,480
mit dem "int", das kommt

38
00:01:24,480 --> 00:01:26,035
hier aus unser Datei

39
00:01:26,030 --> 00:01:28,093
ganz oben aus der Funktionsdefiniton,

40
00:01:28,090 --> 00:01:29,964
da stehen diese Variablendefinitonen drin

41
00:01:29,960 --> 00:01:31,751
mit dem "int a" und dem "int b"

42
00:01:31,750 --> 00:01:33,555
und da stolpert er natürlich über das "int"

43
00:01:33,555 --> 00:01:35,550
was nicht da ist.

44
00:01:37,035 --> 00:01:39,688
Gefunden werden sollte das an dieser Stelle,

45
00:01:39,680 --> 00:01:42,800
da sind die sich öffnende und schließende Klammer,

46
00:01:42,800 --> 00:01:45,377
die haben wir hier in unserem "add" auch

47
00:01:45,370 --> 00:01:47,884
aber dummerweise fehlt das dazwischen,

48
00:01:47,880 --> 00:01:50,742
nämlich die Parameter von der Funktion.

49
00:01:50,740 --> 00:01:52,848
Die müssen wir jetzt hier ergänzen,

50
00:01:52,840 --> 00:01:55,475
dafür legen wir uns hier

51
00:01:55,470 --> 00:01:56,466
ein neues Label an

52
00:01:56,460 --> 00:01:57,817
welches wir "params" nennen

53
00:01:57,810 --> 00:02:00,257
und da sollen dann unsere 

54
00:02:00,250 --> 00:02:03,271
"parameterDeclaration" drinstehen.

55
00:02:04,066 --> 00:02:06,297
Diese Regel müssen wir natürlich noch erstellen,

56
00:02:06,290 --> 00:02:08,404
weil die gibt's ja noch nicht.

57
00:02:08,400 --> 00:02:11,426
Und so eine "parameterDeclaration"

58
00:02:11,420 --> 00:02:14,240
ist im wesentlichen eine Variablendeklaration,

59
00:02:14,240 --> 00:02:15,466
also auch erst ein "int"

60
00:02:15,466 --> 00:02:17,460
und dann ein Variablenname

61
00:02:17,460 --> 00:02:19,795
und dann jetzt optionalerweise ein Komma

62
00:02:19,790 --> 00:02:21,204
und noch ein Variablenname

63
00:02:21,200 --> 00:02:22,733
und optionalerweise noch ein Komma

64
00:02:22,730 --> 00:02:25,933
und noch ein Variablenname kommen usw.

65
00:02:25,930 --> 00:02:27,013
Es kann allerdings auch sein

66
00:02:27,013 --> 00:02:29,010
dass wir überhaupt keine Parameter haben

67
00:02:29,010 --> 00:02:30,573
und dann ist die Liste einfach leer.

68
00:02:30,570 --> 00:02:31,942
Dafür erstellen wir hier ein oder

69
00:02:31,940 --> 00:02:33,488
und schreiben nicht dahinter,

70
00:02:33,488 --> 00:02:35,480
das bedeutet dann: Es kann auch leer sein.

71
00:02:35,906 --> 00:02:38,435
Beim "functionCall" haben wir natürlich genau das Gleiche:

72
00:02:38,430 --> 00:02:40,711
Da sind auch die öffnenden Klammern und die Schließenden,

73
00:02:40,710 --> 00:02:43,453
wie hier aus unserem Code mit der 5 und der 8

74
00:02:43,450 --> 00:02:46,631
aber auch hier fehlt zwischen den Klammern

75
00:02:46,630 --> 00:02:50,124
die Liste mit den Parametern die wir übergeben wollen.

76
00:02:50,120 --> 00:02:52,337
Entsprechend fügen wir hier die

77
00:02:52,330 --> 00:02:54,057
"arguments" hinzu

78
00:02:54,050 --> 00:02:57,511
und die "arguments" bestehen aus einer "expressionList"

79
00:02:57,510 --> 00:02:59,386
und die Regel "expressionList"

80
00:02:59,386 --> 00:03:01,380
müssen wir natürlich auch noch anlegen.

81
00:03:02,311 --> 00:03:05,351
So eine expressionList sieht

82
00:03:05,764 --> 00:03:08,044
unser Parameterdeclaration sehr ähnlich,

83
00:03:08,040 --> 00:03:09,768
denn es kommt auch zuerst eine "expression",

84
00:03:09,760 --> 00:03:12,737
dann ein Komma, dann noch eine "expression"

85
00:03:12,730 --> 00:03:14,680
und eventuell geht das immer so weiter:

86
00:03:14,680 --> 00:03:16,017
Komma, "Expression" und so weiter

87
00:03:16,010 --> 00:03:18,835
oder die Liste kann auch leer sein.

88
00:03:19,991 --> 00:03:21,822
Dann müssen wir natürlich

89
00:03:21,820 --> 00:03:23,920
unseren Parser neu erzeugen,

90
00:03:24,871 --> 00:03:28,817
gehen in Eclipse wieder auf "F5" auf unserem Parserprojekt,

91
00:03:29,840 --> 00:03:31,622
lassen unseren Test wieder laufen

92
00:03:31,620 --> 00:03:34,062
und schauen mal nach ob die Fehler von ANTLR

93
00:03:34,060 --> 00:03:36,600
mit dem "mismatched int" weg sind.

94
00:03:37,146 --> 00:03:39,155
Und ja, wie ihr seht: Sie sind weg,

95
00:03:39,150 --> 00:03:41,813
es gibt keine Fehler von ANTLR mehr,

96
00:03:41,810 --> 00:03:44,035
nur unser Ergebnis ist immernoch nicht richtig,

97
00:03:44,030 --> 00:03:46,168
es gibt eine UndeclaredVariableException,

98
00:03:46,160 --> 00:03:48,528
denn die Variable "a" wurde nicht gefunden,

99
00:03:48,520 --> 00:03:51,688
hier wurde die Variable "a" definiert

100
00:03:51,680 --> 00:03:53,311
und hier wurde sie verwendet,

101
00:03:53,310 --> 00:03:55,000
aber sie ist nicht bekannt

102
00:03:55,000 --> 00:03:59,377
und hier wäre die Deklaration der Variable

103
00:03:59,370 --> 00:04:00,977
gewesen, aber natürlich

104
00:04:00,970 --> 00:04:03,257
greifen wir im Visitor noch nirgends darauf zu

105
00:04:03,250 --> 00:04:05,373
und das werden wir jetzt als nächstes ergänzen.

106
00:04:05,370 --> 00:04:09,844
Dafür gehen wir auf die "visitFunctionDefinition"-Methode

107
00:04:09,840 --> 00:04:13,773
und da können wir jetzt auf die

108
00:04:13,770 --> 00:04:16,142
Parameterliste zugreifen, auf die Variablen.

109
00:04:16,140 --> 00:04:18,248
Und diese Variablen müssen wir definieren,

110
00:04:18,240 --> 00:04:19,937
das können wir ganz einfach machen

111
00:04:19,930 --> 00:04:21,951
indem wir jetzt hier "visit" aufrufen

112
00:04:21,950 --> 00:04:24,937
und zwar auf unsere "params".

113
00:04:27,591 --> 00:04:30,857
Dieses "visit(params)" wird dann alle Parameter durchgehen,

114
00:04:30,850 --> 00:04:33,297
also das "visit" für jeden einzelnen Knoten

115
00:04:33,290 --> 00:04:35,528
von "params" durchgehen

116
00:04:36,053 --> 00:04:38,862
und da stehen "varDeclarartions" drin.

117
00:04:38,860 --> 00:04:40,591
Das heißt es wird letztlich auch die

118
00:04:40,590 --> 00:04:42,751
"visitVarDeclaration"-Methode aufgerufen

119
00:04:42,750 --> 00:04:44,946
für jeden einzelnen unser Parameter.

120
00:04:44,940 --> 00:04:47,595
Schauen wir uns nochmal die "visitVarDeclaration"-Methode an:

121
00:04:47,590 --> 00:04:48,800
Und da seht ihr

122
00:04:48,800 --> 00:04:50,222
dass die Variablen dann

123
00:04:50,220 --> 00:04:52,662
in unsere Variablentabelle hinzugefügt werden.

124
00:04:52,660 --> 00:04:56,635
Also sollten jetzt die Variablen auch deklariert werden.

125
00:04:56,630 --> 00:04:58,200
Das ist allerdings noch nicht alles,

126
00:04:58,200 --> 00:05:00,617
denn wir müssen auch die Methodensignatur

127
00:05:00,610 --> 00:05:02,511
die wir generieren anpassen.

128
00:05:02,510 --> 00:05:05,000
Dafür ebenfalls wieder in

129
00:05:05,000 --> 00:05:06,435
"visitFunctionDefinition",

130
00:05:06,430 --> 00:05:08,835
 da generieren wir unser ".method"

131
00:05:08,830 --> 00:05:12,497
und hinten dran hier seht ihr die Parameterliste

132
00:05:12,490 --> 00:05:14,271
und aktuell ist die noch leer.

133
00:05:14,270 --> 00:05:15,928
Da muss jetzt was drin stehen,

134
00:05:15,920 --> 00:05:19,435
also spalten wir den String an dieser Stelle,

135
00:05:20,235 --> 00:05:23,457
zwischen den beiden Klammern können wir jetzt

136
00:05:23,450 --> 00:05:25,640
die Parameterliste generieren.

137
00:05:25,640 --> 00:05:27,497
Die Parameterliste ist

138
00:05:27,490 --> 00:05:29,266
einfach nur eine Folge von Typen,

139
00:05:29,260 --> 00:05:30,253
das heißt wenn wir jetzt

140
00:05:30,250 --> 00:05:33,533
drei Integers übergeben würden wir "III" bekommen

141
00:05:34,097 --> 00:05:36,146
und deswegen brauchen wir als erstes natürlich mal

142
00:05:36,140 --> 00:05:38,471
die Anzahl der Parameter.

143
00:05:39,555 --> 00:05:41,995
Und wenn wir die Anzahl der Parameter haben,

144
00:05:41,990 --> 00:05:43,786
dann können wir

145
00:05:43,780 --> 00:05:47,991
unseren entsprechenden Variablentyp so häufig

146
00:05:47,990 --> 00:05:50,386
wiederholen wie wir Parameter haben.

147
00:05:50,380 --> 00:05:51,697
Also wir haben bis jetzt nur Integers,

148
00:05:51,690 --> 00:05:54,457
deswegen ist unser Variablentyp definitv ein "I"

149
00:05:54,450 --> 00:05:55,924
und jetzt müssen wir noch nachgucken

150
00:05:55,920 --> 00:05:58,191
wie wir an die Parameterliste,

151
00:05:58,191 --> 00:06:00,190
an die Anzahl der Parameter kommen.

152
00:06:00,902 --> 00:06:03,520
Hier haben wir in "params" die "paramDeclaration"

153
00:06:03,520 --> 00:06:06,457
und in der "parameterDeclaration"-Regel

154
00:06:06,450 --> 00:06:09,040
kommen jetzt mehrere "varDeclarations" vor.

155
00:06:09,040 --> 00:06:10,848
Aber es ist jetzt schwierig abzulesen

156
00:06:10,840 --> 00:06:13,555
wieviele "varDeclarations" wir haben.

157
00:06:13,942 --> 00:06:16,528
Und deswegen fügen wir jetzt diese

158
00:06:16,520 --> 00:06:18,195
"Declarations", alle die vorkommen

159
00:06:18,190 --> 00:06:20,191
in einer Liste zusammen,

160
00:06:20,190 --> 00:06:21,644
weil danach können wir dann nämlich

161
00:06:21,644 --> 00:06:23,640
einfach nachgucken wie groß die Liste ist.

162
00:06:23,640 --> 00:06:25,320
Dieses "in einer Liste zusammenfügen",

163
00:06:25,320 --> 00:06:28,426
das macht ihr einfach mit dem "+=",

164
00:06:28,420 --> 00:06:30,933
dann erzeugt ANTLR für euch eine Liste

165
00:06:30,930 --> 00:06:33,533
und immer wenn eine neue "varDeclaration" kommt

166
00:06:33,530 --> 00:06:35,302
wird sie dieser Liste angehängt.

167
00:06:35,300 --> 00:06:38,271
Dann generieren wir den Parser wieder neu,

168
00:06:38,270 --> 00:06:40,568
gehen zurück auf unseren Visitor

169
00:06:40,560 --> 00:06:42,808
und jetzt können wir auf die

170
00:06:42,800 --> 00:06:45,488
"numberOfParameters" zugreifen

171
00:06:45,480 --> 00:06:48,604
indem wir von "params" diese Liste

172
00:06:48,600 --> 00:06:50,102
mit den "Declarations" uns holen

173
00:06:50,100 --> 00:06:52,693
und dann davon die "size" nehmen.

174
00:06:52,690 --> 00:06:53,760
Dann müssen wir noch die

175
00:06:53,760 --> 00:06:56,084
"strRepeat"-Funktion implementieren

176
00:06:56,080 --> 00:06:57,871
weil die noch nicht da ist.

177
00:06:58,857 --> 00:07:00,231
Das sollte uns jetzt auch

178
00:07:00,230 --> 00:07:02,844
vor keine allzu großen Hindernisse stellen:

179
00:07:02,840 --> 00:07:05,351
Wir nehmen einfach einen StringBuilder,

180
00:07:05,350 --> 00:07:08,115
dass ist eine etwas effizientere Art

181
00:07:08,110 --> 00:07:09,688
Characters aneinander zu hauen

182
00:07:09,680 --> 00:07:12,022
und mit einem String am Ende zu enden

183
00:07:12,020 --> 00:07:14,715
und dann sagen wir bitte, dass

184
00:07:14,710 --> 00:07:18,346
so oft wie der String wiederholt werden sollte

185
00:07:18,340 --> 00:07:21,324
immer an das "result"

186
00:07:21,320 --> 00:07:23,280
einmal der

187
00:07:23,280 --> 00:07:25,715
übergebene String angehängt werden soll.

188
00:07:25,710 --> 00:07:27,840
Und wenn wir diese Methode jetzt aufrufen mit:

189
00:07:28,902 --> 00:07:31,448
Mit dem String "i" und dem "count" drei,

190
00:07:31,440 --> 00:07:34,346
dann sollte da "III" rauskommen.

191
00:07:34,340 --> 00:07:36,808
So, das gleiche ist bei dem "functionCall" auch noch:

192
00:07:36,800 --> 00:07:38,342
Auch bei dem "functionCall" müssen wir

193
00:07:38,340 --> 00:07:40,093
die volle Signatur übergeben

194
00:07:40,090 --> 00:07:42,493
und auch inklusive 

195
00:07:42,490 --> 00:07:44,791
der Anzahl Parameter.

196
00:07:44,790 --> 00:07:47,200
Also hier ist das Selbe:

197
00:07:47,200 --> 00:07:50,417
Wir splitten unseren String

198
00:07:50,410 --> 00:07:55,244
mit dem Funktionsname den wir aufrufen.

199
00:07:55,240 --> 00:07:56,951
Zwischen den Klammern

200
00:07:56,950 --> 00:07:59,751
wo unsere Parameterliste rein soll.

201
00:08:06,404 --> 00:08:08,697
Und dann klauen wir hier von hier unten

202
00:08:08,690 --> 00:08:10,835
von "visitFunctionDefinition" den Code

203
00:08:10,830 --> 00:08:13,684
den wir haben, weil der sieht nachher ganz ähnlich aus:

204
00:08:13,680 --> 00:08:16,231
Wir haben hier diese Anzahl der Parameter

205
00:08:16,230 --> 00:08:19,240
und erzeugen mit "string repeat"

206
00:08:20,400 --> 00:08:24,404
dann den Inhalt unser Parameterliste.

207
00:08:24,786 --> 00:08:26,706
Jetzt ist es hier natürlich nicht "params"

208
00:08:26,700 --> 00:08:28,680
und nicht "declaration"

209
00:08:29,657 --> 00:08:32,924
sondern es ist etwas was wir noch nicht erzeugt haben.

210
00:08:32,920 --> 00:08:34,893
Deswegen müssen wir hier auch

211
00:08:34,890 --> 00:08:37,506
unsere Grammatik nochmal anpassen

212
00:08:37,500 --> 00:08:39,662
und werden nach dem gleichen Vorbild

213
00:08:39,660 --> 00:08:42,071
wie auch die "parameterDeclaration"

214
00:08:42,070 --> 00:08:44,235
die "expressionList" anpassen.

215
00:08:44,230 --> 00:08:46,408
Wir erzeugen hier also ein neues Label

216
00:08:46,400 --> 00:08:48,124
und statt einfach nur "="

217
00:08:48,120 --> 00:08:50,884
werden wir wie oben "+=" nehmen

218
00:08:50,880 --> 00:08:54,688
und so kommen wir an eine Liste mit "Expressions".

219
00:08:55,115 --> 00:08:59,035
Und hier kommen wir jetzt an den Inhalt

220
00:08:59,030 --> 00:09:02,537
indem wir auf den Kontext

221
00:09:03,662 --> 00:09:05,524
uns die "Arguments" holen,

222
00:09:05,520 --> 00:09:08,488
da sind die expressions drin.

223
00:09:08,480 --> 00:09:10,400
Dafür müsst ihr natürlich den Parser übrigens

224
00:09:10,400 --> 00:09:13,017
neu generieren falls ich es nicht erwähnt habe.

225
00:09:16,564 --> 00:09:19,244
Und dann sind da auch die "Expressions" drin

226
00:09:19,240 --> 00:09:22,986
und da können wir jetzt die "size" uns von holen.

227
00:09:25,128 --> 00:09:27,000
So, unsere Variable heißt noch "instructions"

228
00:09:27,000 --> 00:09:30,484
und nicht "result" und dann ist dies fertig.

229
00:09:31,120 --> 00:09:33,071
Jetzt müssen wir natürlich auch

230
00:09:33,070 --> 00:09:35,577
die Parameter die wir übergeben wollen, also

231
00:09:35,570 --> 00:09:38,191
die tatsächlichen Werte die wir übergeben wollen

232
00:09:38,190 --> 00:09:39,782
irgendwo herhaben.

233
00:09:40,173 --> 00:09:43,884
Erstmal haben wir Instruktionen die 

234
00:09:43,880 --> 00:09:45,955
diese Werte für uns generieren

235
00:09:45,950 --> 00:09:48,622
und die uns diese Werte auf den Stack legen.

236
00:09:48,620 --> 00:09:50,524
Und das ist auch genau das, was wir wollen,

237
00:09:50,520 --> 00:09:52,466
denn wir müssen jetzt die Werte

238
00:09:52,460 --> 00:09:53,720
die wir übergeben wollen

239
00:09:53,720 --> 00:09:55,200
in der richtigen Reihenfolge,

240
00:09:55,200 --> 00:09:56,888
also zuerst das erste Argument,

241
00:09:56,880 --> 00:09:57,960
dann das zweite Argument

242
00:09:57,960 --> 00:09:59,688
dann das dritte Argument und so weiter

243
00:09:59,680 --> 00:10:01,631
alle nacheinander auf den Stack legen.

244
00:10:01,630 --> 00:10:04,484
Das heißt wir generieren uns zuerst

245
00:10:04,480 --> 00:10:06,684
die Instruktionen für das erste Argument,

246
00:10:06,680 --> 00:10:08,835
dann die für das zweite Argument usw.

247
00:10:08,830 --> 00:10:10,680
bis zum letzten Argument

248
00:10:10,680 --> 00:10:13,257
und wenn wir die einfach alle hintereinander klatschen,

249
00:10:13,250 --> 00:10:16,257
dann hinterlässt jedes einzelne

250
00:10:16,250 --> 00:10:17,582
dieser...

251
00:10:18,422 --> 00:10:21,271
Instruktionslisten aus der Argumenteliste

252
00:10:21,697 --> 00:10:24,817
ein Element auf dem Stack mit einem Argument.

253
00:10:25,155 --> 00:10:27,657
Und das alles zusammen können wir ganz einfach machen

254
00:10:27,650 --> 00:10:29,777
indem wir "visit" auf

255
00:10:29,770 --> 00:10:33,017
die "arguments"  von unserem Kontext aufrufen,

256
00:10:33,010 --> 00:10:35,773
denn in diesem "ctx.arguments"

257
00:10:35,770 --> 00:10:38,155
steht unsere Liste bereits komplett drin

258
00:10:38,831 --> 00:10:40,857
und dann müssen wir nurnoch gucken:

259
00:10:40,850 --> 00:10:43,520
Ist diese Liste auch nicht leer,

260
00:10:43,520 --> 00:10:45,773
also ist nicht "null" zurückgekommen

261
00:10:45,770 --> 00:10:47,537
und wenn nicht "null" zurückgekommen ist,

262
00:10:47,530 --> 00:10:51,280
dann werden wir an unsere "instructions"

263
00:10:51,280 --> 00:10:53,462
diese generierten "argumentInstructions"

264
00:10:53,460 --> 00:10:56,360
anhängen und ein Zeilenumbruch am Ende.

265
00:10:58,506 --> 00:11:01,026
Dann können wir unseren Test wieder ausführen

266
00:11:01,020 --> 00:11:02,977
und gucken ob es funktioniert hat.

267
00:11:02,970 --> 00:11:04,764
Und: Huraaa!

268
00:11:04,760 --> 00:11:06,173
Unser Test hat funktioniert,

269
00:11:06,170 --> 00:11:07,835
es gibt keine Fehler

270
00:11:08,755 --> 00:11:10,617
und unser neuer Test

271
00:11:10,610 --> 00:11:14,017
mit den Funktionsparametern hat funktioniert.

272
00:11:15,026 --> 00:11:16,644
In dieser Folge haben wir gelernt

273
00:11:16,640 --> 00:11:18,168
wie wir beliebig viele Parameter

274
00:11:18,168 --> 00:11:20,160
in unseren Funktionen akzeptieren können.

275
00:11:20,160 --> 00:11:21,804
Die Parameter werden automatisch

276
00:11:21,800 --> 00:11:23,671
als Variablen zur Verfügung gestellt

277
00:11:23,670 --> 00:11:24,915
und wir müssen diese nurnoch

278
00:11:24,910 --> 00:11:28,000
in unser Variablenmap unserem Visitor bekannt machen.

279
00:11:28,213 --> 00:11:29,440
Für den Funktionsaufruf

280
00:11:29,440 --> 00:11:31,937
legen wir die Parameter einfach auf den Stack.

281
00:11:32,248 --> 00:11:34,586
Dabei haben wir jedoch noch nicht überprüft

282
00:11:34,580 --> 00:11:35,924
ob die Anzahl Parameter,

283
00:11:35,920 --> 00:11:37,968
die wir bei Funktionsaufrufen übergeben

284
00:11:37,960 --> 00:11:39,200
eigentlich stimmt.

285
00:11:39,462 --> 00:11:41,386
Eigentlich überprüfen wir noch nichtmal 

286
00:11:41,380 --> 00:11:44,586
ob die Funktion die aufgerufen wird überhaupt existiert.

287
00:11:44,580 --> 00:11:47,768
Dies und vieles mehr seht ihr in den nächsten Folgen.

288
00:11:47,760 --> 00:11:48,826
Lasst mir Kommentare

289
00:11:48,820 --> 00:11:51,360
mit euren Fragen, Wünschen und Problemen da.

290
00:11:51,360 --> 00:11:53,555
Gibt mir einen Daumen wenn euch das Video gefallen hat

291
00:11:53,550 --> 00:11:54,897
und abboniert meinen Kanal

292
00:11:54,890 --> 00:11:57,382
um keine neue Folge zu verpassen.

293
00:11:57,457 --> 00:11:58,626
Vielen Dank an Gadarol,

294
00:11:58,620 --> 00:12:00,017
der mir für die Aufnahmen sein Studio

295
00:12:00,010 --> 00:12:01,217
zur Verfügung stellt

296
00:12:01,210 --> 00:12:03,408
und euch vielen Dank für eure Aufmerksamkeit,

297
00:12:03,400 --> 00:12:04,995
ich hoffe es hat euch Spaß gemacht,

298
00:12:04,990 --> 00:12:06,088
bis zum nächsten Mal

299
00:12:06,080 --> 00:12:08,728
wenn es wieder heißt: "Let's build a compiler".

