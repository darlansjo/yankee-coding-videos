1
00:00:00,000 --> 00:00:02,940
Willkommen zurück zu "Let's build a compiler".

2
00:00:02,940 --> 00:00:04,330
In dieser Folge werden wir

3
00:00:04,330 --> 00:00:08,580
die Operatoren Minus, Mal und Geteilt in unsere Sprache einbauen.

4
00:00:08,580 --> 00:00:12,890
Mein Name ist yankee und ich wünsche euch viel Spaß.

5
00:00:13,080 --> 00:00:16,850
Als Erstes werden wir die Spezifikation von unserem Compiler,

6
00:00:16,850 --> 00:00:20,460
auch bekannt unter dem Name "CompilerTest" anpassen.

7
00:00:20,460 --> 00:00:24,640
Dann gehen wir zu unseren Beispielen, die wir können wollen,

8
00:00:24,640 --> 00:00:28,600
kopieren hier eine Zeile als Template

9
00:00:28,600 --> 00:00:33,110
und fügen dann hier unten ein paar Beispiele ein.

10
00:00:33,110 --> 00:00:35,710
Und zwar: Was bauen wir ein?

11
00:00:35,710 --> 00:00:38,210
Zunächst einmal eine Subtraktion,

12
00:00:38,210 --> 00:00:40,390
nehmen wir mal als Beispiel "3-2",

13
00:00:40,390 --> 00:00:43,960
da müsste dann 1 rauskommen.

14
00:00:43,960 --> 00:00:47,320
Dann können wir noch Multiplikation einbauen,

15
00:00:47,320 --> 00:00:52,550
da nehmen wir mal "2*3", da müsste dann "6" rauskommen,

16
00:00:52,550 --> 00:00:59,920
dann Division, zum Beispiel das Gegenteil, nämlich "6/2",

17
00:00:59,920 --> 00:01:03,940
da kommt dann 3 raus.

18
00:01:03,940 --> 00:01:05,600
Dann können wir uns nach Gedanken machen

19
00:01:05,600 --> 00:01:08,720
was passiert wenn kein gerades Ergebnis rauskommt,

20
00:01:08,720 --> 00:01:13,050
also was soll eigentlich passieren bei "7/2"?

21
00:01:13,050 --> 00:01:16,320
Typischerweise, wenn wir mit Integers arbeiten

22
00:01:16,320 --> 00:01:19,100
schneiden wir das ".5" hinten einfach ab,

23
00:01:19,100 --> 00:01:21,080
bis jetzt haben wir nur mit Integers gearbeitet,

24
00:01:21,080 --> 00:01:24,030
später werden wir natürlich auch Fließkommatypen zulassen

25
00:01:24,030 --> 00:01:26,970
aber für den Anfang würde ich sagen bleben wir mal dabei

26
00:01:26,970 --> 00:01:32,650
und das Ergebnis sollte dann auch 3 sein, ohne .5 dahinter.

27
00:01:32,650 --> 00:01:36,140
Dann kann man die Operatoren natürlich auch kombinieren:

28
00:01:36,140 --> 00:01:40,840
Wenn wir zum Beispiel haben: "8-2+5",

29
00:01:40,840 --> 00:01:46,750
dann ist es jetzt wichtig, dass wir erst "8-2" (das sind 6) rechnen

30
00:01:46,750 --> 00:01:50,380
und dann nochmal "+5", dann sind wir bei 11.

31
00:01:50,380 --> 00:01:53,980
Und nicht etwa zuerst "2+5", das wären 7

32
00:01:53,980 --> 00:01:57,130
und dann "8-7", wäre nämlich nur 1.

33
00:01:57,130 --> 00:02:06,250
Das Gleiche auch noch für Division, da könnten wir zum Beispiel "8/2*4" nehmen.

34
00:02:06,250 --> 00:02:11,300
"8/2" sind 4, mal 4 sind 16.

35
00:02:11,880 --> 00:02:13,860
Auch hier käme wieder etwas anderes raus,

36
00:02:13,860 --> 00:02:17,780
wenn wir zuerst "2*4" rechnen würden, das wäre nämlich 8

37
00:02:17,780 --> 00:02:21,010
und dann wäre "8/8" natürlich 1.

38
00:02:21,010 --> 00:02:27,350
Dann können wir noch die Strichrechnung mit der Punktrechnung kombinieren:

39
00:02:27,350 --> 00:02:32,140
Wir können zum Beispiel "2+3*3" nehmen,

40
00:02:32,140 --> 00:02:38,520
da sollten wir dann zuerst "3*3" rechnen (sind 9), "+2" sind 11,

41
00:02:38,520 --> 00:02:43,760
wenn wir zuerst "2+3" rechnen würden, dann wären es 5, mal 3 wären 15,

42
00:02:43,760 --> 00:02:46,170
das wäre dann wieder was anderes.

43
00:02:46,570 --> 00:02:50,660
Und das Gleiche auch noch einmal mit Subtraktion:

44
00:02:50,660 --> 00:02:56,070
Zum Beispiel "9-2*3":

45
00:02:56,500 --> 00:03:02,150
"2*3" sind 6 und "9-6" sind 3.

46
00:03:02,150 --> 00:03:09,570
Im Gegensatz zu "9-2" wären 7, mal 3 wären 21.

47
00:03:10,320 --> 00:03:13,780
Dann speichern wir das und werden als Nächstes....

48
00:03:13,780 --> 00:03:18,380
Äh, als Erstes gucken wir erstmal ob unser Test jetzt denn auch fehlschlägt.

49
00:03:18,710 --> 00:03:22,220
Ja, wir haben ganze viel "Failures" hier, 7 Failures,

50
00:03:22,220 --> 00:03:24,290
das sind all' unsere neuen Tests

51
00:03:24,290 --> 00:03:28,770
und hier oben haben wir ganz viel "Token recognition error"s,

52
00:03:28,770 --> 00:03:33,170
weil das ANTLR diese ganzen Operatoren hier noch nicht kennt.

53
00:03:33,170 --> 00:03:36,660
Dann gehen wir jetzt als Nächstes auf unsere Grammatik

54
00:03:36,660 --> 00:03:40,220
und werden die für unsere neuen Operatoren erweitern.

55
00:03:40,220 --> 00:03:45,440
Als Erstes werden wir jetzt hier in unserer Grammatik ein paar Dinge umbenennen.

56
00:03:45,440 --> 00:03:49,110
Denn unsere Regel "addition" werden wir gleich erweitern,

57
00:03:49,110 --> 00:03:51,340
die enthält dann nicht nur mehr Additionen,

58
00:03:51,340 --> 00:03:54,090
sondern beliebige mathematische Ausdrücke,

59
00:03:54,090 --> 00:03:58,020
deswegen nenne ich die Regel dann auch "expression"

60
00:03:58,610 --> 00:04:02,730
und dann werde ich hier einheitlich englische Begriffe verwenden,

61
00:04:02,730 --> 00:04:08,520
denn im Moment ist es ein Mischmasch zwischen deutschen und englischen Begriffen

62
00:04:08,520 --> 00:04:11,980
und das ist doch irgendwie unschön.

63
00:04:13,400 --> 00:04:16,510
Außerdem liebäugel ich durchaus damit

64
00:04:16,510 --> 00:04:20,000
diese Reihe hier nochmal auf Englisch zu übersetzen

65
00:04:20,000 --> 00:04:25,890
und dann ist es auch unpraktisch, wenn da zu viele deutsche Begriffe drin sind.

66
00:04:31,210 --> 00:04:34,010
Nachdem wir das jetzt gemacht haben...

67
00:04:37,410 --> 00:04:40,400
Nachdem wir das jetzt gemacht haben werden wir wieder

68
00:04:40,400 --> 00:04:44,110
auf dem üblichen Weg mit unserem altbekannten

69
00:04:44,110 --> 00:04:46,520
Kommando unseren Parser neu generieren,

70
00:04:46,520 --> 00:04:48,900
im Parser "F5" drücken,

71
00:04:48,900 --> 00:04:50,720
dann hier auf den Visitor gehen

72
00:04:50,720 --> 00:04:53,080
und unsere Begrifflichkeiten anpassen,

73
00:04:53,080 --> 00:04:56,050
das Ding heißt jetzt natürlich "right" hier,

74
00:04:56,050 --> 00:05:03,080
"ZahlContext" gibt es nicht mehr, das heißt jetzt "NumberContext"

75
00:05:04,160 --> 00:05:09,910
mit "Strg+Shift+O" können wir die Imports korrigieren,

76
00:05:17,080 --> 00:05:20,610
dann speichern wir wieder und schaun mal nach,

77
00:05:20,610 --> 00:05:25,000
ob unsere Tests noch genaus gut oder schlecht funktionieren wie eben noch.

78
00:05:25,000 --> 00:05:27,540
Ja, unsere ersten drei Tests funktionieren

79
00:05:27,540 --> 00:05:31,670
und die Neuen, die wir gerade eben angelegt haben funktionieren nicht.

80
00:05:31,670 --> 00:05:34,710
Gehen wir also zurück in unsere Grammatik

81
00:05:34,710 --> 00:05:37,400
und fangen jetzt mit den Erweiterungen an.

82
00:05:37,400 --> 00:05:41,520
Als Erstes werden wir mal den Operator Minus einbauen.

83
00:05:41,520 --> 00:05:44,850
Gehen wir also nach hier, kopieren unsere bisherige Plusregel

84
00:05:44,850 --> 00:05:49,340
und fügen eine Alternative für Minus ein.

85
00:05:49,340 --> 00:05:52,770
Nennen wir sie entsprechen "Minus",

86
00:05:52,770 --> 00:05:54,940
ändern den Operator hier auf Minus,

87
00:05:54,940 --> 00:05:58,300
speichern, gehen wieder auf die Konsole,

88
00:05:58,300 --> 00:06:01,970
lassen unseren Parser neu generien,

89
00:06:01,970 --> 00:06:04,250
gehen im Parser auf "F5",

90
00:06:04,250 --> 00:06:07,030
gehen auf den Visitor, hinter visitPlus

91
00:06:07,030 --> 00:06:12,040
können wir jetzt eine neue Methode "visitMinus" einfügen,

92
00:06:12,040 --> 00:06:15,350
die funktioniert ganz ähnlich wie "visitPlus",

93
00:06:15,350 --> 00:06:19,350
das Template kann ich jetzt hier einfach mal kopieren,

94
00:06:20,080 --> 00:06:25,760
nur statt "iadd" nehmen wir "isub" für Subtraktion.

95
00:06:25,760 --> 00:06:31,410
Wunderbar, machen wir das zu und lassen den Test einmal laufen.

96
00:06:34,200 --> 00:06:36,290
Was sagt das Ergebnis?

97
00:06:37,090 --> 00:06:41,940
Unser Minustest hier, der "println(3-2)" hat funktioniert!

98
00:06:41,940 --> 00:06:43,820
Hey! Das war einfach!

99
00:06:43,820 --> 00:06:47,760
Wollen wir doch mal sehen ob das mit den anderen Operatoren genau so einfach geht.

100
00:06:47,760 --> 00:06:51,300
Dann kopieren wir also wieder unsere bisherige Regel,

101
00:06:51,300 --> 00:06:57,070
nochmal für Division und Multiplikation,

102
00:07:06,760 --> 00:07:13,320
werden unseren Parser mit dem altbekannten Befehl neu generieren,

103
00:07:13,320 --> 00:07:16,480
gehen im Parser mit "F5" drauf,

104
00:07:16,480 --> 00:07:18,520
gehen in unseren Visitor

105
00:07:18,520 --> 00:07:22,950
und werden die neuen "visit"-Methoden implementieren.

106
00:07:23,600 --> 00:07:26,230
Für Division

107
00:07:27,780 --> 00:07:31,070
das Gleiche wieder was wir bei Minus auch hatten,

108
00:07:31,070 --> 00:07:35,890
nur mit "idiv" für i-divide

109
00:07:36,400 --> 00:07:41,210
und dann ist auch noch Multiplikation neu

110
00:07:42,520 --> 00:07:47,280
und da heißt die Instruktion dann "imul".

111
00:07:47,980 --> 00:07:52,350
Wir speichern das, lassen unsere Tests laufen

112
00:07:53,910 --> 00:07:56,380
und was sehen wir hier?

113
00:07:56,780 --> 00:08:01,510
Acht unser Tests haben funktioniert, zwei haben nicht funktioniert.

114
00:08:01,510 --> 00:08:04,000
Mal hat funktioniert, geteilt hat funktioniert,

115
00:08:04,000 --> 00:08:07,340
auch der mit "7/2" hat funktioniert,

116
00:08:07,340 --> 00:08:10,520
"8/2*4" hat auch funktioniert,

117
00:08:10,520 --> 00:08:14,600
aber leider diese beiden Ergebnisse haben nicht funktioniert.

118
00:08:14,600 --> 00:08:19,750
Und wie ihr hier seht: Wir haben 11 erwartet, haben aber 15 bekommen,

119
00:08:19,750 --> 00:08:24,340
offensichtlich wurde hier die Operatorenreihenfolge nicht korrekt beachtet,

120
00:08:24,340 --> 00:08:29,210
hier wurde zuerst "2+3" berechnet, das sind dann 5

121
00:08:29,210 --> 00:08:32,720
und dann mal 3, das sind 15, das ist das was hier rausgekommen ist,

122
00:08:32,720 --> 00:08:35,970
ist aber leider nicht das, was wir haben wollen.

123
00:08:36,340 --> 00:08:38,670
An dieser Stelle gibt es einen kleinen Cliffhanger.

124
00:08:38,670 --> 00:08:41,400
Wie wir die Priorität der Operatoren richtig hinbekommen,

125
00:08:41,400 --> 00:08:45,570
so dass auch unsere übrigen beiden Tests funktionieren erfahrt ihr in nächster Folge.

126
00:08:45,570 --> 00:08:48,090
In dieser Folge haben wir gelernt, wie wir die Operatoren

127
00:08:48,090 --> 00:08:51,230
Minus, Geteilt und Mal in die Grammatik einbauen

128
00:08:51,230 --> 00:08:53,700
und wie wir die passenden Instruktionen generieren:

129
00:08:53,700 --> 00:08:56,350
Mehrere Operatoren können wir mit Subregeln definieren

130
00:08:56,350 --> 00:08:59,520
und die passenden Instruktionen generieren wir neuen visit-Methoden,

131
00:08:59,520 --> 00:09:02,660
die fast genauso aussehen wie die "visitPlus"-Methode.

132
00:09:02,660 --> 00:09:05,250
In der nächsten Folge erwarten uns wie erwähnt

133
00:09:05,250 --> 00:09:07,730
die Definition der richtigen Operatorenreihenfolge

134
00:09:07,730 --> 00:09:08,910
und danach erwarten uns

135
00:09:08,910 --> 00:09:12,790
Variablen, Schleifen, Bedingungen Funktionen und vieles mehr.

136
00:09:12,790 --> 00:09:15,920
Schreibt mir in die Kommentare, was ihr als Nächstes sehen wollt.

137
00:09:15,920 --> 00:09:18,480
Natürlich freue ich mich auch über weitere Kommentare:

138
00:09:18,480 --> 00:09:19,950
Habt ihr Lob oder Kritik?

139
00:09:19,950 --> 00:09:21,950
Wie setzt ihr die Videos ein?

140
00:09:21,950 --> 00:09:23,470
Programmiert ihr nebenher mit?

141
00:09:23,470 --> 00:09:26,440
Nutzt die Videos für die Recherche konkreter Probleme?

142
00:09:26,440 --> 00:09:30,050
Oder schaut ihr die Videos ohne eigenes Projekt nur aus Interesse?

143
00:09:30,050 --> 00:09:33,730
Vielen Dank an Gadarol, der mir für die Aufnahmen sein Studio zur Verfügung stellt

144
00:09:33,730 --> 00:09:36,200
und euch vielen Dank für eure Aufmerksamkeit.

145
00:09:36,200 --> 00:09:38,570
Mein Name ist yankee, ich hoffe es hat euch Spaß gemacht,

146
00:09:38,570 --> 00:09:40,420
auf Wiedersehen und bis zum nächsten Mal

147
00:09:40,420 --> 00:09:43,520
wenn es wieder heißt: "Let's build a compiler".

