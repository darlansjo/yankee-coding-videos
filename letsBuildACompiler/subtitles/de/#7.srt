1
00:00:00,000 --> 00:00:03,430
Willkommen zurück zu "Let's build a compiler"

2
00:00:03,430 --> 00:00:04,920
mit einem neuen Startbild

3
00:00:04,920 --> 00:00:07,260
mit anklickbarem Inhaltsverzeichnis.

4
00:00:07,260 --> 00:00:08,620
Findet ihr das hilfreich?

5
00:00:08,620 --> 00:00:10,690
Schreibt es mir in die Kommentare!

6
00:00:10,690 --> 00:00:11,940
In dieser Folge werden wir

7
00:00:11,940 --> 00:00:13,880
unseren Test auf Windows zum Laufen bringen,

8
00:00:13,880 --> 00:00:17,230
unserer Sprache eine explizite println-Funktion beibringen,

9
00:00:17,230 --> 00:00:18,660
Whitespaces überspringen

10
00:00:18,660 --> 00:00:21,240
und mehrere Befehle auf mal erlauben.

11
00:00:21,960 --> 00:00:24,420
Als Erstes werden wir eine kleine Unschönheit

12
00:00:24,420 --> 00:00:26,650
aus letzter Folge beseitigen:

13
00:00:26,650 --> 00:00:28,500
Und zwar habe ich hier in letzter Folge

14
00:00:28,500 --> 00:00:31,130
für den Zeilenumbruch einfach "\ n" genommen,

15
00:00:31,130 --> 00:00:32,900
für einen "linefeed",

16
00:00:32,900 --> 00:00:35,500
das ist auf Unixsystemen auch alles super

17
00:00:35,500 --> 00:00:37,450
aber auf Windows funktioniert das nicht,

18
00:00:37,450 --> 00:00:41,230
denn auf Windows ist der "Lineseperator" "\r\ n".

19
00:00:41,230 --> 00:00:42,520
Um das jetzt zu beheben,

20
00:00:42,520 --> 00:00:45,000
so dass es auch auf Windows funktioniert

21
00:00:45,000 --> 00:00:47,290
nehmen wir den hier weg und schreiben

22
00:00:47,290 --> 00:00:51,770
stattdessen"System.lineSeparator()".

23
00:00:53,200 --> 00:00:57,050
Und natürlich das Gleiche auch in der Zeile dadrunter.

24
00:01:02,840 --> 00:01:06,020
Als Nächstes wollen wir unsere Sprache mächtiger machen,

25
00:01:06,020 --> 00:01:08,240
damit wir mehr damit anstellen können

26
00:01:08,240 --> 00:01:10,230
als nur eine Zahl auszugeben.

27
00:01:10,230 --> 00:01:11,950
Zum Beispiel könnten wir einbauen,

28
00:01:11,950 --> 00:01:14,450
dass wir auch zwei Zahlen ausgeben können.

29
00:01:14,450 --> 00:01:15,990
Welch ein Fortschritt.

30
00:01:16,490 --> 00:01:18,020
Es gibt natürlich eine Menge Möglichkeiten

31
00:01:18,020 --> 00:01:21,270
wie man eine Sprache in diese Richtung designen kann,

32
00:01:21,580 --> 00:01:25,250
ihr könnt gerne euch in den Kommentaren dazu beteiligen

33
00:01:25,250 --> 00:01:28,130
welche Ideen und Wünsche ihr habt, was ich hier einbaue,

34
00:01:28,130 --> 00:01:29,240
wenn ihr nichts schreibt, 

35
00:01:29,240 --> 00:01:31,590
dann wird es irgendwas was ein bißchen in die Richtung

36
00:01:31,590 --> 00:01:34,610
von C geht oder so einer C-artigen Sprache,

37
00:01:34,610 --> 00:01:37,050
so eine Mischung aus C, Java und so weiter,

38
00:01:37,320 --> 00:01:38,890
und ich baue dann jetzt hier als Erstes

39
00:01:38,890 --> 00:01:41,960
mal eine Funktion "println" ein,

40
00:01:42,080 --> 00:01:45,680
die unsere bisherige implizite Ausgabe ersetzt.

41
00:01:48,890 --> 00:01:51,470
Dann schreiben wir hier einfach "println"

42
00:01:52,300 --> 00:01:55,970
und hier auch, das sind unsere bisherigen Beispiele

43
00:01:56,580 --> 00:01:58,000
und jetzt möchte ich natürlich auch,

44
00:01:58,000 --> 00:02:00,850
dass es mit mehreren "println"s funktioniert.

45
00:02:00,850 --> 00:02:03,380
Also kopiere ich eins dieser Beispiele,

46
00:02:03,380 --> 00:02:04,860
vereinfache es ein bißchen,

47
00:02:04,860 --> 00:02:08,010
denn wir wollen jetzt in dem Beispiel nicht testen,

48
00:02:08,010 --> 00:02:09,940
dass die Rechnung auch noch funktioniert,

49
00:02:09,940 --> 00:02:13,790
sondern nur dass mehrere "println"-Befehle funktionieren.

50
00:02:14,400 --> 00:02:15,810
Ihr solltet eure Testfälle

51
00:02:15,810 --> 00:02:17,720
immer so einfach wie möglich gestalten

52
00:02:17,720 --> 00:02:20,400
und lieber mehr Testfälle schreiben

53
00:02:20,400 --> 00:02:22,920
damit ihr einfacher identifizieren könnt,

54
00:02:22,920 --> 00:02:24,260
wenn einer nicht funktioniert,

55
00:02:24,260 --> 00:02:26,260
wo eigentlich das Problem liegt.

56
00:02:27,070 --> 00:02:29,450
Jetzt habe ich hier "1" und "2",

57
00:02:29,450 --> 00:02:31,670
das heißt auch unsere Ausgabe

58
00:02:31,670 --> 00:02:34,770
müsste "1" und "2" enthalten,

59
00:02:34,770 --> 00:02:37,510
jeweils mit Zeilenumbruch dahinter.

60
00:02:39,590 --> 00:02:41,140
Dann speichern wir das

61
00:02:41,140 --> 00:02:42,990
und führen den Test einmal aus

62
00:02:42,990 --> 00:02:45,620
und sehen uns an, was dabei rauskommt.

63
00:02:47,080 --> 00:02:49,190
Wie ihr seht: Am Anfang gibt es von ANTLR

64
00:02:49,190 --> 00:02:51,400
einige "token recognition error"s,

65
00:02:51,400 --> 00:02:53,890
die kommen daher, dass dieses "println"

66
00:02:53,890 --> 00:02:56,240
und die Klammern hier nicht erkannt werden.

67
00:02:56,240 --> 00:02:58,740
Was macht ANTLR, wenn es auf sowas trifft?

68
00:02:58,740 --> 00:03:01,650
Es ignoriert diese Zeichen und geht einfach weiter.

69
00:03:01,650 --> 00:03:03,900
Das bedeutet für ANTLR steht danach,

70
00:03:03,900 --> 00:03:05,160
nach dem Parsen und nachdem

71
00:03:05,160 --> 00:03:07,590
es diese ganzen Teile hier ignoriert hat

72
00:03:07,590 --> 00:03:09,660
immernoch "1+2" da

73
00:03:09,660 --> 00:03:12,930
oder "1+2+42" und so weiter.

74
00:03:12,930 --> 00:03:14,300
Wenn wir uns das jetzt anschauen,

75
00:03:14,300 --> 00:03:16,640
was das für die Ausgabe bedeutet,

76
00:03:16,640 --> 00:03:19,260
dann sehen wir dass unsere ersten beiden Testfälle,

77
00:03:19,260 --> 00:03:21,170
also diese beiden Testfälle hier,

78
00:03:21,170 --> 00:03:22,850
immernoch ge"passed" haben,

79
00:03:22,850 --> 00:03:27,040
klar, weil ANTLR hat jetzt geflissen das "println" hier ignoriert.

80
00:03:27,040 --> 00:03:30,140
Unser neuer Testfall allerdings geht schief,

81
00:03:30,140 --> 00:03:32,420
denn der hört hier nach der "1" auf

82
00:03:32,420 --> 00:03:34,420
und macht hiermit nicht weiter.

83
00:03:34,950 --> 00:03:36,360
Jetzt wollen wir das also beheben

84
00:03:36,360 --> 00:03:39,590
und zwar: Erstens sollen keine "token recognition error"s mehr kommen,

85
00:03:39,590 --> 00:03:41,110
das soll funktionieren und zweitens

86
00:03:41,110 --> 00:03:43,610
sollen natürlich alle unsere Tests wieder tun.

87
00:03:43,610 --> 00:03:46,850
Um jetzt die Unterstützung für unsere println-Funktion hinzuzufügen,

88
00:03:46,850 --> 00:03:49,000
müssen wir unsere Grammatik erweitern.

89
00:03:49,000 --> 00:03:51,000
Holen wir die also wieder raus

90
00:03:53,090 --> 00:03:56,200
und fügen eine neue "println"-Regel ein.

91
00:03:56,910 --> 00:03:58,970
Die sieht dann so aus,

92
00:03:59,600 --> 00:04:03,630
dass zu erst einmal der Begriff "println" kommt,

93
00:04:03,630 --> 00:04:05,960
mit einer sich öffnenden Klammer,

94
00:04:06,610 --> 00:04:08,800
dann kommt eine Addition

95
00:04:09,410 --> 00:04:12,460
und dann schließt sich die Klammer wieder.

96
00:04:12,980 --> 00:04:17,130
Diese Addition, die merken wir uns hier auch noch als "argument",

97
00:04:18,010 --> 00:04:20,100
dann ist die Regel hier wieder zu Ende

98
00:04:20,600 --> 00:04:22,740
und jetzt müssen wir nurnoch einbauen,

99
00:04:22,740 --> 00:04:26,220
dass diese Regel auch aufgerufen werden kann.

100
00:04:26,740 --> 00:04:29,720
Dafür füge ich jetzt hier oben noch einfach

101
00:04:29,720 --> 00:04:33,120
eine generelle Regel "program" ein,

102
00:04:33,380 --> 00:04:36,880
die soll einfach unser gesamtes Programm beschreiben

103
00:04:36,880 --> 00:04:39,410
und zu unser neuen Startregel werden,

104
00:04:39,410 --> 00:04:41,760
nicht mehr wie bisher die Regel "addition",

105
00:04:41,760 --> 00:04:43,120
die wir als alleinige Regel

106
00:04:43,120 --> 00:04:45,640
und damit auch als Startregel verwendet haben

107
00:04:45,640 --> 00:04:49,980
und die besagt jetzt: Es kann ein "println" kommen,

108
00:04:50,910 --> 00:04:54,900
aber nicht nur einmal, sondern auch beliebig häufig

109
00:04:54,900 --> 00:04:57,150
und immer mit einem Semikolon dahinter.

110
00:04:57,150 --> 00:04:59,350
Das heißt: Hier kommt dann ein Semikolon

111
00:05:00,330 --> 00:05:04,300
und der Teile... darf jetzt...

112
00:05:04,840 --> 00:05:06,800
beliebig häufig vorkommen.

113
00:05:06,800 --> 00:05:08,460
Einmal sollte er aber schon vorkommen,

114
00:05:08,460 --> 00:05:10,460
ein leeres Programm ist langweilig.

115
00:05:11,230 --> 00:05:12,930
Dann speichern wir das

116
00:05:13,290 --> 00:05:16,580
und generieren unsere Grammatik neu.

117
00:05:16,580 --> 00:05:19,590
Dafür gehen wir wieder auf die Konsole,

118
00:05:19,590 --> 00:05:22,610
gehen in unseren Ordner mit der Grammatik

119
00:05:24,710 --> 00:05:27,500
und führen das ANTLR-Jar wieder aus,

120
00:05:27,500 --> 00:05:29,690
mit unseren üblichen Parametern.

121
00:05:31,270 --> 00:05:34,610
Gehen wieder auf Eclipse, drücken einmal "F5"

122
00:05:36,470 --> 00:05:39,850
und haben jetzt für unseren Visitor neue Methoden,

123
00:05:39,850 --> 00:05:41,850
die wir implementieren werden.

124
00:05:42,030 --> 00:05:44,580
Also eigentlich ist es nur eine neue Methode für uns,

125
00:05:44,580 --> 00:05:47,160
nämlich die "visitPrintln"-Methode,

126
00:05:47,160 --> 00:05:49,250
die füge ich dann hier ein.

127
00:05:50,790 --> 00:05:51,950
Ja und was gibt die zurück?

128
00:05:51,950 --> 00:05:53,230
Das ist nämlich der Teil,

129
00:05:53,230 --> 00:05:55,690
den wir bis jetzt in unser Main-Klasse hier hatten,

130
00:05:55,690 --> 00:05:59,780
mit dem "getstatic" und dem "invokevirtual" für das println,

131
00:05:59,780 --> 00:06:04,430
den kopier ich jetzt hier erstmal als Template einfach heraus

132
00:06:05,340 --> 00:06:08,070
und schreibe den hier mit einem "return" rein

133
00:06:10,410 --> 00:06:14,150
und die "instructions", die wir hier in der Mitte haben,

134
00:06:14,150 --> 00:06:18,230
die kriegen wir jetzt raus, indem wir

135
00:06:18,230 --> 00:06:22,850
den "ctx.argument"-Knoten uns ansehen

136
00:06:22,850 --> 00:06:24,310
und den durchgehen.

137
00:06:25,090 --> 00:06:27,320
Schauen wir uns an was hier passiert:

138
00:06:27,320 --> 00:06:30,590
Das "getstatic" holt uns also nachwievor wieder

139
00:06:30,590 --> 00:06:32,790
das "System.out" auf den Stack,

140
00:06:33,200 --> 00:06:35,730
dieses "ctx.argument",

141
00:06:35,730 --> 00:06:38,900
wenn wir das mit der entsprechenden visit-Methode

142
00:06:38,900 --> 00:06:43,700
aufrufen, dann kommt hier eine Reihe von Instruktionen zurück,

143
00:06:43,840 --> 00:06:48,350
die am Ende ein Integer auf dem Stack zurücklassen sollten.

144
00:06:48,510 --> 00:06:50,620
Dann haben wir also System.out auf dem Stack,

145
00:06:50,620 --> 00:06:51,880
ein Integer auf dem Stack

146
00:06:51,880 --> 00:06:54,800
und dann können wir die println-Methode aufrufen

147
00:06:54,800 --> 00:06:56,800
und die Zahl wird ausgegeben.

148
00:06:57,290 --> 00:06:59,720
Dann gehen wir zurück auf die Main-Methode,

149
00:06:59,720 --> 00:07:02,990
denn den Teil hier brauchen wir jetzt natürlich nicht mehr,

150
00:07:02,990 --> 00:07:05,380
das "getstatic" brauchen wir nicht mehr

151
00:07:05,380 --> 00:07:07,910
und das "invokevirtual" brauchen wir hier nicht mehr,

152
00:07:07,910 --> 00:07:11,260
denn das ist ja jetzt in unserem Visitor enthalten.

153
00:07:11,260 --> 00:07:14,020
Den ganzen Rest brauchen wir allerdings schon noch.

154
00:07:14,690 --> 00:07:18,520
Jetzt müssen wir noch hier unsere Additionsmethode anpassen,

155
00:07:18,520 --> 00:07:20,270
das muss jetzt nämlich "program" sein,

156
00:07:20,270 --> 00:07:23,460
denn ich habe ja das als Startregel ausgetauscht,

157
00:07:23,460 --> 00:07:26,790
der Parser soll jetzt mir "program" anfangen und nicht mehr mit "addition"

158
00:07:26,790 --> 00:07:29,290
und dann können wir unsere Tests mal laufen lassen.

159
00:07:31,080 --> 00:07:34,040
So, wie ihr seht, die Tests funktionieren,

160
00:07:34,040 --> 00:07:38,450
aber es gibt noch einen "token recognition error" bei dem Leerzeichen.

161
00:07:38,450 --> 00:07:40,450
Schauen wir uns mal an, wo das herkommt.

162
00:07:40,450 --> 00:07:41,830
Gehen wir auf unseren Test:

163
00:07:41,830 --> 00:07:44,500
und das einzige Leerzeichen was wir haben ist hier,

164
00:07:44,500 --> 00:07:46,190
das ist schnell gefunden,

165
00:07:46,190 --> 00:07:50,070
ja, warum ist das ein "token recognition error" an der Stelle?

166
00:07:50,070 --> 00:07:51,800
Naja klar, ganz einfach:

167
00:07:51,800 --> 00:07:54,930
Wir haben hier nirgendwo ein Leerzeichen erkannt.

168
00:07:54,930 --> 00:07:58,420
Eigentlich interessieren uns Leerzeichen auch nicht wirklich,

169
00:07:58,420 --> 00:08:02,250
in den meisten Programmiersprachen sind das lediglich Trennzeichen

170
00:08:02,250 --> 00:08:06,560
um zwischen zwei Tokens einen Trenner einzufügen,

171
00:08:06,560 --> 00:08:09,560
aber danach sind sie wertlos.

172
00:08:09,560 --> 00:08:13,340
Was wir jetzt hier also machen können ist eine "WHITESPACE"-Regel einführen,

173
00:08:14,550 --> 00:08:17,690
und diese "WHITESPACE"-Regel soll uns

174
00:08:17,690 --> 00:08:19,470
Leerzeichen,

175
00:08:19,470 --> 00:08:20,680
Tabs,

176
00:08:21,210 --> 00:08:22,440
"linefeed"s

177
00:08:22,440 --> 00:08:24,440
und "carriage return"s

178
00:08:24,440 --> 00:08:28,120
in beliebiger Menge einfach wegschmeißen.

179
00:08:28,120 --> 00:08:31,070
Dafür können wir hier als Lexerbefehl einfach reinschreiben:

180
00:08:31,070 --> 00:08:35,020
"-> skip" und dann werden diese Whitespaces,

181
00:08:35,020 --> 00:08:36,610
also diese alle hier,

182
00:08:36,610 --> 00:08:38,200
einfach ignoriert.

183
00:08:38,200 --> 00:08:41,080
Dann müssen wir wieder unsere...

184
00:08:41,760 --> 00:08:45,830
aus unsere Grammatik unseren Parser und Lexer neu generieren,

185
00:08:47,230 --> 00:08:51,900
in Eclipse einmal bei unserem Parser auf "F5" drücken

186
00:08:52,110 --> 00:08:55,380
und dann unseren Test wieder laufen lassen.

187
00:08:56,780 --> 00:09:00,130
Wie ihr seht, jetzt gibt es keine "token recognition errors" mehr,

188
00:09:00,130 --> 00:09:03,020
das Leerzeichen wurde ganz normal ignoriert

189
00:09:03,020 --> 00:09:06,690
und zwar nicht als "error", sondern diesmal mit Absicht.

190
00:09:07,190 --> 00:09:09,690
Jetzt möchte ich euch noch einmal den aktuellen Baum

191
00:09:09,690 --> 00:09:12,540
für das "println(1); println(2);" hier zeigen,

192
00:09:12,540 --> 00:09:15,650
dafür kopieren wir uns diesen Code hier,

193
00:09:15,650 --> 00:09:17,420
gehen auf die Konsole,

194
00:09:17,980 --> 00:09:22,910
da bin ich jetzt in "workspace" in unserem Parserprojekt

195
00:09:23,270 --> 00:09:24,970
und wenn ihr hier mal reinguckt,

196
00:09:24,970 --> 00:09:26,410
hier ist das "bin"-Verzeichnis,

197
00:09:26,410 --> 00:09:29,200
in dem bin-Verzeichnis, das hat Eclipse angelegt,

198
00:09:29,200 --> 00:09:33,770
da sind unsere kompilierten .class-Files mit dem Lexer und dem Parser drin

199
00:09:33,770 --> 00:09:35,690
und ich habe auch schonmal

200
00:09:35,690 --> 00:09:38,810
das TestRig-Kommando vorbereitet:

201
00:09:38,810 --> 00:09:42,660
Ihr habt jetzt hier im Classpath

202
00:09:42,660 --> 00:09:45,480
das Verzeichnis bin statt dem Punkt,

203
00:09:45,480 --> 00:09:48,480
weil jetzt hier im Verzeichnis "bin" die .class-Files liegen

204
00:09:48,480 --> 00:09:50,810
und nicht im aktuellen Arbeitsverzeichnis,

205
00:09:51,390 --> 00:09:54,630
der Teil hier ist gleich wie vorher,

206
00:09:55,090 --> 00:09:56,990
hier allerdings vor die Grammatik,

207
00:09:56,990 --> 00:09:59,210
das war früher einfach nur "Demo",

208
00:09:59,210 --> 00:10:02,320
jetzt steht da auch noch der ganze Packagename vor,

209
00:10:02,320 --> 00:10:03,780
dann die neue Startregel,

210
00:10:03,780 --> 00:10:07,140
die ja jetzt nicht mehr "addition" ist, sondern "program"

211
00:10:07,140 --> 00:10:09,800
und ich nehme hier "-ps"

212
00:10:09,800 --> 00:10:12,310
um eine PostScript-Datei zu generieren,

213
00:10:12,310 --> 00:10:15,720
ihr könnt natürlich wieder direkt "-gui" nehmen bei euch.

214
00:10:16,810 --> 00:10:18,340
Dann führen wir den Befehl aus,

215
00:10:18,340 --> 00:10:20,940
jetzt habe ich keine "code.demo"-Datei übergeben,

216
00:10:20,940 --> 00:10:22,910
deswegen liest er von stdin,

217
00:10:22,910 --> 00:10:25,510
das heißt ich kann jetzt einfach hier 

218
00:10:25,820 --> 00:10:28,850
den kopierten Quelltext einfügen,

219
00:10:29,230 --> 00:10:32,920
dann drückt ihr auf Linux "Strg+D"

220
00:10:34,570 --> 00:10:38,560
und auf Windows "Strg+Z" und Enter

221
00:10:38,990 --> 00:10:41,890
um ein EOF zu senden,

222
00:10:41,890 --> 00:10:46,360
um dem TestRig mitzuteilen, dass der Input hier zu Ende ist.

223
00:10:47,220 --> 00:10:51,610
Dann gucken wir uns den generierten Baum nochmal an,

224
00:10:52,510 --> 00:10:54,570
so sieht er jetzt aus:

225
00:10:55,220 --> 00:10:57,710
Er ist schon ein klein bißchen größer geworden,

226
00:10:57,710 --> 00:11:00,670
unser "program" mit zwei "println"-Statements

227
00:11:00,670 --> 00:11:02,930
und beide "println"-Statements bestehen aus jeweils

228
00:11:02,930 --> 00:11:05,960
einem "println"-Aufruf, einer "addition" 

229
00:11:05,960 --> 00:11:09,440
und die "addition" wiederrum besteht hier unten aus einer Zahl.

230
00:11:10,090 --> 00:11:12,440
Wir haben gelernt wie wir einen "println"-Befehl

231
00:11:12,440 --> 00:11:14,000
in unsere Sprache einbauen können

232
00:11:14,000 --> 00:11:16,360
und wie wir mehrere Aufrufe unterstützen.

233
00:11:16,360 --> 00:11:19,480
Außerdem haben wir gelernt, wie wir "Whitespaces" ignorieren.

234
00:11:19,950 --> 00:11:21,720
In den nächsten Video erwarten uns

235
00:11:21,720 --> 00:11:22,440
Variablen,

236
00:11:22,440 --> 00:11:23,090
Schleifen,

237
00:11:23,090 --> 00:11:23,660
Bedingungen,

238
00:11:23,660 --> 00:11:24,300
Funktionen

239
00:11:24,300 --> 00:11:25,760
und vieles mehr.

240
00:11:25,760 --> 00:11:27,860
Was wollt ihr als Nächstes sehen?

241
00:11:27,860 --> 00:11:30,360
Schreibt mir eure Wünsche in die Kommentare!

242
00:11:30,360 --> 00:11:32,880
Natürlich freue ich mich auch generell über Kommentare

243
00:11:32,880 --> 00:11:35,500
mit eurem Feedback, Fragen und Vorschlägen,

244
00:11:35,500 --> 00:11:38,170
sowie natürlich Daumen und Abos.

245
00:11:38,170 --> 00:11:39,460
Vielen Dank an Gadarol,

246
00:11:39,460 --> 00:11:42,390
der mir für die Aufnahmen sein Studio zur Verfügung stellt.

247
00:11:42,390 --> 00:11:44,640
Euch vielen Dank für eure Aufmerksamkeit,

248
00:11:44,640 --> 00:11:46,040
ich hoffe es hat euch Spaß gemacht,

249
00:11:46,040 --> 00:11:48,100
auf Wiedersehen und bis zum nächsten Mal,

250
00:11:48,100 --> 00:11:50,940
wenn es wieder heißt: "Let's build a compiler".

