1
00:00:00,000 --> 00:00:03,262
Willkommen zurück zu "Let's build a compiler".

2
00:00:03,260 --> 00:00:05,897
In dieser Folge werden wir unser Programmiersprache

3
00:00:05,890 --> 00:00:08,524
erstmals einfache Funktionen beibringen.

4
00:00:08,520 --> 00:00:10,715
Erstmal so einfach wie möglich:

5
00:00:10,710 --> 00:00:12,595
Ohne Parameter und als Inhalt

6
00:00:12,590 --> 00:00:14,800
nur ein einzelnes Returnstatement.

7
00:00:15,964 --> 00:00:19,520
So wir beginnen mit der Erweiterung unser Spezifikation,

8
00:00:19,520 --> 00:00:20,724
ihr kennt das ja.

9
00:00:20,720 --> 00:00:22,808
Dann denken wir uns jetzt mal hier ein Beispiel

10
00:00:22,808 --> 00:00:24,800
für ein Funktionsaufruf aus.

11
00:00:25,271 --> 00:00:26,662
Und da sage ich jetzt mal:

12
00:00:26,660 --> 00:00:29,115
Wir definieren erst eine Funktion

13
00:00:29,110 --> 00:00:31,786
und die nennen wir "randomNumber",

14
00:00:34,062 --> 00:00:37,417
Die soll jetzt eine zufällige Zahl zurückgeben

15
00:00:37,410 --> 00:00:39,773
deswegen brauchen wir jetzt mal 'ne zufällige Zahl,

16
00:00:39,770 --> 00:00:41,053
ich habe hier einen Würfel,

17
00:00:41,050 --> 00:00:42,804
da würfel ich jetzt mal...

18
00:00:43,555 --> 00:00:45,360
Aha... Eine Vier.

19
00:00:47,315 --> 00:00:50,235
Und dann wollen wir natürlich diese Funktion

20
00:00:50,230 --> 00:00:51,737
auch noch aufrufen

21
00:00:51,730 --> 00:00:53,595
und das Ergebnis ausgeben.

22
00:00:53,590 --> 00:00:55,840
Also schreibe ich noch hier hinter:

23
00:00:56,453 --> 00:00:58,306
"Println"

24
00:01:00,635 --> 00:01:02,306
"randomNumber".

25
00:01:03,577 --> 00:01:05,960
Das Ganze sollte jetzt...

26
00:01:05,960 --> 00:01:07,000
...vier...

27
00:01:08,302 --> 00:01:10,764
und unseren "lineSeparator" ausgeben.

28
00:01:12,560 --> 00:01:14,795
Lassen wir den Test laufen um zu kontrollieren

29
00:01:14,790 --> 00:01:16,826
dass er auch wirklich noch nicht funktioniert

30
00:01:18,071 --> 00:01:20,195
und wunderbar, das tut nicht.

31
00:01:20,360 --> 00:01:21,968
Jetzt fangen wir also an

32
00:01:21,960 --> 00:01:24,080
unsere Grammatik zu erweitern.

33
00:01:24,284 --> 00:01:25,888
Ich kopier mir mal was wir hier haben

34
00:01:25,880 --> 00:01:27,484
damit wir uns das gleich gleichzeitig

35
00:01:27,480 --> 00:01:29,626
mit unser Grammatik ansehen können.

36
00:01:29,620 --> 00:01:32,186
Dann gehen wir auf unsere Grammatik

37
00:01:32,180 --> 00:01:34,635
und fügen für unsere... äh...

38
00:01:34,630 --> 00:01:37,035
für unseren Funktionsaufruf

39
00:01:37,030 --> 00:01:40,177
und unsere Funktionsdefinition neue Regeln ein.

40
00:01:40,170 --> 00:01:41,955
Also schauen wir noch einmal

41
00:01:41,955 --> 00:01:43,950
was wir hier hatten.

42
00:01:43,950 --> 00:01:45,977
Das ist nämlich einmal

43
00:01:45,970 --> 00:01:47,902
die Funktionsdefinition,

44
00:01:47,900 --> 00:01:49,093
das ist der Teil hier

45
00:01:49,090 --> 00:01:51,977
und der Funktionsaufruf ist der Teil hier.

46
00:01:51,970 --> 00:01:53,840
Beginnen wir mal mit einer Regel

47
00:01:53,840 --> 00:01:56,515
für die Funktionsdefinition.

48
00:01:57,360 --> 00:02:00,844
Das heißt: ..."function" ... ist...

49
00:02:00,840 --> 00:02:02,573
ähhh... kommt zuerst ein "int",

50
00:02:03,182 --> 00:02:05,853
dann kommt hier ein "IDENTIFIER"

51
00:02:05,850 --> 00:02:07,960
für den Name der Funktion,

52
00:02:11,026 --> 00:02:12,906
dann kommt eine Klammer auf

53
00:02:12,900 --> 00:02:14,937
die die Argumenteliste einleitet,

54
00:02:14,930 --> 00:02:16,635
die aktuell noch leer ist,

55
00:02:16,933 --> 00:02:19,248
dann kommen die Argumente,

56
00:02:19,240 --> 00:02:20,480
da haben wir bisher noch keine

57
00:02:20,480 --> 00:02:22,373
deswegen lass ich die erstmal weg,

58
00:02:22,370 --> 00:02:24,586
kommt also wieder eine schließende Klammer,

59
00:02:24,580 --> 00:02:28,133
dann kommt hier das "return",

60
00:02:28,130 --> 00:02:31,520
also zuerst eine sich öffnende Klammer,

61
00:02:31,520 --> 00:02:33,520
dann ein "return",

62
00:02:34,306 --> 00:02:37,662
dann kommt hier irgendwas was "returnt" werden kann,

63
00:02:37,660 --> 00:02:42,417
das ist in unserem Fall irgendeine beliebige "expression",

64
00:02:46,946 --> 00:02:49,760
dann kommt eine Semikolon

65
00:02:49,760 --> 00:02:53,275
und dann eine geschweifte schließende Klammer.

66
00:02:55,293 --> 00:02:58,102
So dass war die Funktionsdefinition

67
00:02:58,100 --> 00:03:00,884
und jetzt kommt noch der Funktionsaufruf.

68
00:03:00,880 --> 00:03:02,782
Das haben wir jetzt hier in dem println,

69
00:03:02,780 --> 00:03:05,408
also muss dass bei dieser Regel hier dazu.

70
00:03:05,400 --> 00:03:08,031
Das Argument kann eine "expression" sein

71
00:03:08,195 --> 00:03:10,377
und da es jetzt logisch ist,

72
00:03:10,370 --> 00:03:12,115
dass wir so einen Funktionsaufruf

73
00:03:12,110 --> 00:03:14,306
überall da schreiben können wo wir auch

74
00:03:14,300 --> 00:03:15,733
einfach nur ein Variablenname

75
00:03:15,730 --> 00:03:17,297
oder nur 'ne Number schreiben können

76
00:03:17,290 --> 00:03:19,097
ist es wohl ein Teil einer "expression".

77
00:03:19,090 --> 00:03:22,937
Das heißt wir schreiben jetzt den Funktionsaufruf

78
00:03:22,930 --> 00:03:25,128
gleich hier oben zur expression rein aber

79
00:03:25,120 --> 00:03:29,177
erstmal erstellen wir eine Regel für einen "Functioncall".

80
00:03:33,071 --> 00:03:35,595
"functioncall" sieht ganz einfach aus:

81
00:03:35,590 --> 00:03:38,342
Wir haben nämlich zuerst ein "IDENTIFIER"

82
00:03:38,340 --> 00:03:39,964
mit einer Funktion,

83
00:03:39,960 --> 00:03:42,240
den Teil hier haben wir dann auch noch mit

84
00:03:42,240 --> 00:03:43,746
den beiden Klammern

85
00:03:43,740 --> 00:03:46,635
und dann war's das auch schon.

86
00:03:48,000 --> 00:03:50,217
So, dann sind wir... also wie gesagt,

87
00:03:50,210 --> 00:03:52,946
das hatten wir jetzt hier im "println",

88
00:03:52,940 --> 00:03:54,462
das heißt als "expression",

89
00:03:54,586 --> 00:03:56,564
dann schreiben wir das hier dazu.

90
00:04:02,915 --> 00:04:04,955
Und dann müssen wir natürlich...

91
00:04:04,950 --> 00:04:06,724
Also den Teil haben wir jetzt komplett abgehakt

92
00:04:06,720 --> 00:04:09,675
und dann müssen wir natürlich noch sehen,

93
00:04:09,670 --> 00:04:12,933
der Teil, also diese "functiondefinition",

94
00:04:12,930 --> 00:04:15,484
ich 'nenn sie vielleicht auch mal "functiondefinition"

95
00:04:16,982 --> 00:04:18,693
auch irgendwo stehen darf.

96
00:04:18,690 --> 00:04:21,968
Das ist also jetzt bei uns irgendwo beliebig im Quelltext,

97
00:04:23,946 --> 00:04:26,786
das wäre also in unserem "program",

98
00:04:26,780 --> 00:04:30,680
da dürfen dann nicht einfach nur statements stehen,

99
00:04:30,680 --> 00:04:33,746
die mit 'nem Semikolon beendet werden,

100
00:04:33,740 --> 00:04:36,457
sondern da dürfen dann...

101
00:04:36,893 --> 00:04:38,450
...auch...

102
00:04:40,986 --> 00:04:43,208
"functiondefinitions" stehen.

103
00:04:43,200 --> 00:04:46,786
So. Dann speichern wir das Ganze

104
00:04:46,780 --> 00:04:50,551
und generieren unseren Parser neu.

105
00:04:52,888 --> 00:04:54,506
Hier F5.

106
00:04:55,088 --> 00:04:58,204
Und dann lassen wir unsere Tests mal wieder laufen.

107
00:05:00,320 --> 00:05:01,417
So wie ihr seht:

108
00:05:01,410 --> 00:05:05,933
Es gibt keine Fehler mehr von unserem ANTLR-Parser,

109
00:05:05,930 --> 00:05:07,462
sondern nurnoch andere Fehler,

110
00:05:07,460 --> 00:05:09,257
nämlich die von Jasmin,

111
00:05:09,250 --> 00:05:11,546
dass jetzt in unser Jasmindatei offensichtlich

112
00:05:11,540 --> 00:05:13,942
wieder Blödsinn steht, kein Wunder,

113
00:05:13,940 --> 00:05:16,377
denn da haben wir ja noch nicht sinnvolles gemacht.

114
00:05:17,320 --> 00:05:20,204
Also machen wir jetzt mit unserem Visitor weiter,

115
00:05:20,871 --> 00:05:23,066
öffnen unseren Visitor

116
00:05:23,060 --> 00:05:24,502
und beginnen damit

117
00:05:24,500 --> 00:05:27,248
die neuen "visit"-Method zu implementieren.

118
00:05:27,453 --> 00:05:30,506
So, dann gehen wir mal...

119
00:05:30,500 --> 00:05:32,097
...irgendwo nach hier unten

120
00:05:33,906 --> 00:05:36,293
und fangen an mit:

121
00:05:36,290 --> 00:05:39,920
visit...FunctionCall.

122
00:05:40,822 --> 00:05:43,493
Wenn wir jetzt so ein Funktionsaufruf haben,

123
00:05:43,490 --> 00:05:46,848
dann haben wir jetzt also in unserem Kontext:

124
00:05:47,191 --> 00:05:49,120
Den Funktionsname von der Funktion

125
00:05:49,120 --> 00:05:50,831
die wir aufrufen wollen

126
00:05:51,031 --> 00:05:53,173
und das war's auch schon.

127
00:05:53,170 --> 00:05:54,684
Das reicht uns auch schon für's Erste,

128
00:05:54,680 --> 00:05:56,044
noch haben wir keine Parameter,

129
00:05:56,040 --> 00:05:57,484
das kommt alles später.

130
00:05:57,960 --> 00:06:01,422
Das heißt wir müssen jetzt eine Instruktion generieren,

131
00:06:01,420 --> 00:06:03,537
die diese Funktion aufruft.

132
00:06:04,031 --> 00:06:05,520
Das ist ganz einfach

133
00:06:05,520 --> 00:06:07,724
denn da gibt es eine...

134
00:06:07,995 --> 00:06:10,675
Instruktion "invokestatic",

135
00:06:11,177 --> 00:06:13,426
die eine "static"-Methode aufruft

136
00:06:13,420 --> 00:06:16,040
und wir werden nachher die Methoden

137
00:06:16,040 --> 00:06:17,893
von der "functionDefinition"

138
00:06:17,890 --> 00:06:20,386
als static-Methode generieren.

139
00:06:20,380 --> 00:06:21,906
Also "invokestatic"

140
00:06:22,280 --> 00:06:24,542
und dann brauchen wir auch noch

141
00:06:24,540 --> 00:06:26,884
den Namen von der Klasse

142
00:06:26,880 --> 00:06:29,986
die diese static-Method enthält.

143
00:06:30,644 --> 00:06:35,151
Diesen Name haben wir bei uns in der Main angegeben

144
00:06:35,150 --> 00:06:37,391
und zwar hier oben, dass ist der hier,

145
00:06:37,390 --> 00:06:38,591
heißt bei mir "HelloWorld",

146
00:06:38,590 --> 00:06:39,897
wenn ihr den anders genannt habt

147
00:06:39,890 --> 00:06:41,902
dann müsste ihr jetzt auch was anderes angeben

148
00:06:41,900 --> 00:06:44,097
aber bei mir ist es entsprechend jetzt:

149
00:06:44,604 --> 00:06:46,142
"HelloWorld"

150
00:06:47,555 --> 00:06:49,688
und dann ein Schrägstrich

151
00:06:49,680 --> 00:06:52,724
und dann der Funktionsname

152
00:06:52,720 --> 00:06:55,257
".getText()".

153
00:06:56,035 --> 00:06:59,111
So, jetzt brauchen wir natürlich auch noch die "functionDefinition",

154
00:07:03,262 --> 00:07:05,844
dafür müssen wir jetzt wissen wir wir in Jasmin

155
00:07:05,840 --> 00:07:07,364
eine Methode definieren,

156
00:07:07,360 --> 00:07:08,648
das haben wir auch schonmal gemacht,

157
00:07:08,640 --> 00:07:10,235
nämlich auch hier in der "main"

158
00:07:11,013 --> 00:07:12,635
und das seht ihr hier:

159
00:07:12,630 --> 00:07:15,924
Dieses "method public static main" heißt:

160
00:07:15,920 --> 00:07:18,164
Wir erzeugen eine "public static"-Methode

161
00:07:18,160 --> 00:07:19,160
mit dem Namen main,

162
00:07:19,160 --> 00:07:20,617
mit diesen Argumenten,

163
00:07:20,610 --> 00:07:22,146
keinem Rückgabewert

164
00:07:22,342 --> 00:07:23,506
und so weiter.

165
00:07:23,500 --> 00:07:25,431
Das machen wir jetzt also ganz so ähnlich nochmal

166
00:07:25,430 --> 00:07:27,768
und sagen dann jetzt hier:

167
00:07:27,760 --> 00:07:29,524
".method"

168
00:07:29,520 --> 00:07:30,640
"public"

169
00:07:32,013 --> 00:07:33,386
"static main",

170
00:07:33,380 --> 00:07:35,173
kriegt keine Argumente,

171
00:07:35,170 --> 00:07:37,791
hat als Rückgabewert einen Integer,

172
00:07:37,790 --> 00:07:39,648
weil was anderes haben wir halt noch nicht.

173
00:07:41,560 --> 00:07:44,400
Dann kommen die "Limits"

174
00:07:46,320 --> 00:07:48,404
damit haben wir uns auch noch nicht näher beschäftigt

175
00:07:48,400 --> 00:07:50,502
wie wir die nachher mal korrekt berechnen,

176
00:07:50,500 --> 00:07:52,053
ich nehmen jetzt hier einfach mal einen Wert

177
00:07:52,053 --> 00:07:54,050
der groß genug ist.

178
00:07:56,466 --> 00:07:58,364
Genauso für den Stack.

179
00:08:01,542 --> 00:08:05,164
Und mit ".end method"

180
00:08:05,160 --> 00:08:07,648
erzeugen wir das Ende der Methode.

181
00:08:07,964 --> 00:08:09,915
Hier zwischen müssen jetzt

182
00:08:09,910 --> 00:08:13,844
die Instruktionen gelegt werden, die ähm...

183
00:08:13,840 --> 00:08:16,626
in dieser Methode ausgeführt werden sollen.

184
00:08:16,620 --> 00:08:18,697
Achja: Und außerdems sollte unsere Methode

185
00:08:18,690 --> 00:08:20,351
natürlich nicht "main" heißen.

186
00:08:20,746 --> 00:08:23,186
Also nehmen wir hier:

187
00:08:23,180 --> 00:08:24,871
"ctx."

188
00:08:25,897 --> 00:08:27,297
"funcName".

189
00:08:28,355 --> 00:08:31,440
Für die Instruktionen haben wir jetzt einmal

190
00:08:31,440 --> 00:08:35,204
in unserem Kontext den return value,

191
00:08:35,200 --> 00:08:37,288
das ist jetzt also wieder irgend 'ne "expression",

192
00:08:37,280 --> 00:08:39,942
die hinterlässt einen Wert auf dem Stack,

193
00:08:39,940 --> 00:08:42,288
nämlich den, den wir zurückgeben wollen,

194
00:08:42,280 --> 00:08:44,697
also führen wir das erstmal aus:

195
00:08:44,991 --> 00:08:46,600
Also lassen wir uns mit "visit"

196
00:08:46,600 --> 00:08:48,737
die entsprechenden Instruktionen generieren

197
00:08:48,730 --> 00:08:51,333
und jetzt haben wir einen Wert auf dem Stack liegen,

198
00:08:51,330 --> 00:08:53,084
der zurückgegeben werden soll

199
00:08:53,080 --> 00:08:57,066
und denn werden wir jetzt mit "ireturn" zurückgeben.

200
00:09:04,360 --> 00:09:07,613
So, jetzt haben wir natürlich noch ein kleines Problem:

201
00:09:07,610 --> 00:09:10,457
Nämlich diese Methode wird jetzt irgendwo

202
00:09:10,450 --> 00:09:12,835
mitten in unseren Quelltext reingeneriert.

203
00:09:12,830 --> 00:09:16,017
Das können wir uns jetzt einmal anschauen

204
00:09:16,010 --> 00:09:19,408
indem wir hier in unserem Compilertest

205
00:09:19,400 --> 00:09:21,791
uns den Jasmincode ausgeben lassen,

206
00:09:21,790 --> 00:09:26,026
wir sagen also in der "compileAndRun"-Methode

207
00:09:26,386 --> 00:09:28,020
hier bei diesem Code

208
00:09:28,020 --> 00:09:30,115
dass wir den ausgeben wollen

209
00:09:32,533 --> 00:09:34,760
und dann lassen wir unseren Test laufen.

210
00:09:36,502 --> 00:09:37,817
Es werden hier immer unsere

211
00:09:37,810 --> 00:09:39,773
generierten Jasmincodes ausgegeben

212
00:09:39,770 --> 00:09:42,488
und das Letzte was ausgegeben wird

213
00:09:42,480 --> 00:09:44,573
ist unser aktuelles Beispiel

214
00:09:45,831 --> 00:09:48,386
und die beginnt hier.

215
00:09:49,755 --> 00:09:52,351
Hier haben wir jetzt unsere "main"-Methode

216
00:09:52,350 --> 00:09:54,471
und in dieser "main"-Methode

217
00:09:54,470 --> 00:09:56,302
ist nochmal eine Methode.

218
00:09:56,300 --> 00:09:57,373
Da sieht man erstmal:

219
00:09:57,370 --> 00:09:59,875
Ich habe das "getText()", das fügen wir gleich noch ein

220
00:10:00,191 --> 00:10:03,293
aber vorallem darf diese Methode "randomNumber"

221
00:10:03,290 --> 00:10:05,475
die hier generiert wird auch nicht in der "main"

222
00:10:05,470 --> 00:10:07,786
definiert werden, sie muss davor oder dahinter

223
00:10:07,780 --> 00:10:09,982
definiert werden. Was ist egal ob

224
00:10:09,980 --> 00:10:11,502
davor oder dahinter aber

225
00:10:11,500 --> 00:10:13,586
hier mitten rein funktioniert nicht.

226
00:10:13,580 --> 00:10:16,311
Jetzt füge ich erstmal das "getText()" da unten wieder ein

227
00:10:16,310 --> 00:10:17,791
damit das wieder stimmt,

228
00:10:18,275 --> 00:10:21,111
dafür gehen wir also auf den Visitor und

229
00:10:22,035 --> 00:10:24,048
fügen das "getText()" hier hinzu

230
00:10:24,542 --> 00:10:26,546
und jetzt können wir nochmal einmal kurz

231
00:10:26,540 --> 00:10:28,644
einen Blick auf unsere Grammatik werfen

232
00:10:28,640 --> 00:10:32,133
und hier im "program" haben wir jetzt entweder

233
00:10:32,130 --> 00:10:35,173
"functionDefinitions" oder "statements".

234
00:10:35,170 --> 00:10:36,911
Wenn es ein "Statement" ist,

235
00:10:36,910 --> 00:10:39,364
dann wollen wir das ganze in die "main"-Methode packen

236
00:10:39,360 --> 00:10:41,417
und wenn es eine "functionDefinition" ist

237
00:10:41,410 --> 00:10:43,622
dann soll es vor oder hinter die "main"-Methode.

238
00:10:43,620 --> 00:10:44,991
Also müssen wir diese beiden Fälle

239
00:10:44,990 --> 00:10:46,435
irgendwie auseinander halten.

240
00:10:46,430 --> 00:10:49,946
Deswegen refactor ich das jetzt in eine eigene Regel raus,

241
00:10:49,940 --> 00:10:52,177
also diesen Teil hier,

242
00:10:53,426 --> 00:10:57,195
nenne ich sie mal kreativerweise "programPart",

243
00:10:57,190 --> 00:10:59,626
dann können auch die Klammern hier wieder weg

244
00:11:01,506 --> 00:11:03,991
und so ein "programPart"

245
00:11:04,742 --> 00:11:07,311
besteht jetzt hier aus

246
00:11:08,320 --> 00:11:10,271
einem "Statement"

247
00:11:11,795 --> 00:11:14,097
oder einer "functionDefinition".

248
00:11:15,315 --> 00:11:18,417
Jetzt kann ich hier wieder Labels dranschreiben

249
00:11:18,410 --> 00:11:19,897
und dann sage ich hier:

250
00:11:20,195 --> 00:11:22,302
"mainStatement", weil das

251
00:11:22,702 --> 00:11:24,008
ein Statement ist welches

252
00:11:24,008 --> 00:11:26,000
in unsere "main"-Methode gehört

253
00:11:26,244 --> 00:11:30,466
und hier eben eine "functionDefinition"

254
00:11:30,460 --> 00:11:32,106
die dürfen wir jetzt aber nicht genauso nennen

255
00:11:32,100 --> 00:11:33,862
wie diese Regel denn dafür würde schon

256
00:11:33,860 --> 00:11:36,008
eine "visit"-Methode generiert werden,

257
00:11:36,000 --> 00:11:40,302
also nenne ich sie

258
00:11:40,300 --> 00:11:43,293
"Program part function definition".

259
00:11:43,591 --> 00:11:45,742
So dann speichern wir das,

260
00:11:45,740 --> 00:11:50,191
generieren einmal unseren Parser wieder neu,

261
00:11:52,120 --> 00:11:55,244
gehen dann hier im Parser auf "F5",

262
00:11:55,240 --> 00:11:57,164
gehen wieder auf unseren Visitor,

263
00:11:57,160 --> 00:11:59,488
sooo, dann gehen wir mal nach hier unten

264
00:11:59,924 --> 00:12:02,884
und dann werden wir jetzt die "visit"-Methode

265
00:12:02,880 --> 00:12:06,964
von diesem "program" hier implementieren.

266
00:12:10,080 --> 00:12:12,906
Dieses "Program" hat jetzt Kinder

267
00:12:12,900 --> 00:12:16,337
und diese Kinder sind jeweils entweder

268
00:12:16,330 --> 00:12:20,866
vom Typ "mainStatement" oder "ProgPartFunctionDefinition".

269
00:12:22,257 --> 00:12:24,782
Die iterieren wir jetzt einfach durch.

270
00:12:42,640 --> 00:12:44,644
Wir wissen jetzt der Code

271
00:12:44,640 --> 00:12:46,711
von unserem aktuellen "child",

272
00:12:46,710 --> 00:12:48,351
den kriegen wir raus indem

273
00:12:48,350 --> 00:12:50,626
wir dieses Child hier durchgehen,

274
00:12:50,620 --> 00:12:53,902
das machen wir also einfach mit "visitChild"

275
00:12:58,960 --> 00:13:00,155
und jetzt kommt der Clue:

276
00:13:00,150 --> 00:13:02,964
Denn diese "Instructions" beinhalten entweder

277
00:13:02,960 --> 00:13:05,662
eine Funktionsdefinition oder

278
00:13:05,660 --> 00:13:07,915
Statements für unsere "main"-Methode.

279
00:13:07,910 --> 00:13:10,235
Und das können wir jetzt herausfinden

280
00:13:10,230 --> 00:13:13,564
indem wir uns den Typ von diesem Child angucken.

281
00:13:13,560 --> 00:13:15,173
Da sagen wir dann also jetzt hier:

282
00:13:15,170 --> 00:13:18,760
"if child is instance of",

283
00:13:18,760 --> 00:13:20,297
gucken wir wieder in unsere Grammatik:

284
00:13:20,297 --> 00:13:22,760
Entweder es ist ein "MainStatement",

285
00:13:25,524 --> 00:13:27,008
dann haben wir jetzt

286
00:13:27,000 --> 00:13:29,088
Code für unsere "main"-Methode gefunden.

287
00:13:29,080 --> 00:13:32,608
Das heißt wir speichern einmal den Gesamtcode

288
00:13:32,600 --> 00:13:34,724
für unsere Mainmethode hier ab

289
00:13:41,595 --> 00:13:45,088
und fügen dann hier die Instructions an.

290
00:13:49,502 --> 00:13:52,337
Oder wenn dies nicht der Fall ist,

291
00:13:52,330 --> 00:13:53,982
dann haben wir functions.

292
00:13:55,151 --> 00:13:58,573
Also sagen wir hier: Wir nehmen

293
00:13:58,570 --> 00:14:01,422
functions, fangen auch mit einem leeren String an

294
00:14:01,420 --> 00:14:03,315
und dann sagen wir hier:

295
00:14:03,310 --> 00:14:05,733
Functions ist genau das Gleiche.

296
00:14:08,955 --> 00:14:12,506
Und als Ergebnis können wir dann einfach

297
00:14:12,500 --> 00:14:14,648
die functions zurückgeben

298
00:14:14,640 --> 00:14:17,768
plus unsere Definition der "main"-Methode.

299
00:14:17,760 --> 00:14:19,528
Und für die Definition der "main"-Methode

300
00:14:19,520 --> 00:14:21,288
nehmen wir das, was bis jetzt

301
00:14:21,280 --> 00:14:22,800
hier in der "main" war,

302
00:14:22,800 --> 00:14:24,813
nämlich dieser ganze Teil hier

303
00:14:26,915 --> 00:14:27,928
bis hier.

304
00:14:28,697 --> 00:14:30,773
Und hier kommen dann nurnoch die Instructions

305
00:14:30,770 --> 00:14:34,573
die die "main"-Definition bereits enthalten werden.

306
00:14:39,960 --> 00:14:42,942
Machen wir hier noch so'n Zeilenumbruch dazwischen

307
00:14:42,940 --> 00:14:45,080
damit man das besser lesen kann nachher

308
00:14:45,080 --> 00:14:46,626
und damit es auch funktioniert

309
00:14:47,177 --> 00:14:50,608
und unsere Instructions für die "main"-Methode

310
00:14:50,600 --> 00:14:52,671
heißen jetzt nicht "instructions",

311
00:14:52,671 --> 00:14:54,670
sondern "mainCode".

312
00:14:55,186 --> 00:14:57,093
So, dann werden wir

313
00:14:57,737 --> 00:15:00,151
unseren Test mal wieder ausführen

314
00:15:00,426 --> 00:15:03,311
und schauen uns erstmal unser Ergebnis an denn

315
00:15:03,310 --> 00:15:04,475
unsere anderen Tests

316
00:15:04,470 --> 00:15:06,640
sollten wir dadurch ja nicht kaputt gemacht haben.

317
00:15:06,640 --> 00:15:07,653
Und tatsächlich:

318
00:15:07,650 --> 00:15:09,391
Unsere alten Tests funktionieren noch,

319
00:15:09,390 --> 00:15:10,968
das heißt da haben wir nichts kaputt gemacht,

320
00:15:10,960 --> 00:15:12,497
das ist gut.

321
00:15:12,490 --> 00:15:15,124
Unser neuer Test funktioniert allerdings

322
00:15:15,120 --> 00:15:15,977
immernoch nicht.

323
00:15:15,970 --> 00:15:16,871
Das müssen wir jetzt nochmal gucken:

324
00:15:16,870 --> 00:15:18,115
Haben wir was falsch gemacht?

325
00:15:18,391 --> 00:15:21,528
"malformed signature".

326
00:15:21,520 --> 00:15:23,404
Genau, das ist richtig.

327
00:15:23,400 --> 00:15:24,577
Eh also das heißt:

328
00:15:24,570 --> 00:15:25,826
Das habe ich eben falsch gemacht

329
00:15:25,820 --> 00:15:27,382
in völliger Verwirrung

330
00:15:27,380 --> 00:15:31,248
und zwar bei unserem "visitFunctionCall"

331
00:15:31,240 --> 00:15:34,004
habe ich bis jetzt nur den Klassenname

332
00:15:34,000 --> 00:15:35,471
und den Funktionsname angegeben,

333
00:15:35,470 --> 00:15:36,831
das reicht aber nicht, wir müssen

334
00:15:36,830 --> 00:15:38,515
die volle Signatur angeben.

335
00:15:39,093 --> 00:15:40,782
Das heißt es kommt hiernach noch

336
00:15:40,780 --> 00:15:42,257
die Liste mit den Argumenten,

337
00:15:42,250 --> 00:15:43,435
da wissen wir bis jetzt

338
00:15:43,430 --> 00:15:45,048
haben wir noch keine Argumente

339
00:15:45,040 --> 00:15:46,697
und der Returntype,

340
00:15:46,690 --> 00:15:49,013
das ist nämlich ein Integer.

341
00:15:50,373 --> 00:15:53,693
Dann führen wir den Test nochmal aus

342
00:15:55,800 --> 00:15:57,915
und huraa: Es hat funktioniert:

343
00:15:57,910 --> 00:15:59,706
Alle unsere Tests laufen,

344
00:15:59,700 --> 00:16:01,711
auch unser randomNumber-Test,

345
00:16:01,710 --> 00:16:04,017
der gibt jetzt nämlich eine vier zurück

346
00:16:04,010 --> 00:16:06,168
und das "println"

347
00:16:06,160 --> 00:16:09,066
druckt eine vier auf unser Konsole aus.

348
00:16:09,680 --> 00:16:11,360
In dieser Folge haben wir gelernt

349
00:16:11,360 --> 00:16:13,346
wie wir einfache Funktionsdefinitionen

350
00:16:13,340 --> 00:16:14,893
und Funktionsaufrufe in Jasmin

351
00:16:14,890 --> 00:16:17,168
aus unserem Code generieren können.

352
00:16:17,160 --> 00:16:18,640
Außerdem haben wir gelernt

353
00:16:18,640 --> 00:16:20,586
wie wir "Statements" für unsere "main"-Methode

354
00:16:20,580 --> 00:16:23,360
von unseren Funktionsdefinitionen trennen können.

355
00:16:23,360 --> 00:16:25,555
Damit sind wir lange nicht fertig.

356
00:16:25,550 --> 00:16:28,004
Wir wollen Funktionsparameter hinzufügen,

357
00:16:28,000 --> 00:16:30,311
komplexeren Code in den Funktionen erlauben,

358
00:16:30,310 --> 00:16:32,706
Funktionen ohne Rückgabewerte unterstützen

359
00:16:32,700 --> 00:16:34,386
und es erkennen wenn der Programmierer

360
00:16:34,380 --> 00:16:37,475
verucht eine nicht definierte Funktion aufzurufen.

361
00:16:37,751 --> 00:16:39,342
Wir wir all dies implementieren

362
00:16:39,342 --> 00:16:41,340
erfahrt ihr in den nächsten Folgen.

363
00:16:41,604 --> 00:16:43,960
Lasst mir Kommentare mit euren Fragen,

364
00:16:43,960 --> 00:16:45,440
Feedback und Wünschen da.

365
00:16:45,440 --> 00:16:46,444
Gebt mir einen Daumen

366
00:16:46,440 --> 00:16:48,160
wenn euch das Video gefallen hat

367
00:16:48,160 --> 00:16:49,413
und lasst ein Abo da,

368
00:16:49,410 --> 00:16:51,706
damit ihr keine neue Folge verpasst.

369
00:16:52,290 --> 00:16:53,866
Vielen Dank an Gadarol, der mir

370
00:16:53,860 --> 00:16:56,302
für die Aufnahmen sein Studio zur Verfügung stellt.

371
00:16:56,300 --> 00:16:58,462
Euch vielen Dank für eure Aufmerksamkeit,

372
00:16:58,460 --> 00:16:59,977
ich hoffe es hat euch Spaß gemacht,

373
00:16:59,970 --> 00:17:02,208
bis zum nächsten Mal, wenn es wieder heißt:

374
00:17:02,208 --> 00:17:04,200
"Let's build a compiler."

