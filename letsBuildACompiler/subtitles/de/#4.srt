1
00:00:00,000 --> 00:00:02,990
Willkommen zurück zu "Let's build a compiler".

2
00:00:02,990 --> 00:00:06,160
In dieser Folge werden wir den Visitor aus letzter Folge

3
00:00:06,160 --> 00:00:09,060
in den Punkten Lesbarkeit und Nützlichkeit aufbohren.

4
00:00:09,060 --> 00:00:12,510
Mein Name ist yankee und ich wünsche euch viel Spaß.

5
00:00:13,470 --> 00:00:16,220
Unser Visitor tut jetzt zwar was er tun soll,

6
00:00:16,220 --> 00:00:18,660
aber er tut das leider nicht sonderlich lesbar.

7
00:00:18,660 --> 00:00:22,360
Wir haben hier "ctx.getChildCount()==1",

8
00:00:22,360 --> 00:00:24,360
aber was soll uns das sagen?

9
00:00:24,490 --> 00:00:26,810
Klar, wenn ich jetzt den Baum wieder raushole,

10
00:00:26,810 --> 00:00:27,980
dann kann man sehen:

11
00:00:27,980 --> 00:00:31,990
Manchmal hat ein Additionsknoten nur ein Kind

12
00:00:32,350 --> 00:00:33,990
und manchmal haben sie drei Kinder.

13
00:00:34,290 --> 00:00:36,550
Und hier decke ich eben den Fall für ein Kind ab

14
00:00:36,550 --> 00:00:38,530
und wenn man den Baum vor sich hat, dann

15
00:00:38,530 --> 00:00:40,530
weiß man auch was das soll,

16
00:00:41,090 --> 00:00:43,520
aber so richtig leicht zu verstehen ist das nicht

17
00:00:43,520 --> 00:00:46,200
und es ist zeitaufwändig das jedes Mal zu erklären

18
00:00:46,200 --> 00:00:48,700
und wenn dieser Visitor hier erstmal groß wird

19
00:00:48,700 --> 00:00:51,320
und unsere Sprache immer mehr und mehr Elemente hat,

20
00:00:51,320 --> 00:00:53,510
dann wird es um so aufwendiger für uns auch noch

21
00:00:53,510 --> 00:00:56,600
im Kopf zu behalten was mit eigentlich gemeint ist.

22
00:00:56,600 --> 00:00:59,430
Das Gleiche gilt auch für context.getChild(0)

23
00:00:59,430 --> 00:01:00,990
und getChild(2).

24
00:01:01,680 --> 00:01:04,390
Für 'n Außenstehenden oder nach einer Weile,

25
00:01:04,390 --> 00:01:07,600
wenn die Komplexität ansteigt auch für uns,

26
00:01:07,600 --> 00:01:10,250
wird es sehr schwierig noch nachzuvollziehen

27
00:01:10,250 --> 00:01:11,580
was diese Teile hier tun

28
00:01:11,580 --> 00:01:14,960
oder auf was für einen Teil unseres Baums sie zugreifen.

29
00:01:15,430 --> 00:01:17,970
Daher zeige ich euch jetzt wie das besser geht.

30
00:01:19,680 --> 00:01:21,850
Wir gehen als Erstes wieder in die Grammatik

31
00:01:21,850 --> 00:01:24,210
und dann fügen wir hier Labels hinzu.

32
00:01:24,210 --> 00:01:26,050
Zum Beispiel gebe ich dieser

33
00:01:26,250 --> 00:01:28,940
Subregel, also diesem Teil dieser Regel,

34
00:01:28,940 --> 00:01:31,280
das Label "Plus".

35
00:01:32,450 --> 00:01:34,600
Und diesem Teil der Subregel,

36
00:01:35,170 --> 00:01:38,160
da schmeiße ich erstmal das Semikolon in die nächste Zeile,

37
00:01:38,160 --> 00:01:39,540
damit das nicht mehr stört

38
00:01:39,540 --> 00:01:43,320
und dann geb' ich dem Teil der Subregel das Label "Zahl".

39
00:01:45,700 --> 00:01:48,580
Außerdem geb' ich den einzelnen Teilen der Regeln

40
00:01:48,580 --> 00:01:50,770
auch noch ... Labels.

41
00:01:51,370 --> 00:01:54,210
Zum Beispiel der Teil hier ist links

42
00:01:54,210 --> 00:01:56,160
das ist der linke Teil der Addition

43
00:01:56,160 --> 00:01:58,280
und der Teil ist rechts,

44
00:01:58,280 --> 00:02:00,400
der rechte Teil der Addition

45
00:02:00,550 --> 00:02:04,660
und die Zahl hier unten das ist... naja meine Zahl eben.

46
00:02:07,450 --> 00:02:08,960
Dann speicher ich das

47
00:02:09,340 --> 00:02:11,950
und generiere

48
00:02:12,040 --> 00:02:13,050
den

49
00:02:14,400 --> 00:02:16,670
Parser wieder neu mit ANTLR.

50
00:02:17,380 --> 00:02:19,380
Jetzt muss ich hier in eclipse

51
00:02:19,380 --> 00:02:21,740
einmal wieder beim Parser auf F5 drücken

52
00:02:21,740 --> 00:02:23,740
damit der sich aktualisiert

53
00:02:23,740 --> 00:02:25,000
und wir sehen direkt

54
00:02:25,000 --> 00:02:27,560
unser Visitor passt nicht mehr zu dem

55
00:02:27,560 --> 00:02:29,970
von ANTLR jetzt generiertem DemoBaseVisitor,

56
00:02:29,970 --> 00:02:32,130
der hat sich durch die Labels nämlich geändert.

57
00:02:34,940 --> 00:02:38,740
Wir haben jetzt seit Neuestem eine Methode "visitPlus"

58
00:02:38,740 --> 00:02:41,480
und eine Methode "visitZahl".

59
00:02:43,860 --> 00:02:47,560
Die werden jetzt aufgerufen, jeweils für den Teil,

60
00:02:47,560 --> 00:02:50,500
der "child count" eins hat,

61
00:02:50,500 --> 00:02:52,940
weil, wenn wir nochmal auf

62
00:02:52,940 --> 00:02:55,300
hierdrauf gucken, das ist der Teil der Regel

63
00:02:55,300 --> 00:02:56,980
mit dem "child count" eins,

64
00:02:56,980 --> 00:02:58,980
der ruft die Subregel "Zahl" auf

65
00:02:58,980 --> 00:03:00,980
und der mit dem "child count" drei

66
00:03:00,980 --> 00:03:03,590
der ruft jetzt die "visitPlus" auf.

67
00:03:04,840 --> 00:03:06,860
Also haben wir hier "visitPlus",

68
00:03:07,380 --> 00:03:09,820
dass ist dieser Teil hier

69
00:03:16,310 --> 00:03:18,620
und außerdem haben wir

70
00:03:18,620 --> 00:03:21,130
"visitZahl"

71
00:03:21,130 --> 00:03:23,260
und "visitZahl" ist dann

72
00:03:23,260 --> 00:03:24,790
dieser Teil der Regel.

73
00:03:25,180 --> 00:03:28,110
Die alte "visitAddition"-Regel ähm...

74
00:03:28,110 --> 00:03:29,700
-Methode schmeißen wir weg,

75
00:03:31,740 --> 00:03:35,720
fügen unsere "return null" ein

76
00:03:40,910 --> 00:03:42,530
und sehen dass unser Visitor

77
00:03:42,530 --> 00:03:44,730
schon etwas an Lesbarkeit gewonnen hat.

78
00:03:45,030 --> 00:03:46,780
Aber es könnte immernoch besser sein,

79
00:03:46,780 --> 00:03:50,690
denn wir haben immernoch hier ctx.getChild(2).

80
00:03:51,660 --> 00:03:52,690
Stattdessen,

81
00:03:52,690 --> 00:03:54,190
wollen wir jetzt hier auf den Teil

82
00:03:54,190 --> 00:03:56,190
mit dem Label "rechts" zugreifen.

83
00:03:56,420 --> 00:03:58,290
Wie geht das? Ganz einfach:

84
00:03:58,290 --> 00:04:00,530
In dem wir hier "rechts" eingeben.

85
00:04:01,270 --> 00:04:02,770
Das ist jetzt ein Token

86
00:04:03,920 --> 00:04:05,520
Wenn wir auf dieses Token

87
00:04:05,520 --> 00:04:08,370
getText() aufrufen, dann bekommen wir

88
00:04:08,370 --> 00:04:09,900
den Text von dem Knoten.

89
00:04:11,040 --> 00:04:13,670
Genauso ist das hier unten, nur hier heißt

90
00:04:14,100 --> 00:04:16,280
unser Token "Zahl".

91
00:04:23,710 --> 00:04:26,690
Jetzt lasse ich unseren Compiler wieder laufen

92
00:04:31,230 --> 00:04:32,250
Und wie wir sehen:

93
00:04:32,250 --> 00:04:35,240
Ich hab' das "visitChildren" vergessen.

94
00:04:35,240 --> 00:04:36,870
Das ist natürlich wichtig,

95
00:04:36,870 --> 00:04:39,550
weil nach wie vor ist es so, dass das "visitPlus"

96
00:04:39,550 --> 00:04:41,550
hier Subknoten hat.

97
00:04:47,010 --> 00:04:52,280
Jetzt Nochmal... Und wir haben immernoch die gleiche Ausgabe,

98
00:04:52,280 --> 00:04:55,660
aber jetzt ein deutlich lesbareren Visitor.

99
00:04:55,660 --> 00:04:57,140
Unsere bisherige Methode

100
00:04:57,140 --> 00:05:00,460
direkt nach System.out zu schreiben hat ein paar Nachteile:

101
00:05:00,460 --> 00:05:02,610
Denn was einmal auf die Konsole geschrieben wurde,

102
00:05:02,610 --> 00:05:04,430
das ist geschrieben, da kommen wir nicht mehr dran,

103
00:05:04,430 --> 00:05:05,990
das können wir nicht mehr Nachbearbeiten

104
00:05:05,990 --> 00:05:08,030
und wir können es uns auch nicht mehr anders überlegen

105
00:05:08,030 --> 00:05:10,680
und sagen "hey, wir wollen das garnicht auf die Konsole schreiben",

106
00:05:10,680 --> 00:05:12,120
sondern lieber in eine Datei.

107
00:05:12,120 --> 00:05:14,300
Deswegen machen wir das jetzt ein bißchen anders:

108
00:05:14,300 --> 00:05:16,330
Und geben unsere Werte, die wir

109
00:05:16,330 --> 00:05:19,370
hier generiert haben zurück, statt sie auszugeben.

110
00:05:20,980 --> 00:05:23,840
Bei "visitZahl" ist das ganz einfach, wir sagen:

111
00:05:24,160 --> 00:05:27,000
"return context.zahl.getText());"

112
00:05:27,000 --> 00:05:29,000
statt dem was wir bis jetzt hatten.

113
00:05:30,680 --> 00:05:31,960
Hier oben würden wir den Wert

114
00:05:31,960 --> 00:05:34,700
von unseren Kindern, den wir haben

115
00:05:35,860 --> 00:05:39,470
plus einen Zeilenumbruch, plus

116
00:05:41,880 --> 00:05:45,420
den... äh... die rechte Zahl,

117
00:05:46,090 --> 00:05:48,290
plus wieder ein Zeilenumbruch

118
00:05:56,010 --> 00:05:59,040
und dann noch einmal plus "addition"

119
00:05:59,590 --> 00:06:00,670
zurückgeben.

120
00:06:01,000 --> 00:06:02,670
"return"

121
00:06:15,610 --> 00:06:17,360
Das Ganze hat jedoch ein Problem:

122
00:06:17,360 --> 00:06:19,450
Denn unsere "visitChildren"-Methode

123
00:06:19,450 --> 00:06:21,610
geht jetzt über mehrere Knoten hinweg,

124
00:06:21,610 --> 00:06:23,900
soll aber nur einen String zurückgeben

125
00:06:23,900 --> 00:06:24,680
und sie weiß nicht,

126
00:06:24,680 --> 00:06:27,700
wie man diese zwei Strings zusammenfügt.

127
00:06:27,700 --> 00:06:29,830
Außerdem haben wir auch noch sehr viele Knoten,

128
00:06:29,830 --> 00:06:32,720
die überhaupt keine visit-Methode haben

129
00:06:32,720 --> 00:06:34,850
und die generieren immer einfach

130
00:06:34,850 --> 00:06:37,740
"null" als Returnwert per Default.

131
00:06:37,740 --> 00:06:39,330
Wir müssen ANTLR jetzt beibringen,

132
00:06:39,330 --> 00:06:40,660
also beziehungsweise unserem

133
00:06:40,660 --> 00:06:43,080
von ANTLR generiertem Visitor jetzt beibringen,

134
00:06:43,080 --> 00:06:45,530
wie er solche Werte zusammenfügen kann.

135
00:06:46,300 --> 00:06:47,450
Das machen wir indem wir

136
00:06:47,450 --> 00:06:50,130
die aggregateResult-Methode überschreiben.

137
00:06:51,530 --> 00:06:53,540
In der Methode bekommen wir jetzt immer

138
00:06:53,540 --> 00:06:55,210
ein bereits vorhandenes Ergebnis

139
00:06:55,210 --> 00:06:58,100
und ein anderes Ergebnis was angefügt werden soll.

140
00:06:58,100 --> 00:07:00,100
Und beide können auch jeweils "null" sein.

141
00:07:00,100 --> 00:07:01,640
Beim ersten Aufruf

142
00:07:01,640 --> 00:07:03,040
ist "aggregate" "null"

143
00:07:03,040 --> 00:07:05,590
und es ist nur "nextResult" gesetzt,

144
00:07:05,590 --> 00:07:08,650
weil eben an nichts bisher bestehendes

145
00:07:08,650 --> 00:07:10,730
etwas angehängt werden soll

146
00:07:10,730 --> 00:07:13,660
und wenn beides gesetzt ist,

147
00:07:13,660 --> 00:07:15,000
dann haben wir zwei

148
00:07:15,000 --> 00:07:17,600
tatsächlich, die wir zusammensetzen wollen.

149
00:07:17,600 --> 00:07:19,810
Um das ganz einfach zu machen:

150
00:07:20,190 --> 00:07:21,320
Wir schauen einfach nach:

151
00:07:21,320 --> 00:07:23,940
Ist das "aggregate" null?

152
00:07:27,660 --> 00:07:31,760
Dann geben wir "nextResult" zurück.

153
00:07:34,400 --> 00:07:37,750
Wenn "nextResult" null ist,

154
00:07:43,170 --> 00:07:46,430
dann geben wir "aggregate" zurück

155
00:07:46,430 --> 00:07:50,160
und ansonsten ist offensichtlich beides nicht null

156
00:07:50,160 --> 00:07:54,220
und wir geben jetzt aggregate plus

157
00:07:54,220 --> 00:08:00,030
einen Zeilenumbruch plus "nextResult" zurück.

158
00:08:02,290 --> 00:08:03,520
Jetzt müssen wir das ganze auch

159
00:08:03,520 --> 00:08:05,170
noch irgendwo ausgeben,

160
00:08:05,170 --> 00:08:07,170
dafür gehen wir in unsere Main-Klasse,

161
00:08:07,170 --> 00:08:10,550
und diese visit-Methode gibt jetzt das aggregierte Ergebnis

162
00:08:10,550 --> 00:08:13,420
von allen unserer Aufrufe zurück.

163
00:08:14,980 --> 00:08:17,300
Und das geben wir aus.

164
00:08:21,050 --> 00:08:23,620
Ihr sehr: Das Ergebnis hat sich nicht verändert,

165
00:08:23,620 --> 00:08:26,450
das funktioniert also immernoch.

166
00:08:26,450 --> 00:08:28,110
Wir haben unseren Visitor jetzt

167
00:08:28,110 --> 00:08:30,110
mit Hilfe von Labeln lesbarer

168
00:08:30,110 --> 00:08:33,080
und mit Hilfe von Rückgabewerten vielfältiger gemacht.

169
00:08:33,080 --> 00:08:34,800
In den nächsten Videos werden wir

170
00:08:34,800 --> 00:08:37,060
tatsächlichen Instruktionscode generieren,

171
00:08:37,060 --> 00:08:39,170
ausführen und noch viel mehr.

172
00:08:39,220 --> 00:08:40,360
Lasst mir Daumen da!

173
00:08:40,360 --> 00:08:43,430
Schreibt mir Kommentare mit euren Anmerkungen und Fragen!

174
00:08:43,430 --> 00:08:45,510
Abboniert meinen Kanal um in Zukunft

175
00:08:45,510 --> 00:08:48,740
sofort informiert zu sein, wenn eine neue Folge kommt.

176
00:08:48,740 --> 00:08:50,200
Vielen Dank an Gadarol,

177
00:08:50,200 --> 00:08:53,120
der mir für die Aufnahmen sein Studio zur Verfügung stellt.

178
00:08:53,120 --> 00:08:54,790
Ich hoffe es hat euch Spaß gemacht,

179
00:08:54,790 --> 00:08:56,680
auf Wiedersehen und bis zum nächsten Mal,

180
00:08:56,680 --> 00:08:58,530
Schaltet wieder ein, wenn es wieder heißt:

181
00:08:58,530 --> 00:09:00,530
"Let's build a compiler".

