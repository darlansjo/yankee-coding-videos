1
00:00:00,000 --> 00:00:02,902
Willkommen zurück zu "Let's build a compiler".

2
00:00:02,900 --> 00:00:04,360
In der letzten Folgen haben wir uns

3
00:00:04,360 --> 00:00:06,933
mit einer aussagekräftigen Fehlermeldung beschäftigt  

4
00:00:06,930 --> 00:00:09,257
wenn der Programmierer eine Funktion aufruft

5
00:00:09,250 --> 00:00:10,813
die nicht definiert ist.

6
00:00:11,066 --> 00:00:12,533
In dieser Folge wollen wir auch noch

7
00:00:12,530 --> 00:00:14,604
eine ordentliche Fehlermeldung hinzufügen

8
00:00:14,600 --> 00:00:15,537
wenn der Programmierer

9
00:00:15,530 --> 00:00:18,008
zweimal die selbe Funktion definiert.

10
00:00:18,706 --> 00:00:20,840
Was ist denn eigentlich wenn wir

11
00:00:20,840 --> 00:00:22,497
zwei Funktionen haben,

12
00:00:22,490 --> 00:00:24,715
die zwar den gleichen Namen haben

13
00:00:24,710 --> 00:00:27,191
aber eine unterschiedliche Parameterliste?

14
00:00:27,982 --> 00:00:29,693
In Java ist sowas erlaubt

15
00:00:29,690 --> 00:00:32,857
und auch entsprechend im Bytecode von Java

16
00:00:34,208 --> 00:00:36,208
aber was ist denn mit unser Sprache?

17
00:00:36,200 --> 00:00:38,493
Wollen wir das in unser Sprache auch können?

18
00:00:38,490 --> 00:00:41,551
Und wie ist denn der Zustand da eigentlich aktuell?

19
00:00:41,551 --> 00:00:43,550
Deswegen baue hier gerade mal ein Beispiel

20
00:00:43,550 --> 00:00:45,200
um genau das zu testen

21
00:00:45,200 --> 00:00:46,817
und ich würde sagen: Ja,

22
00:00:46,810 --> 00:00:49,142
wir wollen das können... weil...

23
00:00:49,140 --> 00:00:50,328
wir können es eben.

24
00:00:50,715 --> 00:00:53,111
Dann kopieren wir uns diesen Test

25
00:00:53,110 --> 00:00:55,768
einmal in unseren CompileTest rein,

26
00:00:55,760 --> 00:00:59,022
erzeugen hier einen neuen Testfall

27
00:00:59,453 --> 00:01:02,964
und da müsste jetzt zuerst eine null,

28
00:01:02,960 --> 00:01:06,017
und dann die 42 ausgegeben werden.

29
00:01:08,475 --> 00:01:10,560
Dann führen wir den Test einmal aus

30
00:01:10,560 --> 00:01:11,706
und schauen nach

31
00:01:11,700 --> 00:01:13,640
ob der auch tatsächlich funktioniert.

32
00:01:13,640 --> 00:01:15,417
Und ja, es ist der Fall,

33
00:01:15,410 --> 00:01:16,955
also hier ist der Beweis:

34
00:01:16,950 --> 00:01:18,991
wir können tatsächlich zwei Funktionen

35
00:01:18,990 --> 00:01:20,586
in unserem Quelltext haben

36
00:01:20,580 --> 00:01:23,244
die sich nur durch die Parameter unterscheiden

37
00:01:23,240 --> 00:01:24,960
und nicht durch den Namen.

38
00:01:25,410 --> 00:01:29,137
Jetzt kommen wir zu dem eigentlichen Thema für diese Folge.

39
00:01:29,130 --> 00:01:32,302
Nämlich: Wir wollen dass wenn eine Funktion

40
00:01:32,300 --> 00:01:33,960
doppelt definiert wurde,

41
00:01:33,960 --> 00:01:36,804
dass dann eine aussagekräftige Exception fliegt.

42
00:01:36,906 --> 00:01:38,884
Also erstellen wir uns hier einen neuen Test

43
00:01:38,880 --> 00:01:40,702
und sagen in diesem Test

44
00:01:40,700 --> 00:01:44,097
soll eine FunctionAlreadyDefinedException fliegen

45
00:01:44,090 --> 00:01:48,666
nämlich wenn die Funktion doppelt deklariert wurde.

46
00:01:49,577 --> 00:01:52,302
Dann brauchen wir natürlich ein Codebeispiel

47
00:01:52,300 --> 00:01:55,155
welches auch zwei Funktionen enthält

48
00:01:55,150 --> 00:01:57,053
die eben entsprechend doppelt sind.

49
00:01:57,050 --> 00:01:58,937
Also erstellen wir hier eine Funktion

50
00:01:58,930 --> 00:02:02,942
und copy&paste macht das Leben leichter,

51
00:02:02,940 --> 00:02:04,386
fügen die zweite Funktion

52
00:02:04,380 --> 00:02:06,946
einfach in einer weiteren Zeile nochmal ein.

53
00:02:07,995 --> 00:02:11,093
Jetzt ist also in der zweiten Zeile

54
00:02:11,090 --> 00:02:13,293
an Position vier der Fehler

55
00:02:13,290 --> 00:02:15,355
und wir bekommen natürlich auch noch eine

56
00:02:15,350 --> 00:02:17,777
andere Fehlermeldung, nämlich:

57
00:02:17,770 --> 00:02:20,151
"function already defined".

58
00:02:22,111 --> 00:02:25,315
Die Funktion die already defined ist heißt "x"

59
00:02:25,310 --> 00:02:28,573
und dann kopieren wir uns hier noch einmal die Fehlermeldung

60
00:02:28,570 --> 00:02:30,333
weil die können wir gleich wieder brauchen

61
00:02:30,330 --> 00:02:32,760
wenn wir unsere Exception implementieren.

62
00:02:32,760 --> 00:02:34,115
Genau das werden wir jetzt tun.

63
00:02:34,110 --> 00:02:36,653
Natürlich in unserem source-Folder

64
00:02:37,168 --> 00:02:39,924
und bei unseren anderen Exceptions

65
00:02:39,920 --> 00:02:43,720
und auch diese Exception leitet wieder von CompileException ab.

66
00:02:49,133 --> 00:02:51,217
Dann geben wir unserem Token,

67
00:02:51,210 --> 00:02:54,168
der Variable "token" noch einen

68
00:02:54,160 --> 00:02:56,222
präziseren Namen

69
00:02:58,924 --> 00:03:02,368
und wir merken uns in unser Exception

70
00:03:02,360 --> 00:03:04,440
auch noch den Name der Funktion.

71
00:03:04,440 --> 00:03:06,608
Den kriegen wir aus dem Token raus,

72
00:03:06,600 --> 00:03:08,706
das ergänzen wir jetzt noch im Constructor

73
00:03:08,700 --> 00:03:12,053
dass diese Variable befüllt wird.

74
00:03:12,257 --> 00:03:14,035
Dann brauchen wir natürlich wie üblich noch

75
00:03:14,030 --> 00:03:16,160
unsere "getMessage"-Methode,

76
00:03:16,160 --> 00:03:19,084
also klauen wir uns mal als Vorlage

77
00:03:19,080 --> 00:03:21,320
eine von unseren Bisherigen

78
00:03:21,320 --> 00:03:23,217
und passen die entsprechend an,

79
00:03:23,210 --> 00:03:26,257
holen uns aus meiner Zwischenablagenhistory

80
00:03:26,250 --> 00:03:28,151
nochmal die Fehlermeldung raus

81
00:03:28,150 --> 00:03:30,000
die wir tatsächlich haben wollen

82
00:03:30,328 --> 00:03:33,773
und ersetzen hier das "varName" durch "functionName".

83
00:03:34,671 --> 00:03:38,035
Fertig ist die Implementierung der Exception.

84
00:03:38,346 --> 00:03:40,573
Dann können wir die speichern, schließen

85
00:03:40,570 --> 00:03:43,222
und unseren Test einmal ausführen.

86
00:03:44,071 --> 00:03:47,457
Wie wir sehen: Der Test ist also fehlgeschlagen,

87
00:03:47,450 --> 00:03:49,066
so wie erwartete,

88
00:03:49,060 --> 00:03:51,577
mit anderen Worten: Wir haben Arbeit.

89
00:03:52,760 --> 00:03:55,720
Die ganzen Funktionsdefinitionen  gehen wir in unserem

90
00:03:55,720 --> 00:03:57,848
FunctionDefinitionFinder durch,

91
00:03:57,840 --> 00:04:01,222
entsprechend müssen wir hier an dieser Stelle auch

92
00:04:01,220 --> 00:04:04,208
überprüfen ob eine Funktion bereits definiert wurde.

93
00:04:04,200 --> 00:04:05,333
Wir haben jetzt allerdings leider

94
00:04:05,330 --> 00:04:07,568
in dieser Methode "visitFunctionDefinition"

95
00:04:07,560 --> 00:04:09,680
nicht die Information darüber vorliegen

96
00:04:09,680 --> 00:04:12,688
welche Funktionen eigentlich vorher schon definiert sind,

97
00:04:12,680 --> 00:04:15,462
sondern wir haben nur einen Funktionsname,

98
00:04:15,460 --> 00:04:18,244
nämlich den Funktionsname der Funktion

99
00:04:18,240 --> 00:04:21,017
bei der unser Visitor gerade im Moment ist.

100
00:04:21,010 --> 00:04:22,564
Und erst im "aggregateResult"

101
00:04:22,560 --> 00:04:25,284
werden die ganze Methoden dann zusammengefügt.

102
00:04:25,608 --> 00:04:27,173
Wie können wir das Problem jetzt lösen,

103
00:04:27,170 --> 00:04:30,173
dass wir trotzdem erkennen können ob eine function doppelt ist?

104
00:04:30,170 --> 00:04:32,195
Da gibt es natürlich ganz viele Möglichkeiten:

105
00:04:32,190 --> 00:04:35,560
Wir könnten zum Beispiel auch "aggregateResult" anpassen,

106
00:04:35,560 --> 00:04:39,120
wir könnten auch hier oben in der... ähm...

107
00:04:39,120 --> 00:04:43,666
...im Visitor eine neue private Variable mit einem Set anlegen

108
00:04:43,660 --> 00:04:45,386
in der wir immer mitloggen

109
00:04:45,380 --> 00:04:48,497
was für Funktionen denn bereits definiert sind.

110
00:04:48,490 --> 00:04:50,688
Das hat allerdings einen Nachteil:

111
00:04:50,680 --> 00:04:53,657
Denn damit würde unser FunctionDefinitionFinder

112
00:04:53,650 --> 00:04:56,057
einen Status bekommen.

113
00:04:56,050 --> 00:04:59,400
Das heißt unser FunctionDefinitionFinder würde sich merken:

114
00:04:59,400 --> 00:05:01,533
Die folgenden Funktionen sind bereits definiert

115
00:05:01,530 --> 00:05:03,475
und es würde es nicht nur für einen Aufruf tun

116
00:05:03,470 --> 00:05:05,231
sondern auch für mehrere Aufrufe.

117
00:05:05,230 --> 00:05:07,671
Das heißt wenn jetzt der Benutzer sagt:

118
00:05:07,670 --> 00:05:10,773
Also der Benutzer dieser Klasse, das sind wir sagt:

119
00:05:10,770 --> 00:05:12,862
"new FunctionDefinitionFinder"

120
00:05:12,860 --> 00:05:16,053
und sich das in eine Variable speichert und dann

121
00:05:16,050 --> 00:05:18,333
die "visit"-Methode mehrmals aufruft,

122
00:05:18,330 --> 00:05:21,155
dann würden für beide "visit"-Methoden

123
00:05:21,150 --> 00:05:23,715
die "definedFunctions" erhalten bleiben.

124
00:05:23,710 --> 00:05:25,582
Wir müssen dann dem Benutzer sagen:

125
00:05:25,580 --> 00:05:26,728
Wenn er das nicht möchte,

126
00:05:26,720 --> 00:05:31,226
dass er die bisherigen definedFunctions "clearen" muss explizit.

127
00:05:31,220 --> 00:05:34,444
Das ist aufwendig und kann auch leicht vergessen werden,

128
00:05:34,440 --> 00:05:35,751
deswegen werden wir jetzt

129
00:05:35,750 --> 00:05:37,915
nach einer anderen Methode greifen.

130
00:05:37,910 --> 00:05:40,137
Wir sagen also, dass unser "FunctionDefinitionFinder"

131
00:05:40,130 --> 00:05:43,608
einfach garnicht mehr von dem DemoBaseVisitor ableitet,

132
00:05:43,600 --> 00:05:46,204
die definedFunctions, die verwerfen wir nochmal,

133
00:05:46,200 --> 00:05:46,933
werfen das hier weg

134
00:05:46,930 --> 00:05:49,284
und erstellen eine neue static-Methode,

135
00:05:49,280 --> 00:05:53,986
die ein Set zurückgeben soll mit all' unseren Funktionsnamen.

136
00:05:54,848 --> 00:05:59,497
Übergeben bekommt diese Methode jetzt unseren ParseTree

137
00:05:59,490 --> 00:06:01,688
und damit haben wir das Grundgerüst

138
00:06:01,680 --> 00:06:04,093
einer "stateless" Funktion

139
00:06:04,090 --> 00:06:08,142
und die soll jetzt nur bitte die Funktionen extrahieren.

140
00:06:08,140 --> 00:06:09,182
Wie kann sie das tun?

141
00:06:09,180 --> 00:06:12,048
Sie kann sich hier einfach eine neue Klasse erzeugen

142
00:06:12,040 --> 00:06:14,062
die von DemoBaseVisitor ableitet.

143
00:06:14,060 --> 00:06:16,226
Der Rückgabewert interessiert uns hier nicht,

144
00:06:16,220 --> 00:06:18,351
deswegen nehme ich hier jetzt einfach mal "Void"

145
00:06:18,350 --> 00:06:20,715
und dann in dieser anonymen Klasse

146
00:06:20,710 --> 00:06:24,822
die "visitFunctionDefiniton"-Methode überschreiben.

147
00:06:26,093 --> 00:06:28,600
Das Set was da rauskommen soll,

148
00:06:28,600 --> 00:06:31,008
das legen wir uns jetzt als lokale Variable

149
00:06:31,008 --> 00:06:33,000
in "findFunctions" an.

150
00:06:33,000 --> 00:06:36,755
Und dann lassen wir diesen Visitor auf unseren Tree los.

151
00:06:36,750 --> 00:06:38,422
Jetzt haben wir hier also ein Stück Code

152
00:06:38,420 --> 00:06:41,782
was für jede "functionDefinition" wieder aufgerufen wird

153
00:06:41,780 --> 00:06:43,324
aber es ist nicht von außen erreichbar,

154
00:06:43,320 --> 00:06:45,400
also der Benutzer kann jetzt nicht mehr

155
00:06:45,400 --> 00:06:48,191
fünf mal hintereinander "visit" aufrufen,

156
00:06:48,190 --> 00:06:51,217
denn er kann nur "findFunctions" aufrufen

157
00:06:51,210 --> 00:06:53,786
und "findFunctions" würde jedes mal wieder

158
00:06:53,780 --> 00:06:56,737
einen neuen DemoBaseVisitor erzeugen

159
00:06:56,730 --> 00:07:01,742
und deswegen ist diese Variante jetzt garantiert stateless

160
00:07:01,740 --> 00:07:04,817
und sie sollte den Endbenutzer weniger verwirren.

161
00:07:05,755 --> 00:07:08,946
Die "definedFunctions" erzeugen wir jetzthier  einfach

162
00:07:08,940 --> 00:07:13,004
in einer lokalen Variable "definedFunctions"

163
00:07:13,982 --> 00:07:16,311
und auf diese Variable können wir jetzt nämlich

164
00:07:16,310 --> 00:07:18,862
innerhalb unser anonymen Klasse zugreifen

165
00:07:18,860 --> 00:07:21,791
und diese ebenfalls auch einfach befüllen.

166
00:07:21,790 --> 00:07:23,337
Das machen wir jetzt so ganz ähnlich

167
00:07:23,330 --> 00:07:24,995
wie wir es da unten auch gemacht haben,

168
00:07:24,990 --> 00:07:27,951
deswegen kopieren wir uns hier uns den Code raus.

169
00:07:27,950 --> 00:07:29,893
Den ganzen anderen Code brauchen wir nicht mehr,

170
00:07:29,890 --> 00:07:32,804
auch "aggregateResult" brauchen wir nicht mehr.

171
00:07:33,650 --> 00:07:36,844
Unser FunctionDefinitionFinder wird dadurch erheblich

172
00:07:36,840 --> 00:07:39,262
viel leichter, nur dass wir das Ergebnis

173
00:07:39,260 --> 00:07:42,040
jetzt nicht zurückgeben in einer Collection,

174
00:07:42,040 --> 00:07:45,213
sondern wir werden einfach in den definedFunctions

175
00:07:45,210 --> 00:07:47,635
den aktuellen Funktionsname hinzufügen.

176
00:07:47,630 --> 00:07:49,573
Als Rückgabewert nehmen wir einfach "null",

177
00:07:49,570 --> 00:07:51,337
denn der interessiert uns nicht.

178
00:07:51,330 --> 00:07:54,213
Damit wir auch auf die Variable "definedFunctions"

179
00:07:54,210 --> 00:07:56,613
innerhalb einer anonymen Klasse zugreifen können

180
00:07:56,610 --> 00:07:58,377
müss diese "final" definiert sein,

181
00:07:58,370 --> 00:08:00,031
also machen wir das auch noch.

182
00:08:00,030 --> 00:08:02,022
Und am Ende wollen wir natürlich

183
00:08:02,020 --> 00:08:04,537
unsere "definedFunctions" auch noch zurückgeben.

184
00:08:08,311 --> 00:08:11,897
So, damit ist unser FunctionDefinitionFinder erheblich

185
00:08:11,890 --> 00:08:15,057
kürzer geworden, tut aber noch ungefähr das Gleiche,

186
00:08:15,050 --> 00:08:16,951
die API hat sich ein klein wenig verändert,

187
00:08:16,950 --> 00:08:20,560
deswegen müssen wir das jetzt in der Mainklasse noch anpassen,

188
00:08:20,560 --> 00:08:22,173
und hier "findFunctions" sagen

189
00:08:22,170 --> 00:08:25,542
statt eine neue Instanz zu erzeugen und "visit" zu sagen

190
00:08:25,875 --> 00:08:29,217
und ansonsten sollte das Verhalten aber das Gleiche sein.

191
00:08:29,210 --> 00:08:30,346
Das stellen wir jetzt mal sicher

192
00:08:30,340 --> 00:08:32,244
indem wir den Test ausführen

193
00:08:34,706 --> 00:08:36,395
und dann sehen wir tatsächlich:

194
00:08:36,390 --> 00:08:38,288
Die... neue...

195
00:08:38,280 --> 00:08:40,088
Der neue Test funktioniert natürlich immernoch nicht,

196
00:08:40,080 --> 00:08:41,942
aber alle alten Tests funktionieren noch,

197
00:08:41,940 --> 00:08:44,071
also haben wir dadurch nichts kaputt gemacht.

198
00:08:44,555 --> 00:08:48,328
Jetzt sollte es kein großes Problem mehr für uns darstellen

199
00:08:48,320 --> 00:08:50,448
auch den neuen Test zu befriedigen

200
00:08:50,702 --> 00:08:53,546
und wir prüfen jetzt hier

201
00:08:53,540 --> 00:08:55,071
in den "definedFunctions":

202
00:08:55,070 --> 00:08:57,697
Existiert da eine Funktion

203
00:08:57,690 --> 00:09:00,240
mit dem Name den wir gerade gefunden haben.

204
00:09:00,871 --> 00:09:03,773
Wenn ja: Dann ist das ein Fehler 

205
00:09:03,770 --> 00:09:05,906
und wir werfen unsere eben

206
00:09:05,900 --> 00:09:09,342
neu eingeführte FunctionAlreadyDefinedException.

207
00:09:10,675 --> 00:09:12,302
So, dann speichern wir mal das und gucken

208
00:09:12,300 --> 00:09:13,951
ob's das schon gewesen ist,

209
00:09:13,950 --> 00:09:16,533
führen unsere Tests wieder aus

210
00:09:17,217 --> 00:09:20,360
und: Nein, das ist es nicht gewesen!

211
00:09:20,360 --> 00:09:22,742
Also ja, unser neuer Test, der hat funktioniert:

212
00:09:22,740 --> 00:09:24,595
Es wird jetzt eine Exception geworfen,

213
00:09:24,590 --> 00:09:27,097
Aber leider, der Test der tested ob wir

214
00:09:27,090 --> 00:09:28,311
Funktionen mit dem gleichen Namen

215
00:09:28,310 --> 00:09:31,231
aber unterschiedlichen Parametern haben funktioniert nicht mehr.

216
00:09:31,230 --> 00:09:33,377
Das ist traurig, da haben wir also was kaputt gemacht,

217
00:09:33,370 --> 00:09:34,946
da müssen wir uns was anderes überlegen

218
00:09:34,940 --> 00:09:37,586
wenn wir diese Funktionalität erhalten wollen.

219
00:09:37,580 --> 00:09:38,635
Das bedeutet jetzt,

220
00:09:38,630 --> 00:09:41,004
dass hier unsere Funktion nicht mehr nurnoch

221
00:09:41,000 --> 00:09:43,635
durch den Funktionsname definiert werden,

222
00:09:43,630 --> 00:09:46,862
sondern auch durch die Signatur.

223
00:09:46,860 --> 00:09:49,568
Hier in der contains-Methode überprüfen wir jetzt

224
00:09:49,560 --> 00:09:53,124
ob wir bereits eine Methode mit einem Name definiert haben,

225
00:09:53,120 --> 00:09:54,915
aber das ist eben nicht genug,

226
00:09:54,910 --> 00:09:58,471
wir müssen auch überprüfen ob die Parameter übereinstimmen.

227
00:09:58,808 --> 00:10:00,484
Damit wir das einfacher machen können,

228
00:10:00,480 --> 00:10:03,800
weil uns ein Set diese Möglichkeiten nicht so leicht bietet

229
00:10:03,800 --> 00:10:06,408
erstellen wir uns jetzt eine neue Klasse "FunctionList"

230
00:10:06,400 --> 00:10:10,697
die die entsprechenden Methoden die wir brauchen hat.

231
00:10:11,106 --> 00:10:13,902
Wir haben eine Methode die überprüft:

232
00:10:13,900 --> 00:10:15,577
wurde eine Funktion

233
00:10:15,570 --> 00:10:17,920
mit einem bestimmten Funktionsname

234
00:10:17,920 --> 00:10:20,973
und einer bestimmten Anzahl Parameter bereits definiert

235
00:10:21,284 --> 00:10:24,075
und natürlich müssen wir dieser Liste auch sagen können:

236
00:10:24,070 --> 00:10:26,306
Definiere bitte jetzt eine Funktion

237
00:10:26,300 --> 00:10:28,631
mit folgendem Funktionsname

238
00:10:28,630 --> 00:10:30,875
und folgender Parameteranzahl.

239
00:10:39,257 --> 00:10:41,368
Jetzt brauchen wir natürlich den Parametercount,

240
00:10:41,360 --> 00:10:43,706
den kriegen wir aus unserem Kontext raus,

241
00:10:43,700 --> 00:10:45,484
das hatten wir ja schonmal

242
00:10:45,480 --> 00:10:47,435
und jetzt können wir

243
00:10:47,430 --> 00:10:50,413
ins unserer "definedFunctions"-Liste nachgucken:

244
00:10:50,410 --> 00:10:53,666
Wurde diese Funktion bereits einmal definiert?

245
00:10:53,660 --> 00:10:55,351
Und wenn nicht, dann definieren wir sie

246
00:10:55,350 --> 00:10:57,662
ansonsten werfen wir einen Fehler.

247
00:10:58,093 --> 00:11:01,422
Es kommt natürlich aus unserem FunctionDefinitionFinder

248
00:11:01,420 --> 00:11:03,280
ein anderer Rückgabewert raus,

249
00:11:03,280 --> 00:11:04,640
deswegen müssen wir auch

250
00:11:04,640 --> 00:11:06,933
unsere Mainklasse wieder anpassen,

251
00:11:06,930 --> 00:11:08,493
genau wie den Visitor

252
00:11:08,490 --> 00:11:11,844
denn auch der muss jetzt mit der FunctionList arbeiten.

253
00:11:15,715 --> 00:11:18,471
Es kommen jetzt keine "null"-Werte mehr

254
00:11:18,470 --> 00:11:21,657
aus unserem FunctionDefinitionFinder raus,

255
00:11:21,650 --> 00:11:24,631
deswegen können wir jetzt hier auch beruhigt einfach sagen:

256
00:11:24,630 --> 00:11:26,146
Das soll bitte nicht passieren

257
00:11:26,140 --> 00:11:28,337
und wenn das "null" ist, dann ist das definitiv

258
00:11:28,330 --> 00:11:30,151
ein Fehler des Programmierers,

259
00:11:30,150 --> 00:11:32,528
damit machen wir uns das Leben ein bißchen leichter.

260
00:11:34,520 --> 00:11:38,017
So, die "number of parameters", die holen wir uns von

261
00:11:38,017 --> 00:11:40,010
hier unten nach hier oben

262
00:11:40,010 --> 00:11:42,675
und dann müssen wir unsere "contains"-Anweisung

263
00:11:42,670 --> 00:11:44,493
hier nur geringfügig anpassen

264
00:11:44,490 --> 00:11:47,417
und das "number of parameters" noch hinzufügen.

265
00:12:00,271 --> 00:12:02,888
Jetzt müssen wir natürlich in unser FunctionList

266
00:12:02,880 --> 00:12:06,031
die fehlenden Funktionen hier noch implementieren.

267
00:12:06,240 --> 00:12:09,484
Wir erzeugen uns also erstmal eine kleine Hilfsklasse

268
00:12:09,480 --> 00:12:11,617
die nämlich den "function name"

269
00:12:11,610 --> 00:12:13,888
und den "parameter count" speichert.

270
00:12:14,328 --> 00:12:16,160
Die Klasse ist also wirklich ganz einfach,

271
00:12:16,160 --> 00:12:19,120
wie verwenden sie wie ein "struct" in C

272
00:12:19,120 --> 00:12:21,484
oder ein "record" in Pascal,

273
00:12:21,480 --> 00:12:25,502
einfach nur eine Klasse mit den zwei Feldern

274
00:12:25,500 --> 00:12:27,911
damit wir in eine Liste gleich

275
00:12:27,910 --> 00:12:30,364
zwei Felder auf Mal speichern können.

276
00:12:30,360 --> 00:12:32,546
Dann erzeugen wir uns hier eine Collection

277
00:12:32,540 --> 00:12:34,897
mit unseren "FunctionDefintion"s

278
00:12:34,890 --> 00:12:36,786
und da machen wir es uns jetzt ganz einfach

279
00:12:36,780 --> 00:12:39,240
und nehmen dafür einfach eine ArrayList.

280
00:12:39,693 --> 00:12:41,040
Um zu überprüfen

281
00:12:41,040 --> 00:12:44,080
ob eine bestimmte Funktion mit einem

282
00:12:44,080 --> 00:12:45,920
bestimmen Funktionsname und

283
00:12:45,920 --> 00:12:48,471
einem Parametercount bereits definiert ist

284
00:12:48,470 --> 00:12:51,377
iterieren wir unsere "Definitions" einfach durch

285
00:12:52,124 --> 00:12:53,982
und schauen bei jeder einzelnen nach

286
00:12:53,980 --> 00:12:57,008
ob "function name" und "parameter count" passen.

287
00:13:01,422 --> 00:13:03,497
Wenn dies der Fall ist, dann

288
00:13:03,490 --> 00:13:05,382
ist offensichtlich das Ergebnis wahr,

289
00:13:05,380 --> 00:13:06,604
also sagen wir einfach "return true",

290
00:13:06,600 --> 00:13:07,400
können hier aufhöhren,

291
00:13:07,400 --> 00:13:09,182
brauchen auch die Schleife nicht weiterzuführen.

292
00:13:09,180 --> 00:13:11,302
Wenn wir das Ende der Funktion erreichen

293
00:13:11,300 --> 00:13:12,697
ohne jemals etwas gefunden zu haben

294
00:13:12,697 --> 00:13:14,690
ist das Ergebnis natürlich false.

295
00:13:15,506 --> 00:13:17,728
Dann brauchen wir noch die "add"-Funktion.

296
00:13:17,720 --> 00:13:19,702
Sagen wir hier unten noch in der "FunctionDefinition"

297
00:13:19,700 --> 00:13:22,604
dass wir unsere Parameter als "final" deklarieren

298
00:13:22,955 --> 00:13:25,391
dann haben wir eine "immutable"-Class

299
00:13:25,390 --> 00:13:28,400
und definieren einen Constructor,

300
00:13:28,400 --> 00:13:30,657
der die Parameter setzt.

301
00:13:31,413 --> 00:13:33,253
Der kann natürlich auch "private" sein,

302
00:13:33,250 --> 00:13:34,831
es ist eh nur eine private-Class,

303
00:13:34,830 --> 00:13:36,995
die nur dieser einen Klasse bekannt ist.

304
00:13:37,386 --> 00:13:40,364
Und wenn jetzt die "add"-Methode aufgerufen wird

305
00:13:40,360 --> 00:13:42,515
erzeugen wir einfach eine neue "FunctionDefinition"

306
00:13:42,510 --> 00:13:44,400
mit dem entsprechenden Funktionsname

307
00:13:44,400 --> 00:13:46,400
und der Anzahl Parameter.

308
00:13:49,648 --> 00:13:51,546
Jetzt führen wir mal unsere Tests wieder aus

309
00:13:51,540 --> 00:13:53,555
und gucken ob das schon gereicht hat,

310
00:13:53,550 --> 00:13:55,302
dafür dass wir Erfolg haben.

311
00:13:55,300 --> 00:13:56,920
Und ja: Es hat geklappt,

312
00:13:56,920 --> 00:13:58,920
alle unsere Tests laufen durch,

313
00:13:58,920 --> 00:14:01,524
also können wir jetzt

314
00:14:01,520 --> 00:14:03,862
ordentliche Exceptions werfen

315
00:14:03,860 --> 00:14:06,880
wenn der Programmierer Mist gebaut hat

316
00:14:06,880 --> 00:14:11,924
und zwei Funktionen mit der gleichen Signatur definiert hat.

317
00:14:12,684 --> 00:14:14,315
In dieser Folge haben wir gelernt

318
00:14:14,310 --> 00:14:16,408
wie wir dem Programmierer eine aussagekräftige

319
00:14:16,400 --> 00:14:17,911
Fehlermeldung um die Ohren hauen

320
00:14:17,910 --> 00:14:20,253
wenn er versucht eine Funktion mit gleichem Name

321
00:14:20,250 --> 00:14:23,248
und gleichen Parametern zweimal zu definieren.

322
00:14:23,240 --> 00:14:24,542
Außerdem haben wir gelernt

323
00:14:24,540 --> 00:14:26,680
wie wir bei der Überprüfung nach gleichen Funktionen

324
00:14:26,680 --> 00:14:28,826
die Parameter miteinbeziehen.

325
00:14:29,844 --> 00:14:31,568
Damit haben wir uns insgesamt

326
00:14:31,560 --> 00:14:34,337
in den letzten Folgen viel mit Fehlerbehandlung beschäftigt.

327
00:14:34,330 --> 00:14:36,324
Dabei gibt es auch noch viele Features

328
00:14:36,320 --> 00:14:37,631
die unser Sprache fehlen.

329
00:14:37,630 --> 00:14:39,568
Zum Beispiel Bedingungen und Schleifen.

330
00:14:39,560 --> 00:14:42,604
Wie wir dies implementieren seht ihr in den nächsten Folgen.

331
00:14:42,600 --> 00:14:44,288
Hat euch das Video gefallen?

332
00:14:44,280 --> 00:14:46,017
Habt ihr Fragen oder Wünsche?

333
00:14:46,010 --> 00:14:47,062
Lasst mit Daumen da

334
00:14:47,060 --> 00:14:48,355
uind schreibt mit Kommentare.

335
00:14:48,350 --> 00:14:49,533
Abonniert meinen Kanal,

336
00:14:49,530 --> 00:14:51,804
damit ihr keine neue Folge verpasst.

337
00:14:51,800 --> 00:14:53,035
Vielen Dank an Gadarol

338
00:14:53,030 --> 00:14:55,471
der mir für die Aufnahmen sein Studio zur Verfügung stellt

339
00:14:55,470 --> 00:14:57,937
und euch vielen Dank für eure Aufmerksamkeit.

340
00:14:57,930 --> 00:14:59,168
Bis zum nächsten Mal,

341
00:14:59,160 --> 00:15:00,173
wenn es wieder heißt:

342
00:15:00,173 --> 00:15:02,170
"Let's build a compiler".

