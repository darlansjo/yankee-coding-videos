1
00:00:00,000 --> 00:00:02,780
Willkommen zurück zu "Let's build a compiler".

2
00:00:02,780 --> 00:00:05,590
In dieser Folge werden wir erstmals Code generieren,

3
00:00:05,590 --> 00:00:07,430
den wir auch wirklich ausführen können.

4
00:00:07,430 --> 00:00:09,070
Mein Name ist yankee,

5
00:00:09,070 --> 00:00:12,080
ich wünsche euch viel Spaß und: Macht mit!

6
00:00:12,380 --> 00:00:14,980
All der generierte Bytecode ist natürlich langweilig,

7
00:00:14,980 --> 00:00:16,660
wenn wir ihn nicht ausführen können.

8
00:00:16,660 --> 00:00:19,060
Deswegen zeige ich euch als Nächstes

9
00:00:19,060 --> 00:00:20,660
wie wir selbiges tun.

10
00:00:20,660 --> 00:00:21,950
Dafür brauchen wir Jasmin,

11
00:00:21,950 --> 00:00:25,320
das könnt ihr euch auf jasmin.sourceforge.net herunterladen,

12
00:00:25,320 --> 00:00:27,320
geht dann hier auf "Download",

13
00:00:28,170 --> 00:00:29,890
dann hier auf das weitere "Download",

14
00:00:29,890 --> 00:00:31,310
dann bekommt ihr eine Zip-Datei,

15
00:00:31,310 --> 00:00:33,470
ich hab sie hier schon heruntergeladen,

16
00:00:33,470 --> 00:00:36,460
in der Zip-Datei findet ihr ein "jasmin.jar",

17
00:00:36,460 --> 00:00:39,610
das ist die einzige Datei aus diesem Zip, die ihr braucht,

18
00:00:39,610 --> 00:00:43,850
die extrahiert ihr an einen Ort den ihr euch merken könnt,

19
00:00:46,170 --> 00:00:49,960
das wäre bei mir hier im Verzeichnis "lib"

20
00:00:49,960 --> 00:00:53,090
in "compiler" habe ich das neben mein antlr.jar gelegt

21
00:00:53,090 --> 00:00:56,120
und dann können wir eine Beispieldatei erstellen,

22
00:00:56,120 --> 00:00:58,080
mit Instruktionen die wir kompilieren

23
00:00:58,080 --> 00:00:59,450
und ausführen können.

24
00:00:59,450 --> 00:01:01,670
Dafür erstelle ich jetzt eine neue Textdatei,

25
00:01:01,670 --> 00:01:05,150
die nenne ich jetzt "HelloWorld.j"

26
00:01:06,690 --> 00:01:08,880
und in dieser Datei

27
00:01:08,880 --> 00:01:12,300
deklarieren wir jetzt eine Javaklasse,

28
00:01:14,760 --> 00:01:17,010
die HelloWorld heißt

29
00:01:17,790 --> 00:01:25,870
und die von java.lang.Object ableitet

30
00:01:26,490 --> 00:01:29,830
und die eine Methode hat,

31
00:01:31,880 --> 00:01:35,500
die public ist, static ist, main heißt,

32
00:01:35,500 --> 00:01:38,420
als Argumente einen Array

33
00:01:38,420 --> 00:01:39,840
vom Typ Object,

34
00:01:39,840 --> 00:01:46,210
vom Typ java.lang.String

35
00:01:46,820 --> 00:01:50,880
bekommt, die keine Returntyp hat,

36
00:01:54,190 --> 00:01:58,610
die ein Stacklimit von 100 hat

37
00:01:58,610 --> 00:02:01,080
und die ein limit für

38
00:02:01,080 --> 00:02:04,930
unsere lokale Variablentabelle von 100 hat.

39
00:02:07,630 --> 00:02:09,800
Hier ist dann die Methode zu Ende.

40
00:02:10,880 --> 00:02:12,450
Das können wir noch ein bißchen einrücken,

41
00:02:12,450 --> 00:02:14,050
dann können wir es besser lesen.

42
00:02:14,730 --> 00:02:16,150
Die meisten Elemente hiervon

43
00:02:16,150 --> 00:02:17,470
werde ich später nochmal erklären,

44
00:02:17,470 --> 00:02:18,850
also genau wie das Format hier

45
00:02:18,850 --> 00:02:20,810
von den Argumenten aussieht,

46
00:02:20,810 --> 00:02:22,920
was wir alles noch für Typen haben,

47
00:02:22,920 --> 00:02:24,150
was wir hier mit dem "limit"

48
00:02:24,150 --> 00:02:25,780
später alles noch anstellen können,

49
00:02:25,780 --> 00:02:27,230
das wird alles noch erklärt,

50
00:02:27,230 --> 00:02:29,820
aber für's Erste reicht es erstmal, dass wir hier

51
00:02:29,820 --> 00:02:31,210
etwas ausführen können.

52
00:02:32,260 --> 00:02:34,100
Um jetzt einfach mal

53
00:02:34,310 --> 00:02:37,170
42 auszugeben auf der Konsole,

54
00:02:37,170 --> 00:02:39,100
würden wir in Java schreiben,

55
00:02:39,100 --> 00:02:40,710
so mal als Beispiel hier rein:

56
00:02:40,710 --> 00:02:46,160
"System.out.println(42);".

57
00:02:47,050 --> 00:02:49,620
Wenn wir das in Jasmin ausdrücken wollen,

58
00:02:49,620 --> 00:02:51,910
dann brauchen wir einmal das Objekt,

59
00:02:51,910 --> 00:02:54,750
was sich hier hinter "System.out" verbirgt,

60
00:02:54,750 --> 00:02:56,520
das müssen wir auf den Stack legen,

61
00:02:56,520 --> 00:02:59,130
Das tun wir in dem wir

62
00:02:59,130 --> 00:03:00,740
getstatic

63
00:03:02,150 --> 00:03:09,060
java/lang/System/out aufrufen,

64
00:03:09,450 --> 00:03:13,460
also "System/out" ist hier dieses "System.out",

65
00:03:13,460 --> 00:03:16,760
das "java/lang" ist normalerweise nicht nötig

66
00:03:16,760 --> 00:03:18,910
in Java dass ihr das angibt, aber das ist der

67
00:03:18,910 --> 00:03:22,640
voll Packagename von dieser Klasse, von der Klasse "System",

68
00:03:23,140 --> 00:03:27,010
den Typ, den dieses Objekt hat müssen wir hier auch angeben,

69
00:03:27,010 --> 00:03:29,420
das machen wir in dem wir schreiben:

70
00:03:29,420 --> 00:03:32,300
"L" für "es ist ein Objekt" und

71
00:03:32,300 --> 00:03:35,360
dann der "fully qualified classname"

72
00:03:35,610 --> 00:03:43,140
das ist ein "java/io/PrintStream",

73
00:03:49,210 --> 00:03:51,010
dann brauchen wir die Konstante,

74
00:03:51,010 --> 00:03:53,640
hier die 42, die wir auch auf den Stack legen wollen,

75
00:03:53,640 --> 00:03:55,510
damit wir sie ausgeben können,

76
00:03:56,380 --> 00:03:59,320
dafür nehmen wir einfach "ldc 42"

77
00:04:00,760 --> 00:04:04,040
und jetzt müssen wir die Methode "println" noch aufrufen.

78
00:04:04,040 --> 00:04:05,180
Das geht ganz einfach:

79
00:04:05,180 --> 00:04:08,900
Mit "invokevirtual",

80
00:04:10,350 --> 00:04:13,650
und dann müssen wir leider wieder den kompletten Pfad angeben

81
00:04:13,650 --> 00:04:16,320
von der Methode die wir aufrufen wollen,

82
00:04:16,320 --> 00:04:20,200
das ist nämlich in java/io/PrintStream

83
00:04:21,080 --> 00:04:24,200
die Methode "println",

84
00:04:24,200 --> 00:04:27,810
die als Argument ein Integer bekommt

85
00:04:28,500 --> 00:04:31,140
und kein Returnwert hat.

86
00:04:31,860 --> 00:04:34,070
Dann brauchen wir noch ein "return"

87
00:04:34,070 --> 00:04:36,470
um anzuzeigen dass die Methode zu Ende ist,

88
00:04:36,470 --> 00:04:37,810
das braucht ihr in Java nicht,

89
00:04:37,810 --> 00:04:39,370
wenn's eine void-Methode ist,

90
00:04:39,370 --> 00:04:41,680
aber hier im Instruktionscode müssen wir

91
00:04:41,680 --> 00:04:43,610
das "return" immer angeben.

92
00:04:43,930 --> 00:04:46,160
Die Leerzeilen nur zur Lesbarkeit

93
00:04:46,960 --> 00:04:48,400
und dann können wir die Datei

94
00:04:48,400 --> 00:04:51,150
einmal zu einer Javaklasse kompilieren

95
00:04:51,150 --> 00:04:52,470
und ausführen.

96
00:04:56,170 --> 00:04:58,290
Dazu rufen wir einfach

97
00:04:58,290 --> 00:05:03,210
"java -jar lib/jasmin.jar",

98
00:05:03,210 --> 00:05:04,600
weil es bei mir eben da liegt,

99
00:05:04,600 --> 00:05:05,580
wenn's bei euch woander liegt

100
00:05:05,580 --> 00:05:07,370
müsst ihr eben einen anderen Pfad angeben

101
00:05:07,370 --> 00:05:10,600
und übergeben unsere "HelloWorld.j"-Datei.

102
00:05:11,100 --> 00:05:14,550
Dabei wird eine HelloWorld.class generiert,

103
00:05:14,550 --> 00:05:16,080
wie ihr seht haben wir jetzt hier

104
00:05:16,080 --> 00:05:17,930
die .j-Datei und die .class-Datei

105
00:05:17,930 --> 00:05:20,690
und die .class-Datei können wir jetzt einfach aufrufen

106
00:05:20,690 --> 00:05:24,990
indem wir hier "java HelloWorld" ohne das ".class" angeben.

107
00:05:25,180 --> 00:05:28,300
Und wie ihr seht: Wir erhalten die 42.

108
00:05:29,260 --> 00:05:30,980
Wie können wir solche Klassen jetzt also

109
00:05:30,980 --> 00:05:32,980
als Nächstes automatisch generieren?

110
00:05:32,980 --> 00:05:35,300
Dafür nochmal kurz einen Blick zurück

111
00:05:35,300 --> 00:05:38,000
auf die ".j"-Datei, die ich erstellt hab':

112
00:05:39,420 --> 00:05:43,050
Hier seht ihr, dass wir zuerst

113
00:05:43,050 --> 00:05:45,010
das Objekt auf den Stack gelegt haben

114
00:05:45,010 --> 00:05:47,140
auf dem wir die Methode aufrufen wollen,

115
00:05:47,140 --> 00:05:49,150
wir wollen nämlich auf das Objekt,

116
00:05:49,150 --> 00:05:50,600
was hier zurückgekommen ist

117
00:05:50,600 --> 00:05:52,600
(ich mach's mal ein bißchen kleiner damit ihr alles seht),

118
00:05:52,970 --> 00:05:54,980
die Methode "println" aufrufen.

119
00:05:55,620 --> 00:05:58,540
Diese Instruktion, das "invokevirtual",

120
00:05:58,540 --> 00:06:02,470
nimmt so viele Elemente vom Stack,

121
00:06:02,470 --> 00:06:04,700
wie es Parameter hat

122
00:06:04,700 --> 00:06:06,830
plus noch eins für das Objekt

123
00:06:06,830 --> 00:06:08,990
auf dem die Methode aufgerufen wird.

124
00:06:09,390 --> 00:06:11,610
Das heißt: Die Methode hier kriegt

125
00:06:11,610 --> 00:06:13,610
einen Parameter übergeben,

126
00:06:13,610 --> 00:06:16,200
den nimmt es sich vom Stack, das ist die 42,

127
00:06:16,200 --> 00:06:19,890
und dann nimmt es sich noch das nächste Element vom Stack,

128
00:06:19,890 --> 00:06:23,360
was dann das Objekt ist auf dem die Methode "println"

129
00:06:23,360 --> 00:06:24,860
hier aufgerufen wird.

130
00:06:24,860 --> 00:06:27,580
Das ist dann unser "java/lang/System/out".

131
00:06:28,050 --> 00:06:32,080
Praktisch für das was wir bis jetzt gemacht haben bedeutet das:

132
00:06:32,080 --> 00:06:35,150
Wir können einfach statt dem "ldc 42"

133
00:06:35,150 --> 00:06:38,570
den von uns generierten Code einfügen

134
00:06:38,570 --> 00:06:41,120
und würden dann am Ende unser Ergebnis

135
00:06:41,120 --> 00:06:44,300
von unseren bis jetzigen einfach Additionen auf dem Stack liegen haben

136
00:06:44,300 --> 00:06:48,130
und könnten dieses Ergebnis dann einfach ausgeben.

137
00:06:48,130 --> 00:06:50,300
Und das wollen wir jetzt als nächstes tun.

138
00:06:51,980 --> 00:06:54,360
Dafür müssen wir jetzt unseren Compiler hier

139
00:06:54,360 --> 00:06:56,040
so anpassen, dass er nicht nur einfach

140
00:06:56,040 --> 00:06:57,370
die Instruktionen ausgibt,

141
00:06:57,370 --> 00:06:58,770
also nochmal zur Erinnerung:

142
00:06:58,770 --> 00:07:02,110
Im Moment sieht die Ausgabe unseres Programms so aus:

143
00:07:02,110 --> 00:07:05,140
... sondern es muss der vollständige

144
00:07:05,140 --> 00:07:08,310
äh, das vollständige Skelett was Jasmin von uns verlangt

145
00:07:08,310 --> 00:07:09,900
auch noch drumherum sein

146
00:07:09,900 --> 00:07:11,980
und das hier soll jetzt

147
00:07:11,980 --> 00:07:15,870
in dieser Datei nur statt dem "ldc 42" drinstehen.

148
00:07:16,290 --> 00:07:17,180
Was machen wir also?

149
00:07:17,180 --> 00:07:19,730
Wir kopieren uns einfach diese ganze Datei

150
00:07:19,730 --> 00:07:21,510
einmal in die Zwischenablage,

151
00:07:21,970 --> 00:07:24,710
dann erstellen wir uns eine kleine Hilfsmethode,

152
00:07:32,060 --> 00:07:35,950
die kriegt dann unsere Instruktionen übergeben,

153
00:07:43,170 --> 00:07:44,990
wir nehmen dann hier einfach nur

154
00:07:44,990 --> 00:07:50,270
"return" und pasten hier unsere ganze Jasmindatei rein,

155
00:07:50,270 --> 00:07:51,670
unsere Beispieldatei.

156
00:07:52,410 --> 00:07:54,130
Dann werdet ihr vielleicht sagen:

157
00:07:54,130 --> 00:07:55,600
Hey, wie hast du das gemacht,

158
00:07:55,600 --> 00:07:57,520
dass man das hier einfach so reinpasten kann,

159
00:07:57,520 --> 00:07:59,110
mit den Zeilenumbrüchen,

160
00:07:59,110 --> 00:08:00,210
wenn ihr das auch machen wollt,

161
00:08:00,210 --> 00:08:03,300
dann müsst ihr in eclipse hier auf "Window"->"Preferences" gehen

162
00:08:03,300 --> 00:08:05,940
und unter "Java"->"Editor"->"Typing"

163
00:08:05,940 --> 00:08:09,360
"Escape text when pasting into a string literal" aktivieren.

164
00:08:10,830 --> 00:08:12,070
Jetzt wollen wir hier,

165
00:08:12,070 --> 00:08:14,260
statt dem "ldc 42",

166
00:08:14,770 --> 00:08:17,190
unsere Instruktionen ausgeben

167
00:08:19,970 --> 00:08:22,710
und schon ist unsere kleine Hilfsmethode fertig

168
00:08:23,230 --> 00:08:27,310
und hier werden wir entsprechend bevor der Ausgabe

169
00:08:27,310 --> 00:08:32,420
noch ein "createJasminFile" zwischenhängen.

170
00:08:34,970 --> 00:08:37,560
Jetzt führ' ich unseren Compiler wieder aus

171
00:08:38,430 --> 00:08:40,060
und wie ihr seht:

172
00:08:41,340 --> 00:08:44,390
haben wir jetzt unser Jasminbeschreibung

173
00:08:44,390 --> 00:08:47,690
und hier sind unsere generierten Instruktionen.

174
00:08:47,690 --> 00:08:50,210
Die Instruktionen sind jetzt natürlich noch nicht ganz korrekt,

175
00:08:50,210 --> 00:08:53,310
das müssen wir auch noch eben schnell richten,

176
00:08:53,640 --> 00:08:55,870
dafür gehen wir in unseren Visitor

177
00:08:56,520 --> 00:08:59,040
und nehmen hier statt "addition"

178
00:08:59,040 --> 00:09:02,780
"iadd", weil dass ist unsere korrekte Instruktion zum addieren

179
00:09:03,290 --> 00:09:06,130
und statt einfach nur der Zahl

180
00:09:06,130 --> 00:09:09,100
muss hier auch noch ein "ldc" vor

181
00:09:09,880 --> 00:09:11,050
(für "load constant").

182
00:09:12,790 --> 00:09:15,940
Dann führen wir das ganze nochmal aus

183
00:09:18,250 --> 00:09:20,710
und wie ihr seht, hier habe ich das "ldc" vergessen,

184
00:09:20,710 --> 00:09:23,130
nur in dem Fall ist es berücksichtigt,

185
00:09:24,450 --> 00:09:26,760
das müssen wir auch noch einbauen

186
00:09:26,760 --> 00:09:29,540
und das ist hier,

187
00:09:37,880 --> 00:09:39,510
dann führen wir es wieder aus

188
00:09:40,720 --> 00:09:43,790
und schon haben wir eine Jasminbeschreibung,

189
00:09:43,790 --> 00:09:45,580
die erstmal ganz OK aussieht.

190
00:09:45,580 --> 00:09:49,070
Ja, die Einrückung hier ist nicht unbedingt schön,

191
00:09:49,070 --> 00:09:51,070
aber das stört uns nicht weiter.

192
00:09:51,480 --> 00:09:53,400
Dann kopieren wir uns als Nächstes

193
00:09:53,400 --> 00:09:57,320
unsere generierte Jasmin-Klassenbeschreibung,

194
00:09:58,050 --> 00:10:00,350
speichern die in eine Textdatei,

195
00:10:00,350 --> 00:10:02,140
ich überschreib' hier einfach

196
00:10:02,140 --> 00:10:04,860
unser bisheriges HelloWorld-Example,

197
00:10:06,810 --> 00:10:09,130
dann übersetzen wir das wieder

198
00:10:09,130 --> 00:10:11,460
zu einer Javaklasse,

199
00:10:14,900 --> 00:10:17,360
und dann führen wir die Klasse aus.

200
00:10:20,280 --> 00:10:21,970
Herausgekommen ist 56,

201
00:10:21,970 --> 00:10:24,970
jetzt wollen wir noch einmal überprüfen ob das wirklich stimmt,

202
00:10:25,770 --> 00:10:29,510
dafür schauen wir hier in den Code den wir hatten

203
00:10:29,510 --> 00:10:30,420
und da haben wir:

204
00:10:30,420 --> 00:10:33,350
"3+42", das sind 45,

205
00:10:33,600 --> 00:10:37,050
ähm... doch... 45, plus 5

206
00:10:37,050 --> 00:10:37,960
sind wir bei 50,

207
00:10:37,960 --> 00:10:40,480
plus 6 sind wir bei 56.

208
00:10:41,020 --> 00:10:42,480
Also hat es gestimmt.

209
00:10:43,420 --> 00:10:45,340
Hier ist nochmal der Prozess im Überblick,

210
00:10:45,340 --> 00:10:46,570
den wir jetzt entwickelt haben

211
00:10:46,570 --> 00:10:49,260
und in den nächsten Videos verfeinern werden.

212
00:10:49,260 --> 00:10:51,960
Wir haben angefangen mit einer Grammatik,

213
00:10:51,960 --> 00:10:53,960
unser Demo-Grammatik.

214
00:10:54,300 --> 00:10:56,590
Aus dieser Grammatik haben wir von ANTLR

215
00:10:56,590 --> 00:10:58,900
einen Lexer und einen Parser generieren lassen,

216
00:10:59,660 --> 00:11:02,660
dann haben wir diesen Lexer und Parser

217
00:11:02,660 --> 00:11:05,540
mit einem Inputprogramm gefüttert,

218
00:11:05,870 --> 00:11:08,920
wo dann ein Syntaxbaum herausgekommen ist.

219
00:11:09,420 --> 00:11:11,560
Aus diesem Baum wiederum haben wir mit

220
00:11:11,560 --> 00:11:14,910
Hilfe eines Visitors Instruktionscode generiert.

221
00:11:16,550 --> 00:11:18,560
Dann haben wir aus diesem Instruktionscode

222
00:11:18,560 --> 00:11:22,640
mit Hilfe von Jasmin eine Java-.class-Datei erstellt.

223
00:11:23,290 --> 00:11:27,530
Und schließlich haben wir diese Datei mit der JVM ausgeführt

224
00:11:27,530 --> 00:11:30,040
und sind zu einem Ergebnis gekommen.

225
00:11:30,040 --> 00:11:31,700
In den nächsten Videos werden wir

226
00:11:31,700 --> 00:11:33,610
Tests für unseren Compiler entwickeln

227
00:11:33,610 --> 00:11:35,870
und unser Sprache mehr Kontrolle geben,

228
00:11:35,870 --> 00:11:39,300
damit wir mehr erreichen können als nur eine Zahl auszugeben.

229
00:11:39,300 --> 00:11:41,360
Lasst mir eure Fragen und euer Feedback

230
00:11:41,360 --> 00:11:43,360
in Form von Kommentaren und Daumen da

231
00:11:43,360 --> 00:11:45,410
und vergesst nicht meinen Kanal zu abbonieren

232
00:11:45,410 --> 00:11:47,590
damit ihr keine neue Folge verpasst.

233
00:11:48,280 --> 00:11:52,310
Vielen Dank an Gadarol, der mir für die Aufnahmen sein Studio zur Verfügung stellt.

234
00:11:52,400 --> 00:11:53,760
Meine Name ist yankee,

235
00:11:53,760 --> 00:11:55,220
ich hoffe es hat euch Spaß gemacht,

236
00:11:55,220 --> 00:11:57,020
vielen Dank für eure Aufmerksamkeit,

237
00:11:57,020 --> 00:11:58,580
tschüss und bis zum nächsten Mal,

238
00:11:58,580 --> 00:12:01,590
wenn es wieder heißt: "Let's build a compiler".

