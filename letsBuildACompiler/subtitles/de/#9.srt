1
00:00:00,000 --> 00:00:03,070
Willkommen zurück zu "Let's build a compiler".

2
00:00:03,070 --> 00:00:05,100
In der letzten Folge haben erfolgreich

3
00:00:05,100 --> 00:00:09,050
die Operatoren Minus, Mal und Geteil in unsere Sprache eingebaut.

4
00:00:09,050 --> 00:00:10,640
Leider gab es jedoch Probleme,

5
00:00:10,640 --> 00:00:13,510
als wir die Operatoren miteinander verknüpft haben.

6
00:00:13,510 --> 00:00:19,570
Zum Beispiel war das Ergebnis von "2+3*3" 15 statt den erwarteten 11.

7
00:00:19,570 --> 00:00:22,590
In dieser Folge werden wir uns anschauen warum dies so ist

8
00:00:22,590 --> 00:00:26,740
und dann unseren Compiler so erweitern, dass er auch dieses Problem löst.

9
00:00:26,740 --> 00:00:30,390
Mein Name ist yankee und ich wünsche euch viel Spaß.

10
00:00:31,490 --> 00:00:33,840
Um jetzt zu verstehen was das Problem ist

11
00:00:33,840 --> 00:00:36,840
wollen wir uns einmal den Baum den ANTLR uns generiert

12
00:00:36,840 --> 00:00:39,900
für "2+3*3" anzeigen lassen.

13
00:00:39,900 --> 00:00:41,830
Dafür gehen wir auf die Konsole,

14
00:00:41,830 --> 00:00:44,630
gehen in unser Parserverzeichnis,

15
00:00:44,630 --> 00:00:49,590
holen uns wieder das TestRig-Kommando vom letzten Mal heraus

16
00:00:49,940 --> 00:00:59,950
und dann werden wir "println(2+3*3*);" ausführen,

17
00:00:59,950 --> 00:01:03,760
dann Strg+D auf Linux, Strg+Z auf Windows

18
00:01:03,760 --> 00:01:07,430
und uns dann den Baum anzeigen lassen.

19
00:01:08,900 --> 00:01:11,100
So, hier seht ihr jetzt unser Programm:

20
00:01:11,100 --> 00:01:14,530
Es hat nur ein "println" mit einer "expression"

21
00:01:14,530 --> 00:01:20,690
und dieses "expression" besteht hier aus einer Multiplikation und einer Addition.

22
00:01:20,690 --> 00:01:24,550
Wie ihr daran seht, dass die Addition weiter unten im Baum ist,

23
00:01:24,550 --> 00:01:26,790
hat diese Vorrang bekommen.

24
00:01:26,790 --> 00:01:29,880
Das heißt, wenn wir das hier Post-Order durchgehen würden,

25
00:01:29,880 --> 00:01:35,900
dann hätten wir 2,3,plus,mal.

26
00:01:35,900 --> 00:01:40,080
Dumm gelaufen, das ist nämlich leider nicht das, was wir haben wollen.

27
00:01:40,080 --> 00:01:42,360
Wie können wir das Problem jetzt beheben?

28
00:01:42,360 --> 00:01:46,790
Dafür schaun wir erstmal wieder ins unsere Grammatik

29
00:01:46,790 --> 00:01:49,750
und überlegen uns was eigentlich passieren sollte.

30
00:01:49,750 --> 00:01:53,620
Wir hatten hier den Ausdruck "2+3*3".

31
00:01:53,620 --> 00:01:58,060
Und wir möchten gerne dass das so behandelt wird wie "2+9".

32
00:01:58,060 --> 00:02:04,070
Das bedeutet wir haben erst die 2, das ist eine "NUMBER"

33
00:02:04,070 --> 00:02:09,060
und dann haben wir ein Plus, also ist es die obere Regel hier

34
00:02:09,060 --> 00:02:12,970
und dann kommt auf der rechten Seite von dem Plus eine Berechnung,

35
00:02:12,970 --> 00:02:15,500
also wieder ein Ausdruck mit einem "Mal".

36
00:02:15,500 --> 00:02:17,780
Verdammt nochmal, das erlauben wir leider nicht,

37
00:02:17,780 --> 00:02:20,940
der rechte Teil kann hier im Moment nur eine "NUMBER" sein.

38
00:02:20,940 --> 00:02:22,620
Was machen wir also?

39
00:02:22,620 --> 00:02:26,690
Statt "NUMBER" verwenden wir hier auch immer "expression",

40
00:02:26,690 --> 00:02:29,080
damit auch der rechte Teil von unserem Plus

41
00:02:29,080 --> 00:02:33,960
eine "expression" sein kann und damit auch wieder ein "Mal" ist.

42
00:02:33,960 --> 00:02:37,440
Das ist natürlich nicht das Einzige was sich ändert

43
00:02:37,440 --> 00:02:38,810
das wir hier ein "Mal" erlauben,

44
00:02:38,810 --> 00:02:42,910
wenn ich die Grammatik hier auf "expression" für den rechten Teil ändere,

45
00:02:42,910 --> 00:02:45,690
denn wir haben jetzt hier, unter unserem label "right"

46
00:02:45,690 --> 00:02:47,760
nichtmehr einfach nur ein Token drin,

47
00:02:47,760 --> 00:02:50,750
sondern ebenfalls wieder eine "expression".

48
00:02:50,750 --> 00:02:52,230
Das ist natürlich trotzdem OK,

49
00:02:52,230 --> 00:02:55,950
denn unser rechter Teil kann ja auch wieder einfach nur eine "NUMBER" sein,

50
00:02:55,950 --> 00:02:59,430
aber unseren Visitor müssen wir deswegen trotzdem anpassen.

51
00:02:59,430 --> 00:03:02,820
Das heißt wir generieren jetzt als Nächstes mal wieder

52
00:03:02,820 --> 00:03:05,840
von unserem "grammar"-Verzeichnis aus

53
00:03:05,840 --> 00:03:08,670
unseren Parser neu,

54
00:03:10,930 --> 00:03:14,500
dann gehen wir in Eclipse im Parser auf "F5",

55
00:03:15,220 --> 00:03:17,770
dann öffnen wir unseren Visitor

56
00:03:17,770 --> 00:03:19,740
und dann werden wir den anpassen.

57
00:03:19,740 --> 00:03:23,010
Jetzt ist es so, dass bei unseren bisherigen

58
00:03:23,010 --> 00:03:24,670
Visitmethoden die wir hier haben,

59
00:03:24,670 --> 00:03:27,360
also zum Beispiel bei "visitPlus"

60
00:03:27,360 --> 00:03:31,190
kann "visitChildren" auch schon wieder ein "ldc" zurückgeben.

61
00:03:31,190 --> 00:03:34,710
Denn wir haben ja hier unten eine Methode "visitNumber"

62
00:03:34,710 --> 00:03:37,190
und die gibt uns schon das "ldc".

63
00:03:37,190 --> 00:03:39,140
Das ist eigentlich sehr nett, denn das bedeutet

64
00:03:39,140 --> 00:03:42,350
wir müssen das "ldc" hier garnicht mehr angeben.

65
00:03:42,350 --> 00:03:46,980
Das kommt schon von dem "visitChildren" hier zu uns nach unten.

66
00:03:46,980 --> 00:03:50,680
Wir entfernen also das "ldc" überall

67
00:03:59,750 --> 00:04:03,350
und dann führen wir unsere Tests nochmal aus.

68
00:04:05,880 --> 00:04:08,790
Und es hat sich hierbei nichts geändert:

69
00:04:08,790 --> 00:04:10,370
Die alten Tests funktionieren noch,

70
00:04:10,370 --> 00:04:12,680
die neuen funktionieren immernoch nicht.

71
00:04:13,060 --> 00:04:14,650
Woran liegt das?

72
00:04:15,660 --> 00:04:18,710
Schauen wir uns nochmal unsere Grammatik an:

73
00:04:18,710 --> 00:04:24,890
Wir wollen wir jetzt hier, dass das 2+3 immernoch so ausgewertet wird

74
00:04:24,890 --> 00:04:30,400
dass ein Plus kommt und der rechte Teil eine Multiplikation ist.

75
00:04:30,400 --> 00:04:35,060
Ja, doof gelaufen, dass ANTLR nimmt das nämlich andersrum:

76
00:04:35,060 --> 00:04:37,150
ANTLR fängt damit an, dass es sagt:

77
00:04:37,150 --> 00:04:40,080
Ich habe hier eine Multiplikation zuerst

78
00:04:40,080 --> 00:04:44,460
und diese Multiplikation hat als linkes Kind "2+3"

79
00:04:44,460 --> 00:04:48,630
und dann als rechtes eben nur die 3.

80
00:04:48,630 --> 00:04:50,570
Und wenn wir genau in die Grammatik reinschauen,

81
00:04:50,570 --> 00:04:53,290
dann sehen wir auch: Tatsächlich, das ist mehrdeutig,

82
00:04:53,290 --> 00:04:55,290
das kann man so oder so sehen.

83
00:04:55,290 --> 00:04:58,460
Wie löst ANTLR einen solchen Fall auf?

84
00:04:58,460 --> 00:05:02,570
Es nimmt immer die oberste Regel zuerst.

85
00:05:02,570 --> 00:05:06,430
Also die oberste Regel hat die höchte Priorität.

86
00:05:06,430 --> 00:05:08,280
Und bei uns heißt das im Moment:

87
00:05:08,280 --> 00:05:10,600
Das Plus hat die höchte Priorität.

88
00:05:10,600 --> 00:05:12,360
Das ist natürlich blöd,

89
00:05:12,360 --> 00:05:15,110
denn wir wollen das ja genau andersrum.

90
00:05:15,110 --> 00:05:17,640
Der Multiplikationsoperator soll

91
00:05:17,640 --> 00:05:20,190
eine höhere Priorität haben als das Plus.

92
00:05:20,190 --> 00:05:23,750
Also werden wir diese beiden Regeln vertauschen.

93
00:05:29,700 --> 00:05:34,500
Dann generieren wir wieder unseren Parser neu,

94
00:05:36,620 --> 00:05:39,250
gehen hier auf "F5"

95
00:05:39,250 --> 00:05:42,310
und führen unsere Tests aus.

96
00:05:43,830 --> 00:05:45,120
So was sagen die Tests?

97
00:05:45,120 --> 00:05:46,770
Tatsächlich, es hat funktioniert,

98
00:05:46,770 --> 00:05:49,280
es schlägt jetzt nämlich nurnoch ein Test fehl,

99
00:05:49,280 --> 00:05:53,470
nämlich der "8/2*4"-Test.

100
00:05:53,470 --> 00:05:55,810
Eine Sache die euch hier auffallen könnte,

101
00:05:55,810 --> 00:05:58,550
ist dass die Division natürlich eine

102
00:05:58,550 --> 00:06:03,420
höhere Priorität haben sollte als die Subtraktion.

103
00:06:03,900 --> 00:06:06,430
Aber das ist nicht alles.

104
00:06:06,430 --> 00:06:09,490
Denn in dem Test hier unten, der hier fehlschlägt

105
00:06:09,490 --> 00:06:11,930
kommt überhaupt keine Subtraktion vor.

106
00:06:11,930 --> 00:06:16,150
Das kann also nicht das Problem für diesen Test hier darstellen.

107
00:06:16,150 --> 00:06:19,900
Das tatsächliche Problem für unseren Test kommt daher,

108
00:06:19,900 --> 00:06:22,550
dass Multiplikation und Division eigentlich

109
00:06:22,550 --> 00:06:27,230
auf der gleichen Stufe sehen von unser Operatorenrangfolge.

110
00:06:27,230 --> 00:06:29,100
Wir könnten jetzt hier schreiben:

111
00:06:29,100 --> 00:06:32,640
"Mal oder Geteilt",

112
00:06:32,640 --> 00:06:35,870
um beide Operatoren auf die gleiche Höhe zu stellen

113
00:06:35,870 --> 00:06:38,470
und tatsächlich würde in so einem Fall

114
00:06:38,470 --> 00:06:41,640
ANTLR die Operatoren von links nach rechts auflösen

115
00:06:41,640 --> 00:06:43,220
und das Richtige tun.

116
00:06:43,220 --> 00:06:46,490
Aber wir könnten nicht mehr so schön mit unseren Labels arbeiten.

117
00:06:46,490 --> 00:06:48,810
Wenn wir weiterhin mit den Labels arbeiten wollen,

118
00:06:48,810 --> 00:06:51,480
müssen wir uns was anderes ausdenken.

119
00:06:52,470 --> 00:06:55,480
Eine Möglichkeit dafür wäre:

120
00:06:55,480 --> 00:07:01,270
Die Division einfach vor die Multiplikation in der Priorität zu setzen.

121
00:07:01,270 --> 00:07:03,390
Dann sieht das ganze so aus.

122
00:07:05,090 --> 00:07:09,980
Und jetzt wird die Division jeweils vor der Multiplikation ausgewertet

123
00:07:09,980 --> 00:07:13,300
und die Subtraktion vor der Addition.

124
00:07:13,300 --> 00:07:14,900
Funktioniert das denn auch?

125
00:07:14,900 --> 00:07:17,540
Hier ist mal ein Beispiel dafür:

126
00:07:17,540 --> 00:07:23,130
Sagen wir: Wir hätten "2*8/4" als Brechnung.

127
00:07:23,130 --> 00:07:28,020
Dann ist es völlig egal, ob wir diese Berechnung so ausrechnen:

128
00:07:28,020 --> 00:07:31,160
"2*8" sind 16, durch 4 sind 4.

129
00:07:31,160 --> 00:07:35,720
Oder ob wir sagen: "2*(8/4)"

130
00:07:35,720 --> 00:07:38,360
und die "8/4" zuerst ausrechnen,

131
00:07:38,360 --> 00:07:43,260
denn in dem Fall wäre "8/4" 2 und "2*2" ist immernoch 4.

132
00:07:43,260 --> 00:07:46,520
Das liegt daran, dass der Multiplikationsoperator

133
00:07:46,520 --> 00:07:51,150
im Gegensatz zum Divisionsoperator nämlich kommutativ ist.

134
00:07:53,580 --> 00:07:55,400
Probieren wir doch mal aus

135
00:07:55,400 --> 00:08:01,010
ob mit dieser Operatorenreihenfolge der Test jetzt durchläuft.

136
00:08:01,010 --> 00:08:04,670
Wir generieren also unseren Parser wieder neu,

137
00:08:05,950 --> 00:08:08,220
gehen hier auf "F5"

138
00:08:08,220 --> 00:08:11,570
und lassen unsere Tests durchlaufen.

139
00:08:14,960 --> 00:08:17,390
Und Huraa, ihr seht, alles ist grün,

140
00:08:17,390 --> 00:08:20,760
alle unsere Tests haben funktioniert.

141
00:08:20,760 --> 00:08:23,720
Nurnoch einmal zur Demonstation möchte ich jetzt

142
00:08:23,720 --> 00:08:27,610
noch einmal den Baum euch zeigen, wie er aussieht.

143
00:08:28,140 --> 00:08:31,970
Wir holen also wieder unser TestRig raus,

144
00:08:31,970 --> 00:08:35,780
wir gehen zu erst in den Ordner mit unserem Parser

145
00:08:35,780 --> 00:08:39,260
und holen dann das TestRig raus,

146
00:08:39,730 --> 00:08:41,660
geben jetzt hier wieder ein:

147
00:08:41,660 --> 00:08:46,850
"println(2+3*3)"

148
00:08:49,130 --> 00:08:51,690
und schauen uns den Baum an.

149
00:08:53,190 --> 00:08:54,500
Wie ihr seht:

150
00:08:54,500 --> 00:08:57,930
Jetzt ist das Plus weiter oben, das Mal weiter unten

151
00:08:57,930 --> 00:09:01,510
und die Dinge die weiter unten sind werden zuerst ausgerechnet,

152
00:09:01,510 --> 00:09:03,680
da wir den Baum von unten nach oben auflösen,

153
00:09:03,680 --> 00:09:08,250
also rechnen wir "3*3" und dann erst "+2".

154
00:09:09,170 --> 00:09:10,800
In dieser Folge haben wir gelernt,

155
00:09:10,800 --> 00:09:13,750
wie wir unsere Parserregeln für Rechnungen so beschreiben können,

156
00:09:13,750 --> 00:09:16,340
dass sie auch bei Kettenrechnungen mit mehreren Operatoren

157
00:09:16,340 --> 00:09:19,140
beliebig komplexe Ausdrücke erkennen können.

158
00:09:19,140 --> 00:09:20,810
Außerdem haben wir gelernt, dass wir durch

159
00:09:20,810 --> 00:09:22,330
die Reihenfolge von Subregeln

160
00:09:22,330 --> 00:09:25,400
die Operatorenrangfolge beeinflussen können.

161
00:09:25,400 --> 00:09:28,220
Welche Features möchtet ihr als Nächstes sehen?

162
00:09:28,220 --> 00:09:30,210
Was für Fragen und Wünsche habt ihr?

163
00:09:30,210 --> 00:09:32,850
Über welche Probleme und Lösungen seit ihr gestolpert,

164
00:09:32,850 --> 00:09:35,210
als ihr an einem Compiler gearbeitet habt?

165
00:09:35,210 --> 00:09:37,240
Schreibt es mir in die Kommentare!

166
00:09:37,240 --> 00:09:39,770
Lasst mir einen Daumen da, wenn euch das Video gefallen hat

167
00:09:39,770 --> 00:09:43,750
und abonniert meinen Kanal, damit ihr keine neue Folge verpasst.

168
00:09:43,750 --> 00:09:45,030
Vielen Dank an Gadarol,

169
00:09:45,030 --> 00:09:47,850
der mir für die Aufnahmen sein Studio zur Verfügung stellt.

170
00:09:47,850 --> 00:09:50,280
Euch vielen Dank für eure Aufmerksamkeit,

171
00:09:50,280 --> 00:09:52,590
auf Wiedersehen und bis zum nächsten Mal,

172
00:09:52,590 --> 00:09:56,020
wenn es wieder heißt: "Let's build a compiler".

