1
00:00:00,000 --> 00:00:02,991
Willkommen zurück zu "Let's build a compiler".

2
00:00:02,990 --> 00:00:05,226
In letzter Folge haben wir unser Sprache

3
00:00:05,220 --> 00:00:06,444
Variablen beigebracht

4
00:00:06,440 --> 00:00:09,586
und langsam nimmt die Komplexität unseres Compilers zu

5
00:00:09,586 --> 00:00:11,580
und Fehler werden schwerer zu finden.

6
00:00:11,822 --> 00:00:14,591
Daher werden wir uns in dieser Folge damit beschäftigen

7
00:00:14,590 --> 00:00:18,173
wie wir im Visitor hilfreiche Fehlermeldungen generieren können.

8
00:00:19,982 --> 00:00:22,160
Hier habe ich mir leider einen kleinen Fehler erlaubt:

9
00:00:22,160 --> 00:00:25,973
Das "Files.newOutputStream" erzeugt einen neuen OutputStream,

10
00:00:25,970 --> 00:00:29,088
dann wird unser class file in diesen OutputStream reingeschrieben

11
00:00:29,080 --> 00:00:30,644
aber der OutputStream wird danach

12
00:00:30,640 --> 00:00:31,955
nie wieder geschlossen.

13
00:00:32,173 --> 00:00:34,213
Auf Linux ist das erstmal nicht so das Problem,

14
00:00:34,210 --> 00:00:37,875
dass fällt nicht so auf, dass der OutputStream noch offen ist

15
00:00:37,870 --> 00:00:40,288
aber auf Windows kann danach dieser tempDir hier

16
00:00:40,280 --> 00:00:41,355
nicht gelöscht werden,

17
00:00:41,350 --> 00:00:44,084
weil in dem TempDir noch eine Datei ist,

18
00:00:44,080 --> 00:00:45,168
die geöffnet ist.

19
00:00:45,160 --> 00:00:47,066
Wie gesagt auf Linux funktioniert es trotzdem,

20
00:00:47,060 --> 00:00:48,928
da kann man auch geöffnete Dateien löschen

21
00:00:48,920 --> 00:00:50,560
Auf Windows ist das nicht möglich

22
00:00:50,560 --> 00:00:53,542
und deswegen müssen wir das jetzt noch korrigieren.

23
00:00:53,662 --> 00:00:55,204
Das machen wir am einfachsten indem wir

24
00:00:55,200 --> 00:00:59,328
uns den OutputStream zuerstmal in eine Variable rausziehen

25
00:01:01,320 --> 00:01:03,111
und dann werden wir hier einen

26
00:01:03,110 --> 00:01:05,831
try-with-resources-Block verwenden.

27
00:01:15,866 --> 00:01:18,640
Auf diese Weise wird jetzt Java

28
00:01:18,640 --> 00:01:21,368
am Ende des try-Blocks den OutputStream,

29
00:01:21,360 --> 00:01:23,488
der hier erzeugt wurde automatisch schließen

30
00:01:23,480 --> 00:01:27,106
und zwar selbst dann wenn hier eine Exception aufgetreten ist.

31
00:01:27,200 --> 00:01:30,071
Probieren wir nochmal ob die Tests auch wirklich noch tun

32
00:01:30,644 --> 00:01:34,226
und ja: Es ist der Fall, alles noch wunderbar.

33
00:01:34,631 --> 00:01:36,795
Dann wollen wir anfangen uns damit zu beschäftigen

34
00:01:36,790 --> 00:01:38,755
die richtigen Fehlermeldungen zu werfen

35
00:01:38,750 --> 00:01:40,324
wenn irgendetwas schief geht.

36
00:01:40,320 --> 00:01:42,875
Dafür erweitern wir wie gewohnt

37
00:01:42,870 --> 00:01:44,946
zuerst mal unsere Spezifikation.

38
00:01:45,568 --> 00:01:49,431
Wir erzeugen hier neben unserem bisherigen Test

39
00:01:51,430 --> 00:01:53,711
einen neuen Test,

40
00:01:55,297 --> 00:01:57,288
und da sagen wir dann:

41
00:01:57,622 --> 00:02:15,071
"compilingCodeThrowsUndeclaredVariableException_ifVariableIsUndefined"

42
00:02:17,866 --> 00:02:20,626
Und dann werden wir hier so ähnlich

43
00:02:22,031 --> 00:02:26,653
wie unseren bisherigen Output unseren String kompilieren,

44
00:02:27,017 --> 00:02:29,457
allerdings gibt es hier kein Output

45
00:02:29,450 --> 00:02:31,466
von unserem Programm zu evaluieren,

46
00:02:31,460 --> 00:02:34,640
sondern es gibt eigentlich nur das "compileAndRun".

47
00:02:36,333 --> 00:02:39,457
Als code werden wir jetzt etwas ausführen,

48
00:02:39,450 --> 00:02:44,048
was entsprechend eine "undeclared variable" referenziert.

49
00:02:44,604 --> 00:02:46,644
Nehmen wir also hier also zum Beispiel einfach:

50
00:02:46,640 --> 00:02:48,328
"println(x)"

51
00:02:48,320 --> 00:02:49,982
Und danach

52
00:02:49,980 --> 00:02:52,071
müssen wir natürlich noch überprüfen

53
00:02:52,070 --> 00:02:55,044
ob jetzt ein richtiger Fehler geworfen wird:

54
00:02:55,040 --> 00:02:58,395
Das heißt wir schreiben hier in unser Test-annotation rein:

55
00:02:58,390 --> 00:03:01,280
"expectedExceptions"

56
00:03:02,200 --> 00:03:04,537
und sagen wir "expecten" eine

57
00:03:04,530 --> 00:03:09,337
"UndeclaredVariableException".

58
00:03:12,440 --> 00:03:14,666
Und dann dokumentieren wir hier:

59
00:03:14,660 --> 00:03:24,133
"evaluation performed by expected exception".

60
00:03:26,724 --> 00:03:28,848
Diese Exception gibt es natürlich bisher noch nicht,

61
00:03:28,840 --> 00:03:31,231
das heißt die müssen wir anlegen,

62
00:03:32,035 --> 00:03:35,128
dass werden wir jetzt nicht in unserem test-package machen

63
00:03:35,120 --> 00:03:37,524
sondern wieder normal in dem "source"-package

64
00:03:37,520 --> 00:03:40,293
und dann erstellen wir doch hier

65
00:03:40,290 --> 00:03:43,657
ein package "exceptions".

66
00:03:47,160 --> 00:03:49,680
So dass kann jetzt natürlich hier noch eine exception werfen,

67
00:03:49,680 --> 00:03:53,755
das fügen wir einfach noch an unsere "throws declaration" dran.

68
00:03:55,626 --> 00:03:58,622
Damit wäre unser Test entsprechend erweitert,

69
00:03:58,622 --> 00:04:00,620
dann führen wir den einmal aus

70
00:04:03,430 --> 00:04:04,515
und sehen jetzt hier:

71
00:04:04,510 --> 00:04:07,288
Hurraa, ein Test hat fehlgeschlagen,

72
00:04:07,280 --> 00:04:08,840
nämlich hier unser Neuer

73
00:04:08,840 --> 00:04:12,524
"expected exception was UndeclaredVariableException"

74
00:04:12,520 --> 00:04:15,280
aber stattdessen haben wir

75
00:04:15,280 --> 00:04:18,986
ein "jasError" mit "Bad argument" bekommen.

76
00:04:20,528 --> 00:04:21,857
Jetzt wollen wir das implementieren,

77
00:04:21,850 --> 00:04:24,911
dass diese UndeclaredVariableException auch geworfen wird.

78
00:04:24,910 --> 00:04:26,591
Dafür gehen wir in unseren Visitor,

79
00:04:26,590 --> 00:04:30,071
der stolpert ja letztlich darüber dass eine Variable nicht da ist

80
00:04:30,070 --> 00:04:33,151
und dann haben wir in unserem Fall

81
00:04:33,150 --> 00:04:35,057
eine Variable die wir suchen,

82
00:04:35,050 --> 00:04:38,493
das ist also hier bei "visitVariable"

83
00:04:38,490 --> 00:04:40,093
und da kann es sein,

84
00:04:40,090 --> 00:04:43,186
dass dieses "variables.get" überhaupt nichts zurückgibt

85
00:04:43,180 --> 00:04:46,120
weil eben unsere Variable nicht definiert wurde.

86
00:04:46,120 --> 00:04:47,826
Da sagen wir dann also,

87
00:04:47,820 --> 00:04:49,453
dass wir uns das hier

88
00:04:49,450 --> 00:04:52,586
auch zuerst mal in eine Variable ziehen

89
00:04:54,671 --> 00:04:56,595
und dann schauen wir nach:

90
00:04:56,590 --> 00:05:00,977
Wenn dieser "varIndex", den wir hier bekommen haben "null" ist,

91
00:05:01,546 --> 00:05:04,768
dann ist die Variable nicht definiert

92
00:05:04,760 --> 00:05:07,368
und wir sagen an der Stelle:

93
00:05:07,360 --> 00:05:11,928
"throw new UndeclaredVariableException".

94
00:05:14,297 --> 00:05:17,760
Jetzt ist diese Exception hier noch eine "caught exception",

95
00:05:17,760 --> 00:05:22,528
das heißt wir müssten sie an unseren Visitor hier anfügen,

96
00:05:22,520 --> 00:05:25,124
an unsere throws declaration,

97
00:05:25,120 --> 00:05:27,306
das können wir aber nicht machen,

98
00:05:27,300 --> 00:05:29,675
weil es ja eine überschriebene Methode

99
00:05:29,670 --> 00:05:30,928
von einer Superklasse ist,

100
00:05:30,920 --> 00:05:33,680
da können wir nicht einfach die Signatur ändern

101
00:05:33,680 --> 00:05:35,164
und ein throws hinzufügen,

102
00:05:35,160 --> 00:05:36,422
dass heißt wir müssen das hier

103
00:05:36,420 --> 00:05:39,906
zu einer "RuntimeException" noch abändern,

104
00:05:39,900 --> 00:05:42,004
das tun wir einfach indem wir hier

105
00:05:42,000 --> 00:05:45,600
"extends RuntimeException" schreiben.

106
00:05:46,000 --> 00:05:48,973
So, dann führen wir unseren Test wieder aus

107
00:05:51,000 --> 00:05:54,275
und wie ihr seht: Huraa, es hat funktioniert!

108
00:05:54,270 --> 00:05:58,955
Jetzt bekommen wir schonmal eine "UndeclaredVariableException"

109
00:05:58,950 --> 00:06:01,915
wenn wir auf eine Variable in einem println zugreifen,

110
00:06:01,915 --> 00:06:03,910
die nicht definiert ist.

111
00:06:03,910 --> 00:06:07,391
Leider sagt uns unsere Fehlermeldung bis jetzt nichts anderes als:

112
00:06:07,390 --> 00:06:10,862
"Hey, ich habe ein 'undeclared variable' gefunden".

113
00:06:10,860 --> 00:06:14,102
Wie wäre es der Fehler würde uns auch noch sagen

114
00:06:14,100 --> 00:06:15,960
welche Variable nicht deklariert ist,

115
00:06:15,960 --> 00:06:19,328
also wie sie heißt und an welcher Position das gewesen ist.

116
00:06:19,320 --> 00:06:24,466
Dafür gehen wir wieder zu unser Spezifikation,

117
00:06:24,460 --> 00:06:27,497
und werden die erweitern und spezifizieren,

118
00:06:27,490 --> 00:06:29,902
dass bitte auch dies enthalten sein soll.

119
00:06:29,900 --> 00:06:32,848
Das heißt wir geben hier zusätzlich noch an:

120
00:06:32,840 --> 00:06:35,533
"expectedExceptionsMessageRegexp",

121
00:06:35,530 --> 00:06:37,644
das ist jetzt eine regulärer Ausdruck,

122
00:06:37,640 --> 00:06:40,986
der auf die "message" von unser Exception passen soll.

123
00:06:40,980 --> 00:06:42,800
Da soll jetzt also drin stehen:

124
00:06:42,800 --> 00:06:45,226
Die Zeilennummer, das ist hier...

125
00:06:45,220 --> 00:06:47,720
wir haben nur eine Zeile, die Zeile Nummer eins,

126
00:06:47,720 --> 00:06:49,360
dann die Spaltennummer,

127
00:06:49,360 --> 00:06:50,377
dann gucken wir mal hier,

128
00:06:50,370 --> 00:06:53,324
1, 2, 3, 4, 5, 6, 7, 8,

129
00:06:53,320 --> 00:06:55,853
das ist also die Spalte Nummer 8

130
00:06:55,850 --> 00:06:58,404
an der der Fehler aufgetreten ist

131
00:06:58,400 --> 00:07:04,982
und da ist dann eine "undeclared variable"

132
00:07:05,662 --> 00:07:08,004
und die heißt "x".

133
00:07:09,351 --> 00:07:11,204
Dann speichern wir das,

134
00:07:11,413 --> 00:07:13,497
lassen unseren Test wieder laufen...

135
00:07:15,490 --> 00:07:18,448
Das Übliche: Der Test ist fehlgeschlagen:

136
00:07:18,440 --> 00:07:22,248
"The exception was thrown but with the wrong message".

137
00:07:23,031 --> 00:07:24,715
Das werden wir jetzt beheben,

138
00:07:24,710 --> 00:07:28,906
dafür erweitern wir hier unsere "UndeclaredVariableException",

139
00:07:28,900 --> 00:07:32,008
denn was sie wissen muss ist:

140
00:07:32,000 --> 00:07:34,853
In welcher Zeile ist das Problem aufgetreten,

141
00:07:35,786 --> 00:07:36,951
sie muss wissen:

142
00:07:36,950 --> 00:07:40,928
In welcher "column" ist das Problem aufgetreten

143
00:07:46,942 --> 00:07:48,768
und sie muss wissen:

144
00:07:48,760 --> 00:07:52,697
Wie hieß dir Variable, die "undeclared" ist?

145
00:07:57,622 --> 00:08:02,777
Dann wollen wir hier eine "getMessage"-Methode implementieren

146
00:08:03,622 --> 00:08:06,684
und die soll jetzt zurückgeben

147
00:08:07,128 --> 00:08:13,880
statt garnichts einfach "line", dann ein Doppelpunkt,

148
00:08:14,062 --> 00:08:16,275
dann die "column",

149
00:08:17,320 --> 00:08:24,266
dann "undeclared variable"

150
00:08:25,973 --> 00:08:29,546
und dann der Variablenname.

151
00:08:34,088 --> 00:08:38,560
Jetzt müssen wir die ganzen Variablen hier oben noch initialisieren,

152
00:08:38,906 --> 00:08:42,080
dafür erzeugen wir einen constructor

153
00:08:44,275 --> 00:08:46,608
und in diesem constructor können wir jetzt einfach

154
00:08:46,600 --> 00:08:50,231
das Token mit unserem Variablennamen übergeben.

155
00:08:53,355 --> 00:08:56,888
Denn da bekommen wir alle wichtigen Informationen raus

156
00:08:56,880 --> 00:09:00,395
um unsere Variablen hier oben zu belegen.

157
00:09:01,013 --> 00:09:06,724
Die line kriegen wir raus mit "varNameToken.getLine()",

158
00:09:08,862 --> 00:09:17,137
die "column" kriegen wir raus mit "varNameToken.getCharPositionInLine()"

159
00:09:18,244 --> 00:09:26,666
und den "varName" kriegen wir raus mit "varNameToken.getText()".

160
00:09:27,311 --> 00:09:30,706
Dann gehen wir wieder in unserem Visitor

161
00:09:30,700 --> 00:09:32,502
und sehen schon dass er hier meckert,

162
00:09:32,500 --> 00:09:34,768
weil wir jetzt das Token nicht übergeben

163
00:09:34,760 --> 00:09:39,560
und unser Token, das ist "ctx.varName".

164
00:09:41,142 --> 00:09:43,586
Lassen wir unseren Test wieder laufen...

165
00:09:46,448 --> 00:09:49,266
...und sehen dann jetzt, dass es geklappt hat.

166
00:09:49,260 --> 00:09:53,128
Unsere Fehlermeldung enthält jetzt nicht nur die Information,

167
00:09:53,120 --> 00:09:56,808
dass irgendwo eine "undeclared variable" aufgetreten ist,

168
00:09:56,800 --> 00:09:59,288
sondern auch genau welche Variable

169
00:09:59,280 --> 00:10:03,257
und an welcher Position in unserem Quelltext.

170
00:10:03,746 --> 00:10:06,173
So dann schaun wir mal ob wir an alles gedacht haben.

171
00:10:06,170 --> 00:10:08,884
Dafür gehen wir auf unsere Grammatik:

172
00:10:08,880 --> 00:10:11,008
Wir hatten bis jetzt hier in "expression"

173
00:10:11,000 --> 00:10:13,671
varName=identifier, also wenn auf eine Variable

174
00:10:13,670 --> 00:10:15,311
lesend zugegriffen wird

175
00:10:15,310 --> 00:10:18,151
und die Variable nicht existiert, das haben wir abgefangen,

176
00:10:18,150 --> 00:10:21,351
dann wird ein ordentlicher Fehler geworfen.

177
00:10:21,350 --> 00:10:24,942
Wenn eine "varDeclaration" wir ein "varName" haben,

178
00:10:24,940 --> 00:10:28,035
dann ist es gut dass die Variable nicht existiert,

179
00:10:28,030 --> 00:10:30,377
dann brauchen wir keinen Fehler zu werfen,

180
00:10:30,370 --> 00:10:33,560
aber dann haben wir hier noch den Fall von "assignment".

181
00:10:33,560 --> 00:10:36,582
Da würden wir dann auch ein Fehler werfen wollen,

182
00:10:36,580 --> 00:10:39,791
wenn hier der "varName" nicht existiert.

183
00:10:40,235 --> 00:10:42,813
Also gehen wir wieder auf unseren Test,

184
00:10:42,810 --> 00:10:45,080
kopieren unseren Testfall

185
00:10:48,880 --> 00:10:51,346
und dann müssen wir den natürlich umbenennen.

186
00:10:51,340 --> 00:10:53,271
Jetzt sollen die natürlich konsitent benannt sein,

187
00:10:53,270 --> 00:11:00,471
also änder ich das hier in "ifReadingUndefinedVariable".

188
00:11:01,591 --> 00:11:06,702
Und den Test hier unten entsprechen "ifWritingUndefinedVariable".

189
00:11:08,471 --> 00:11:10,951
Dann brauchen wir ein neues Codebeispiel,

190
00:11:10,950 --> 00:11:14,551
da nehme ich jetzt einfach mal "x=5"

191
00:11:15,315 --> 00:11:21,200
und dann ist unsere undefinierte Variable immernoch in Zeile 1

192
00:11:21,200 --> 00:11:24,462
aber an Position 0 ganz am Anfang.

193
00:11:26,142 --> 00:11:27,524
Speichern wir das,

194
00:11:27,524 --> 00:11:29,520
führen wir unseren Test wieder aus

195
00:11:30,924 --> 00:11:34,120
 und wie ihr seht: Der Test ist fehlgeschlagen,

196
00:11:34,120 --> 00:11:36,333
also wunderbar, können wir uns damit beschäftigen

197
00:11:36,330 --> 00:11:38,640
wie wir den Test wieder beheben.

198
00:11:38,640 --> 00:11:40,777
Gehen wir auf unseren Visitor

199
00:11:40,770 --> 00:11:42,991
und dann sehen wir hier,

200
00:11:42,990 --> 00:11:47,444
dass wir bei "visitAssignment" genau das gleiche Konstrukt haben.

201
00:11:47,440 --> 00:11:52,422
Wir greifen auch hier mit "variables.get" auf den Variablenname zu.

202
00:11:52,420 --> 00:11:54,888
Und wenn der dann nicht existiert,

203
00:11:54,880 --> 00:11:58,271
dann müssten wir auch wieder den gleichen Fehler schmeißen.

204
00:11:58,270 --> 00:12:00,177
Um diesen Code jetzt nicht zu duplizieren

205
00:12:00,170 --> 00:12:02,862
und hier wieder genau die gleichen Zeilen

206
00:12:02,860 --> 00:12:06,986
wie hier zu schreiben können wir da eine kleine Hilfsmethode einfügen.

207
00:12:07,568 --> 00:12:09,995
Da sage ich jetzt also einfach:

208
00:12:13,608 --> 00:12:17,804
"requireVariableIndex".

209
00:12:17,800 --> 00:12:20,195
Und dann hätten wir gerne

210
00:12:20,190 --> 00:12:24,791
zu einem Variablennamentoken den entsprechenden Index.

211
00:12:24,790 --> 00:12:26,991
Übergeben wir also hier ein token

212
00:12:33,875 --> 00:12:38,577
und dann kommt der ganze Quelltext von hier...

213
00:12:39,573 --> 00:12:41,377
...nach hier...

214
00:12:42,084 --> 00:12:47,120
und am Ende können wir den "varIndex" zurückgeben.

215
00:12:47,120 --> 00:12:49,960
Das heißt unser varName hier natürlich noch anders,

216
00:12:49,960 --> 00:12:51,742
der ist jetzt nicht in einem context enthalten

217
00:12:51,740 --> 00:12:54,546
sondern wir haben ihn direkt als "varNameToken"

218
00:12:54,540 --> 00:12:56,386
und hier genauso

219
00:12:56,380 --> 00:12:58,991
und schon ist diese Methode fertig.

220
00:12:58,990 --> 00:13:00,186
Und jetzt werden wir hier

221
00:13:00,180 --> 00:13:05,008
statt "varIndex" "requireVariableIndex" nehmen

222
00:13:05,000 --> 00:13:09,653
und unseren "ctx.varName"-Knoten übergeben.

223
00:13:10,311 --> 00:13:11,835
Jetzt das Gleiche auch hier:

224
00:13:11,830 --> 00:13:14,551
statt direkt auf die variables-Map zuzugreifen

225
00:13:14,550 --> 00:13:18,186
nehmen wir hier ebenfalls "requireVariableIndex"

226
00:13:18,180 --> 00:13:25,382
und holen uns aus dem "ctx" das varName-Token.

227
00:13:27,204 --> 00:13:29,853
Dann führen wir unseren Test wieder aus

228
00:13:31,413 --> 00:13:33,902
und huraa, es hat funktioniert,

229
00:13:33,900 --> 00:13:35,884
auch unser neuer Test tut,

230
00:13:35,880 --> 00:13:39,826
das heißt sowohl reading als auch writing

231
00:13:39,820 --> 00:13:42,951
schmeißt jetzt eine "UndeclaredVariableException"

232
00:13:42,950 --> 00:13:45,404
mit einer vernünftigen Nachricht.

233
00:13:46,080 --> 00:13:47,631
In dieser Folge haben wir gelernt

234
00:13:47,630 --> 00:13:49,906
wie wir Exceptions im Visitor dazu einsetzen

235
00:13:49,900 --> 00:13:51,897
hilfreiche Fehlermeldungen bei Zugriffen

236
00:13:51,890 --> 00:13:54,706
auf nicht existierende Variablen zu erzeugen.

237
00:13:54,700 --> 00:13:57,240
Aus einem Token können wir die Informationen erhalten

238
00:13:57,240 --> 00:14:00,817
in welcher Zeile und Spalte der Fehler liegt

239
00:14:00,810 --> 00:14:02,191
und durch den Typ der Exception

240
00:14:02,190 --> 00:14:05,044
können wir genau sagen welches Problem vorliegt.

241
00:14:05,040 --> 00:14:07,017
Damit haben wir eine solide Grundlage

242
00:14:07,017 --> 00:14:09,010
für Fehlerbehandlung erreicht.

243
00:14:09,010 --> 00:14:11,288
In der nächsten Folge werden wir diese Grundlage

244
00:14:11,280 --> 00:14:14,182
generalisieren und auf andere Fehler anwenden.

245
00:14:14,180 --> 00:14:17,173
Zum Beispiel wenn eine Variable doppelt deklariert wird.

246
00:14:17,484 --> 00:14:19,480
Was für Probleme und auch Lösungen

247
00:14:19,480 --> 00:14:22,542
habt ihr bei der Entwicklung eures Compilers gefunden?

248
00:14:22,540 --> 00:14:24,240
Habt ihr Fragen oder Wünsche?

249
00:14:24,240 --> 00:14:26,151
Schreibt es mir in die Kommentare!

250
00:14:26,150 --> 00:14:27,857
Lasst mir außerdem einen Daumen da

251
00:14:27,850 --> 00:14:29,208
wenn euch das Video gefallen hat

252
00:14:29,200 --> 00:14:31,973
und ein Abo, damit ihr keine neue Folge verpasst.

253
00:14:32,231 --> 00:14:33,662
Vielen Dank an Gadarol,

254
00:14:33,660 --> 00:14:36,213
der mir für die Aufnahmen sein Studio zur Verfügung stellt

255
00:14:36,210 --> 00:14:38,680
und euch vielen Dank für eure Aufmerksamkeit.

256
00:14:38,680 --> 00:14:41,577
Mein Name ist yankee, ich hoffe es hat euch Spaß gemacht,

257
00:14:41,570 --> 00:14:43,951
bis zum nächsten Mal, wenn es wieder heißt:

258
00:14:43,951 --> 00:14:45,950
"Let's build a compiler".

