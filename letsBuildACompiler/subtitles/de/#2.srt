1
00:00:00,000 --> 00:00:03,170
Willkommen zum zweiten Teil von "Let's build a compiler".

2
00:00:03,170 --> 00:00:07,370
In diesem Teil zeige ich euch, wie ihr beliebige Zahlen als Operanden akzeptiert

3
00:00:07,370 --> 00:00:10,900
und wie ihr Kettenrechnungen in der ANTLR-Grammatik beschreibt.

4
00:00:10,900 --> 00:00:14,620
Bis jetzt ist unser Parser zugegebenermaßen höchst langweilig.

5
00:00:14,620 --> 00:00:18,390
Alles was unser Parser kann, ist die Berechnung "3+2" zu parsen,

6
00:00:18,390 --> 00:00:21,340
sonst nichts. Er kann noch nichtmal "1+1".

7
00:00:21,340 --> 00:00:24,000
Mhh. Das ist schon wirklich sehr einfach.

8
00:00:24,000 --> 00:00:26,590
Also wollen wir als nächstes unseren Parser erweitern,

9
00:00:26,590 --> 00:00:29,660
so dass er jede beliebige Zahl akzeptiert.

10
00:00:29,660 --> 00:00:33,650
Wir öffnen dazu wieder unsere Grammatik

11
00:00:34,300 --> 00:00:39,010
und werden als erstes Mal uns mit Lexerregeln beschäftigen.

12
00:00:39,010 --> 00:00:42,390
Wir haben bis jetzt hier implizite Lexerregeln,

13
00:00:42,390 --> 00:00:44,220
das sind nämlich diese drei hier,

14
00:00:44,220 --> 00:00:50,090
drei implizite Lexerregeln, wir könnten diese auch so schreiben, dass wir sagen:

15
00:00:50,090 --> 00:00:57,960
Drei ist eine Drei und Plus ist ein Plus

16
00:00:57,960 --> 00:01:02,730
und das gleiche jetzt natürlich auch noch mit der Zwei, ihr könnt's euch denken.

17
00:01:05,510 --> 00:01:08,550
Und dann könnten wir hier oben schreiben:

18
00:01:08,550 --> 00:01:13,820
Drei plus Zwei.

19
00:01:14,500 --> 00:01:17,020
Was machen diese Lexerregeln?

20
00:01:17,020 --> 00:01:20,940
Als Erstes läuft ein Lexer über unseren Input-Sourcecode

21
00:01:20,940 --> 00:01:23,240
und danach erst der Parser.

22
00:01:23,240 --> 00:01:26,290
Wie sieht das aus was der Lexer uns so ausgibt?

23
00:01:26,290 --> 00:01:30,010
Auch hierfür könnnen wir unser TestRig wieder zur Hand ziehen,

24
00:01:30,010 --> 00:01:35,960
es hat nämlich neben den Optionen, die wir bis jetzt gesehen haben

25
00:01:35,960 --> 00:01:40,920
auch noch die Option "-tokens". Die "-tokens"-Option

26
00:01:40,920 --> 00:01:45,350
gibt uns die Tokens aus, die der Lexer für uns generiert hat.

27
00:01:47,720 --> 00:01:52,960
Das bedeutet ich such' wieder den Befehl raus, hach da ist er ja,

28
00:01:53,160 --> 00:01:56,310
nein, wir schreiben keinen Blödsinn dahinter

29
00:01:56,310 --> 00:02:02,230
und... diesmal mit der Option "-tokens".

30
00:02:02,230 --> 00:02:04,650
Hier seht ihr jetzt was dabei rausgekommen ist,

31
00:02:04,650 --> 00:02:12,360
wir haben nämlich vier Tokens, einmal das... die Drei, das Plus, die Zwei und das EOF.

32
00:02:12,360 --> 00:02:17,180
Im Moment sind unsere Tokens zufälligerweise alle genau ein Zeichen lang,

33
00:02:17,180 --> 00:02:19,000
aber das muss nicht so sein,

34
00:02:19,000 --> 00:02:21,530
wenn wir zum Beispiel als Zahl 42 hätten,

35
00:02:21,530 --> 00:02:23,470
dann hätte unsere Zahl zwei Ziffern

36
00:02:23,470 --> 00:02:27,100
und die wollen wir dann zu einem Token zusammen- äh- fassen.

37
00:02:27,100 --> 00:02:31,110
Als Mensch, wenn wir 'n Text, dann machen wir das automatisch,

38
00:02:31,110 --> 00:02:33,570
wenn wir eine Zahl lesen, dann nehmen wir die meistens

39
00:02:33,570 --> 00:02:38,090
nicht als einzelne Ziffern war, sondern eben als eine zusammengehörige Zahl

40
00:02:38,090 --> 00:02:40,280
und das ist das was der Lexer für uns macht:

41
00:02:40,280 --> 00:02:44,340
Er fasst soetwas was aus mehreren Zeichen besteht

42
00:02:44,540 --> 00:02:48,050
zu nur einem sogenannten Token zusammen.

43
00:02:48,050 --> 00:02:51,020
Als Letztes haben wir hier noch das EOF-Token,

44
00:02:51,020 --> 00:02:52,910
das heißt einfach "end of file",

45
00:02:52,910 --> 00:02:55,560
das gibt uns einfach nur das äh... die Nachricht

46
00:02:55,560 --> 00:02:58,090
für unseren Compiler, dass die Datei zu Ende ist,

47
00:02:58,090 --> 00:03:02,550
das ist eigentlich nicht wirklich ein Zeichen aus unser Datei.

48
00:03:04,690 --> 00:03:07,300
Jetzt ähm...

49
00:03:07,300 --> 00:03:11,780
wollen wir allerdings jede beliebige Zahl akzeptieren, das heißt

50
00:03:11,780 --> 00:03:16,970
ich erstelle eine Lexerregel "ZAHL" und hier kann ich jetzt einfach sagen,

51
00:03:16,970 --> 00:03:19,680
in eckigen Klammern null bis neun,

52
00:03:19,680 --> 00:03:22,750
das sind reguläre Ausdrücke, wenn ihr reguläre Ausdrücke kennt,

53
00:03:22,750 --> 00:03:27,540
dann könnt ihr das schon lesen, wenn nicht, es ist nicht sehr schwierig,

54
00:03:28,590 --> 00:03:31,080
die eckigen Klammern heißt einfach:

55
00:03:31,080 --> 00:03:35,920
Ein beliebiges Zeichen aus dieser Range, die ich hier angegegeben habe.

56
00:03:35,920 --> 00:03:37,910
Also ich nehme das Plus nochmal weg zur Erklärung.

57
00:03:37,910 --> 00:03:40,040
Null bis neun heißt jetzt an dieser Stelle

58
00:03:40,040 --> 00:03:44,420
entweder 'ne null, 'ne eins, 'ne zwei, drei und so weiter bis neun. Eins von denen.

59
00:03:44,550 --> 00:03:49,210
Jetzt will ich das natürlich noch quantifizieren, weil ich will ja auch 42 akzeptieren können

60
00:03:49,210 --> 00:03:51,620
und nicht nur die Zahlen null bis neun

61
00:03:51,620 --> 00:03:55,160
und als Quantifizierer haben wir zum Beispiel das Plus.

62
00:03:55,160 --> 00:03:58,320
Wenn ich ein Plus dahinter schreibe, dann bedeutet das:

63
00:03:58,320 --> 00:04:02,090
mindestens einmal, aber beliebig häufig.

64
00:04:03,100 --> 00:04:07,010
Dann müssen wir natürlich auch unsere Regel hier oben mal anpassen

65
00:04:07,010 --> 00:04:09,710
und wir schreiben dann "ZAHL",

66
00:04:09,710 --> 00:04:13,140
das Plus lasse ich erst nochmal so wie es war,

67
00:04:13,140 --> 00:04:16,420
plus eine weitere Zahl.

68
00:04:19,240 --> 00:04:22,590
Jetzt müssen wir wieder unseren Prozess durchgehen

69
00:04:22,590 --> 00:04:25,320
und einmal ANTLR ausführen,

70
00:04:25,320 --> 00:04:27,190
das hab' ich hier noch irgendwo.

71
00:04:35,460 --> 00:04:37,750
Soviel dazu.

72
00:04:47,660 --> 00:04:52,060
Dann müssen wir die neuen Dateien wieder kompilieren

73
00:04:56,350 --> 00:05:00,970
und jetzt können wir wieder unseren Baum generieren lassen.

74
00:05:06,420 --> 00:05:10,640
Und dann den neuen Baum anzeigen lassen

75
00:05:10,640 --> 00:05:13,750
Und, oh Wunder, er hat sich nicht geändert,

76
00:05:13,750 --> 00:05:17,620
weil ich hab' ja auch an unserem Sourcecode den wir parsen nichts geändert.

77
00:05:17,620 --> 00:05:19,850
Macht aber nichts, machen wir als Nächstes

78
00:05:19,850 --> 00:05:23,270
um zu beweisen dass es tatsächlich jetzt auch mit beliebigen Ausdrücken geht.

79
00:05:23,270 --> 00:05:29,900
Also öffnen wir unsere ähh  "code.demo"-Datei

80
00:05:29,900 --> 00:05:37,490
und schreiben jetzt hier statt "3+2" "3+42".

81
00:05:39,980 --> 00:05:47,720
Schließen dies und lassen unser TestRig wieder drauf los.

82
00:05:48,390 --> 00:05:50,790
Ja, das war schon richtig.

83
00:05:56,940 --> 00:06:01,210
Und dann zeigen wir uns... lassen uns den Baum anzeigen

84
00:06:01,210 --> 00:06:03,480
und wie ihr seht, es hat sich geändert,

85
00:06:03,480 --> 00:06:06,440
unser Baum enthält jetzt auch die 42

86
00:06:06,440 --> 00:06:09,980
und unser Parser kann jetzt jede beliebige Addition

87
00:06:09,980 --> 00:06:12,850
aus zwei Zahlen wahrnehmen.

88
00:06:12,850 --> 00:06:16,420
Als Nächstes wollen wir auch noch Kettenausdrücke unterstützen.

89
00:06:16,420 --> 00:06:19,970
Also erweitere ich zunächst unseren Beispielcode

90
00:06:19,970 --> 00:06:24,660
füge hier hinten noch "+5+6" an und schon haben wir unsere Kettenrechnung.

91
00:06:24,660 --> 00:06:29,780
Was passiert wenn wir diese Rechnung jetzt auf unseren aktuellen Parser loslassen?

92
00:06:33,320 --> 00:06:35,410
Wir generieren den Baum,

93
00:06:35,410 --> 00:06:37,630
schauen uns den Baum an

94
00:06:37,630 --> 00:06:40,860
und stellen fest: Es hat sich nichts geändert.

95
00:06:40,860 --> 00:06:45,530
Wie kommt das? Warum wurde das "+5+6" einfach ignoriert?

96
00:06:45,530 --> 00:06:48,030
Schauen wir dafür in die Grammatik:

97
00:06:55,420 --> 00:06:59,250
Hier seht ihr unsere Parserregel "addition",

98
00:06:59,250 --> 00:07:01,800
die einfach nur nach einer Zahl sucht,

99
00:07:01,800 --> 00:07:04,180
danach einem Plus und dann noch einer Zahl.

100
00:07:04,180 --> 00:07:06,020
Und danach hört sie einfach auf.

101
00:07:06,020 --> 00:07:09,200
Egal was danach noch kommt, es wird ignoriert.

102
00:07:09,200 --> 00:07:12,070
Das wollen wir jetzt als Nächstes ändern.

103
00:07:12,340 --> 00:07:14,700
Hierfür haben wir mehrere Möglichkeiten:

104
00:07:14,700 --> 00:07:18,710
Die offensichtlichste Möglichkeit ist dies einfach iterativ zu ändern.

105
00:07:18,710 --> 00:07:21,040
Das bedeutet wir erstellen hier eine Gruppe

106
00:07:21,040 --> 00:07:24,910
und sagen, der Teil darf beliebig häufig vorkommen.

107
00:07:25,180 --> 00:07:30,910
Dadurch wird es ermöglicht, dass jetzt Zahl plus Zahl plus Zahl plus Zahl

108
00:07:31,830 --> 00:07:35,270
so oft wie es will äh vorkommen darf.

109
00:07:35,270 --> 00:07:39,600
Probieren wir mal was mit dieser Grammatik mit unserem Baum passiert.

110
00:07:40,220 --> 00:07:45,630
Ich erzeuge zunächst den neuen Parser,

111
00:07:46,160 --> 00:07:49,400
kompiliere den Kram

112
00:07:50,670 --> 00:07:54,720
und dann generieren wir den Baum,

113
00:07:54,940 --> 00:07:56,990
zeigen uns den Baum an

114
00:07:57,520 --> 00:07:59,980
und tatsächlich, es hat funktioniert:

115
00:07:59,980 --> 00:08:03,410
in unserem Baum steht jetzt auch noch "+5+6".

116
00:08:03,590 --> 00:08:05,620
Allerdings, leider schade,

117
00:08:05,620 --> 00:08:09,490
dass können wir nicht mehr auf das anfangs vorgestellte System

118
00:08:09,490 --> 00:08:14,130
anwenden, dass wir jetzt durch den Baum Post-Order durchgehen

119
00:08:14,130 --> 00:08:17,320
um unsere Instruktionen für den Prozessor zu erhalten.

120
00:08:17,320 --> 00:08:19,130
Wenn wir hier Post-Order durchgehen,

121
00:08:19,130 --> 00:08:23,110
dann würde das bedeuten (und also die Pluszeichen dabei ignorieren), dann würde das bedeuten,

122
00:08:23,110 --> 00:08:28,130
dass wir zu 3, 42, 5, 6 und dann "addition" kommen

123
00:08:28,130 --> 00:08:32,720
und dass sind definitiv zu wenige Additionsinstruktionen.

124
00:08:32,720 --> 00:08:36,220
Also ist es besser wenn wir uns was anderes ausdenken,

125
00:08:36,220 --> 00:08:38,460
damit wir unser System beibehalten können.

126
00:08:39,490 --> 00:08:44,100
Was wir da jetzt tun können ist unsere Regel rekursiv aufzubauen.

127
00:08:44,100 --> 00:08:47,160
Dafür öffnen wir wieder unsere Grammatik

128
00:08:47,840 --> 00:08:52,180
und entfernen unsere iterative Definition hier

129
00:08:52,180 --> 00:08:55,410
und ersetzen sie durch eine rekursive Definition.

130
00:08:55,410 --> 00:08:57,380
Das funktioniert ganz einfach:

131
00:08:57,380 --> 00:09:00,260
Wir schreiben hier statt "Zahl" "addition"

132
00:09:00,260 --> 00:09:05,930
und jetzt kann der Parser jedes mal, wenn er diese Additionsregel hier auswertet

133
00:09:05,930 --> 00:09:10,850
nicht nur an der Stelle eine Zahl erwarten, sondern wieder eine Addition.

134
00:09:10,850 --> 00:09:15,650
Allerdings ist die Rekursion im Moment noch endlos. Wir brauchen auch eine Abbruchbedingung.

135
00:09:15,650 --> 00:09:20,860
Dafür geben wir hier eine Alternative an in dem wir ein "oder" hinschreiben,

136
00:09:20,860 --> 00:09:26,060
das müsst ihr auch nicht in einer neuen Zeile schreiben, so wie ich es gerade tue, aber

137
00:09:26,060 --> 00:09:31,420
das ist das was die Konvention so sagt, wie man es am Ende noch ordentlich lesen kann

138
00:09:31,420 --> 00:09:33,890
Und schreiben hier nochmal "ZAHL" hin.

139
00:09:33,890 --> 00:09:39,290
Jetzt kann also eine Addition bestehen aus einer Addition,

140
00:09:39,290 --> 00:09:42,400
die einfach nur eine Zahl ist plus eine weitere Zahl.

141
00:09:42,400 --> 00:09:46,390
Oder die Addition kann bestehen aus einer Addition,

142
00:09:46,390 --> 00:09:49,530
die wiederrum eine Addition ist,

143
00:09:49,530 --> 00:09:52,170
die dann vielleicht erst eine Zahl ist

144
00:09:52,170 --> 00:09:56,050
und dann geht die Rekursion wieder zurück

145
00:09:56,050 --> 00:09:59,910
und es kann wieder plus Zahl und nochmal plus Zahl kommen

146
00:09:59,910 --> 00:10:02,580
und dann sind wir wieder oben angelangt.

147
00:10:02,580 --> 00:10:06,770
Schauen wir uns an, wie das jetzt in unserem Baum aussieht.

148
00:10:08,010 --> 00:10:12,840
Ich erstelle also zunächst wieder den Parser,

149
00:10:12,840 --> 00:10:17,100
dann kompilieren wir den Parser

150
00:10:17,820 --> 00:10:21,300
und generieren den Baum,

151
00:10:21,970 --> 00:10:24,660
schaun uns den Baum an,

152
00:10:26,090 --> 00:10:30,980
Jetzt seht ihr hier eine rekursive Definition von unserem Baum,

153
00:10:31,310 --> 00:10:35,810
die linke Seite unseres Baums ist jeweils wieder eine Addition,

154
00:10:35,810 --> 00:10:38,790
ihr könnt unsere ursprüngliche Rechnung in der

155
00:10:38,790 --> 00:10:43,750
in der Diagonale hier unten ablesen, nämlich "3+42+5+6"

156
00:10:43,750 --> 00:10:47,150
und wir können mit unserem Compiler nachher ganz einfach

157
00:10:47,150 --> 00:10:49,720
aus diesem Baum unsere Instruktionen generieren.

158
00:10:49,720 --> 00:10:53,090
Leider kann ich euch die Verwirrung im Moment nicht ersparen,

159
00:10:53,090 --> 00:10:57,020
dass hier dieser Teil des Baums ein Sonderfall darstellt,

160
00:10:57,020 --> 00:11:00,890
denn er hat nur ein Kind und wir dürfen hierfür nachher in unserem Compiler

161
00:11:00,890 --> 00:11:04,300
keine Additionsinstruktion generieren.

162
00:11:04,300 --> 00:11:07,450
Das wird uns aber im Compiler später keine Probleme machen,

163
00:11:07,450 --> 00:11:11,040
das ist leider das Einzige was ich euch dazu im Moment sagen kann.

164
00:11:11,040 --> 00:11:13,480
für den Rest funktioniert das sehr gut.

165
00:11:13,480 --> 00:11:16,790
Wenn wir jetzt hier links durchgehen,

166
00:11:16,790 --> 00:11:20,700
also immer zuerst die linke Seite, dann die rechte Seite, dann den Wurzelknoten

167
00:11:20,700 --> 00:11:25,480
und das hier als Sonderfall nur als drei ähm annehmen,

168
00:11:25,480 --> 00:11:32,840
dann haben wir 3, 42, addieren, 5, addieren, 6, addieren.

169
00:11:32,840 --> 00:11:37,020
Und damit kommen wir mit den richtigen Instruktionen raus

170
00:11:37,020 --> 00:11:40,790
mit der wir diese ganze Berechnung hier durchführen können.

171
00:11:40,790 --> 00:11:44,240
Das war der zweite Teil von "Let's build a compiler".

172
00:11:44,240 --> 00:11:47,470
In folgenden Teilen werden wir weitere Operatoren hinzufügen,

173
00:11:47,470 --> 00:11:52,490
inklusive Punkt-vor-Strich-Regelung, ausführbaren Code erzeugen und vieles mehr.

174
00:11:52,490 --> 00:11:55,770
Auch diesmal findet ihr in der Videobeschreibung wieder einen Affiliate-Link

175
00:11:55,770 --> 00:11:58,680
zum Buch "The definitve ANTLR4-Reference",

176
00:11:58,680 --> 00:12:01,400
bei dem ich ein paar Cent abbekomme wenn ihr darüber das Buch

177
00:12:01,400 --> 00:12:03,250
oder auch einen Kühlschrank kauft.

178
00:12:03,250 --> 00:12:07,220
Danke an Gadarol der mir für die Aufnahmen sein Studio zur Verfügung stellt

179
00:12:07,220 --> 00:12:10,760
und euch danke für eure Aufmerksamkeit, ich hoffe es hat euch Spaß gemacht,

180
00:12:10,760 --> 00:12:14,250
schaut wieder rein, wenn es heißt "Let's build a compiler".

181
00:12:14,250 --> 00:12:18,470
Mein Name ist yankee, tschüss und auf Wiedersehen, bis zum nächsten Mal.

