1
00:00:00,000 --> 00:00:03,017
Willkommen zurück zu "Let's build a compiler".

2
00:00:03,010 --> 00:00:04,942
In der letzten Folge haben wir angefangen

3
00:00:04,940 --> 00:00:07,720
einfache Funktionen in unsere Sprache aufzunehmen.

4
00:00:07,720 --> 00:00:09,382
Diese konnten jedoch nur aus einem

5
00:00:09,380 --> 00:00:12,013
return-Statement und nichts weiter bestehen.

6
00:00:12,010 --> 00:00:14,240
In dieser Folge werden wir unsere Funktionen

7
00:00:14,240 --> 00:00:15,942
so erweitern, dass sie auch weiteren

8
00:00:15,940 --> 00:00:17,471
Code enthalten können.

9
00:00:17,470 --> 00:00:18,884
In dem Rahmen werden wir uns

10
00:00:18,880 --> 00:00:21,240
auch erstmal mit Scopes beschäftigen.

11
00:00:21,240 --> 00:00:23,128
Denn wir wollen die Variablentabelle  

12
00:00:23,120 --> 00:00:25,466
mehrerer Funktionen trennen.

13
00:00:25,880 --> 00:00:27,120
Hier haben wir unser Beispiel

14
00:00:27,120 --> 00:00:28,315
aus letzter Folge:

15
00:00:28,310 --> 00:00:29,817
Das einfache "randomNumber"

16
00:00:29,810 --> 00:00:31,653
mit dem "return 4".

17
00:00:31,650 --> 00:00:34,328
Das kopiere ich jetzt einmal hier raus,

18
00:00:37,293 --> 00:00:39,217
füg' das in einem Texteditor ein

19
00:00:39,210 --> 00:00:41,653
und dann können wir hier leichter

20
00:00:41,653 --> 00:00:43,650
drin rumformatieren.

21
00:00:44,751 --> 00:00:47,951
Jetzt in diesem etwas besser lesbaren Beispiel

22
00:00:47,950 --> 00:00:49,493
werden wir den Quelltext

23
00:00:49,490 --> 00:00:51,306
ein wenig komplexer gestalten.

24
00:00:51,300 --> 00:00:52,808
Zum Beispiel könnten wir sagen:

25
00:00:52,800 --> 00:00:56,017
Wir haben hier ein Integer "i"

26
00:00:56,582 --> 00:00:59,640
dem weisen wir dann die Vier zu

27
00:01:00,137 --> 00:01:01,657
und dann wollen wir

28
00:01:01,650 --> 00:01:04,111
diese Variable hier zurückgeben.

29
00:01:04,342 --> 00:01:06,551
Es sollte also immernoch das gleiche Ergebnis

30
00:01:06,550 --> 00:01:08,746
rauskommen, aber der Quelltext ist jetzt

31
00:01:08,740 --> 00:01:10,573
ein bißchen komplizierter geworden.

32
00:01:10,570 --> 00:01:13,160
Und damit haben ein Beispiel für eine Funtkion

33
00:01:13,160 --> 00:01:16,048
die noch mehr als nur ein Returnstatement hat.

34
00:01:16,351 --> 00:01:18,831
Kopieren wir das ganze also wieder

35
00:01:19,391 --> 00:01:22,764
und fügen dies hier ein.

36
00:01:22,760 --> 00:01:24,475
Dafür muss ich natürlich zuerstmal

37
00:01:24,470 --> 00:01:26,435
diese Zeile hier kopieren,

38
00:01:28,977 --> 00:01:32,564
um dann das hier nochmal zu kopieren

39
00:01:32,560 --> 00:01:34,764
und hier einzufügen.

40
00:01:38,942 --> 00:01:41,137
So, dann fehlt hier hinten

41
00:01:41,130 --> 00:01:42,866
noch ein Komma

42
00:01:42,860 --> 00:01:45,231
und dann können wir den Test mal laufen lassen.

43
00:01:47,404 --> 00:01:49,480
Schauen wir uns das Ergebnis an:

44
00:01:49,480 --> 00:01:52,177
Und hier oben hat ANTLR gemeckert:

45
00:01:52,170 --> 00:01:53,782
Es sagt "mismatched input 'int'",

46
00:01:53,780 --> 00:01:55,942
es hätte nämlich ein "return" erwartet.

47
00:01:55,940 --> 00:01:58,013
Wenn wir jetzt auf unsere Grammatik schauen

48
00:01:58,010 --> 00:01:58,973
dann sehen wir jetzt hier,

49
00:01:58,970 --> 00:02:01,817
dass hinter der sich öffnenden geschweiften Klammer

50
00:02:01,810 --> 00:02:03,760
direkt ein "return" kommen sollte,

51
00:02:03,760 --> 00:02:06,231
nämlich das und nicht unser "int"

52
00:02:06,230 --> 00:02:08,515
mit der Variablendefinition.

53
00:02:08,510 --> 00:02:10,173
Also wollen wir jetzt hier,

54
00:02:10,170 --> 00:02:13,582
zwischen der sich öffnended Klammer und dem "return"

55
00:02:13,580 --> 00:02:15,706
noch beliebige Statements erlauben.

56
00:02:15,700 --> 00:02:17,960
Dafür füge ich jetzt hier also ein

57
00:02:21,840 --> 00:02:23,720
dass Statements vorkommen dürfen

58
00:02:23,720 --> 00:02:25,302
die eine "statementList" sind.

59
00:02:25,300 --> 00:02:27,155
Was die "statementList" jetzt genau ist

60
00:02:27,155 --> 00:02:29,150
müssen wir natürlich auch noch definieren.

61
00:02:29,786 --> 00:02:32,786
Dafür fügen wir hier eine neue Regeln ein.

62
00:02:39,928 --> 00:02:42,311
Also bedeutet unsere Statementlist

63
00:02:42,310 --> 00:02:44,271
dass wir ein Statement haben

64
00:02:44,270 --> 00:02:46,880
jeweils gefolgt von einem Semikolon

65
00:02:47,155 --> 00:02:49,693
und das darf dann beliebig häufig vorkommen,

66
00:02:49,690 --> 00:02:52,231
auch null mal vorkommen,

67
00:02:52,230 --> 00:02:53,720
denn es kann ja tatsächlich sein

68
00:02:53,720 --> 00:02:56,502
dass unsere Funktion einfach nur ein "return" enthält

69
00:02:56,500 --> 00:02:58,186
und kein sonstiges Statement.

70
00:02:58,180 --> 00:03:00,933
Dann generieren wir unseren Parser wieder neu

71
00:03:03,835 --> 00:03:06,857
und gehen hier auf "F5",

72
00:03:07,746 --> 00:03:10,128
führen unseren Test aus

73
00:03:12,617 --> 00:03:14,724
und wie ihr seht, es gibt jetzt hier oben

74
00:03:14,720 --> 00:03:17,564
keinen Fehler von ANTLR oder Jasmin mehr

75
00:03:17,560 --> 00:03:19,586
aber hier unten haben wir noch eine

76
00:03:19,580 --> 00:03:23,666
UndeclaredVariableException, nämlich die Variable "i"

77
00:03:23,660 --> 00:03:24,995
auf die wir hier zugreifen

78
00:03:24,990 --> 00:03:27,284
ist angeblich nicht definiert.

79
00:03:27,280 --> 00:03:28,617
Das liegt natürlich daran,

80
00:03:28,610 --> 00:03:30,497
dass wir jetzt zwar definiert haben

81
00:03:30,490 --> 00:03:32,377
in unser Grammatik dass dieser Teil hier

82
00:03:32,370 --> 00:03:34,711
vorkommen darf, in Form der statementList,

83
00:03:34,710 --> 00:03:37,351
aber wir generieren nie Instruktionen

84
00:03:37,350 --> 00:03:38,960
für diesen Code hier und deswegen

85
00:03:38,960 --> 00:03:42,040
ist natürlich auch die Variable "i" nicht definiert.

86
00:03:42,480 --> 00:03:44,671
Also gehen wir wieder in unseren Visitor

87
00:03:44,670 --> 00:03:47,542
zu unser "visitFunctionDefinition"

88
00:03:47,540 --> 00:03:49,973
und ... dann ...

89
00:03:49,970 --> 00:03:51,546
erzeugen wir jetzt erstmal

90
00:03:51,546 --> 00:03:53,540
den Code für unsere Statements.

91
00:04:00,653 --> 00:04:03,786
Und diese Liste fügen wir dann

92
00:04:03,780 --> 00:04:05,893
an dieser Stelle hier ein.

93
00:04:08,351 --> 00:04:10,235
Jetzt kann es allerdings auch sein

94
00:04:10,230 --> 00:04:13,275
dass diese "statementInstructions" hier "null" sind,

95
00:04:13,270 --> 00:04:15,986
denn wenn wir keine Instructions,

96
00:04:15,980 --> 00:04:19,097
also wenn wir keine Statements haben,

97
00:04:19,090 --> 00:04:21,911
dann kann dieses "visit" hier auch nicht generieren,

98
00:04:21,910 --> 00:04:23,968
es kommt einfach nur "null" zurück,

99
00:04:23,960 --> 00:04:26,462
weil das der Defaultrückgabewert ist

100
00:04:26,657 --> 00:04:29,520
und dann wollen wir hier an der Stelle

101
00:04:29,520 --> 00:04:30,937
auch nichts ausgeben.

102
00:04:30,930 --> 00:04:33,506
Also sagen wir hier

103
00:04:33,500 --> 00:04:36,342
dass bitte wenn "statementInstructions"

104
00:04:36,342 --> 00:04:38,340
gleich gleich null ist,

105
00:04:38,884 --> 00:04:42,462
dann soll hier bitte nichts hinzugefügt werden

106
00:04:42,460 --> 00:04:45,933
und ansonsten eben die "statementInstructions"

107
00:04:45,930 --> 00:04:50,262
mit dem Zeilenumbruch am Ende.

108
00:04:51,097 --> 00:04:54,182
Dann führen wir unsere Tests nochmal aus.

109
00:04:54,871 --> 00:04:56,222
Und wie wir sehen:

110
00:04:56,220 --> 00:04:57,484
Es hat alles funktioniert,

111
00:04:57,480 --> 00:04:59,484
alle Tests sind durchgelaufen,

112
00:04:59,484 --> 00:05:01,480
auch unser Neuer hier.

113
00:05:03,048 --> 00:05:05,880
Werfen wir hier nochmal einen Blick auf unseren Quelltext.

114
00:05:05,880 --> 00:05:07,871
Was wäre eigentlich wenn wir hier

115
00:05:07,870 --> 00:05:10,613
die Variable "int i" nocheinmal haben?

116
00:05:12,457 --> 00:05:15,857
Und dann beispielsweie hier 42 zuweisen

117
00:05:19,297 --> 00:05:21,955
und dies auch noch am Ende ausgeben.

118
00:05:22,382 --> 00:05:24,724
Jetzt haben wir die Variable "i" nämlich zweimal

119
00:05:24,720 --> 00:05:26,808
nämlich einmal hier und einmal hier.

120
00:05:27,222 --> 00:05:30,084
Wenn wir jetzt "randomNumber" aufrufen,

121
00:05:30,080 --> 00:05:32,866
dann müsste hier etwas zurückkommen

122
00:05:32,860 --> 00:05:33,951
oder auch nicht

123
00:05:34,240 --> 00:05:37,195
und hier müsste auch etwas ausgegeben werden.

124
00:05:37,190 --> 00:05:39,200
Was würde ihr für intuitiv halten

125
00:05:39,200 --> 00:05:41,200
was mit diesem Quelltext passiert?

126
00:05:41,200 --> 00:05:43,537
Ich würde sagen: Es wäre logisch

127
00:05:43,530 --> 00:05:45,684
wenn das hier, diese "i"

128
00:05:45,680 --> 00:05:48,026
so eine Art globale Variable wäre

129
00:05:48,020 --> 00:05:50,862
und das hier oben, im randomNumber

130
00:05:50,860 --> 00:05:54,951
eine lokale Variable und daher würde sich

131
00:05:54,950 --> 00:05:58,693
diese globale Variable hinter der lokalen verstecken.

132
00:05:58,690 --> 00:06:00,448
Wenn "randomNumber" aufgerufen wird,

133
00:06:00,440 --> 00:06:03,835
wird hier mit der lokalen Variable gearbeitet,

134
00:06:03,830 --> 00:06:05,355
es wird 4 zurückgegeben,

135
00:06:05,350 --> 00:06:07,195
hier wird vier ausgegeben

136
00:06:07,190 --> 00:06:09,177
und hier diese Funktion

137
00:06:09,170 --> 00:06:11,017
also an dieser Stelle ist natürlich von

138
00:06:11,010 --> 00:06:13,986
der Variable hier oben nichts bekannt

139
00:06:13,980 --> 00:06:16,702
und daher würde dann hier

140
00:06:16,700 --> 00:06:18,022
die 42 ausgegeben.

141
00:06:18,020 --> 00:06:22,088
Also müsste erst vier und dann 42 rauskommen.

142
00:06:22,080 --> 00:06:23,733
Schauen wir uns mal an

143
00:06:23,730 --> 00:06:25,937
was denn tatsächlich der Fall ist,

144
00:06:25,930 --> 00:06:29,280
was unser Compiler aus dem Quelltext erstellt.

145
00:06:29,280 --> 00:06:31,262
Dann kopieren wir uns den

146
00:06:32,342 --> 00:06:34,604
in einen neuen Testfall,

147
00:06:35,226 --> 00:06:39,386
ich kopier erstmal wieder unser Template hier oben

148
00:06:50,120 --> 00:06:52,817
und dann müsste ja meiner Meinung nach

149
00:06:52,810 --> 00:06:56,875
hier zuerst die vier ausgegeben werden

150
00:06:57,680 --> 00:06:59,164
...und...

151
00:06:59,573 --> 00:07:03,008
danach nocheinmal die 42.

152
00:07:06,404 --> 00:07:09,906
Dann führen wir den Compiler einmal aus

153
00:07:10,782 --> 00:07:13,182
und gucken was tatsächlich passiert ist.

154
00:07:13,475 --> 00:07:15,640
Tätsächlich haben wir das garnichts ausgegeben,

155
00:07:15,640 --> 00:07:18,528
sondern wir haben eine VariableAlreadyDefinedExcpeition

156
00:07:18,520 --> 00:07:21,160
bekommen, weil in Zeile 6,

157
00:07:21,160 --> 00:07:24,622
das ist also... 1, 2, 3, 4, 5, 6,

158
00:07:24,620 --> 00:07:26,293
das ist also diese Zeile hier,

159
00:07:26,290 --> 00:07:29,555
ist die Variable "i" angeblich schon definiert.

160
00:07:29,550 --> 00:07:31,422
Was mit anderen Worten heißt:

161
00:07:31,420 --> 00:07:33,782
Hier unten, dieser Teil weiss

162
00:07:33,780 --> 00:07:36,186
welche Variablen hier oben definiert sind

163
00:07:36,180 --> 00:07:38,604
und das sollte eigentlich nicht der Fall sein.

164
00:07:38,600 --> 00:07:40,617
Es ist auch tatsächlich ein Problem,

165
00:07:40,610 --> 00:07:42,924
denn auf die lokale Variablentabelle

166
00:07:42,920 --> 00:07:45,226
von dieser Funktion könnten wir,

167
00:07:45,220 --> 00:07:46,817
selbst wenn wir wollen

168
00:07:46,810 --> 00:07:49,222
nicht von einer anderen Funktion,

169
00:07:49,220 --> 00:07:51,297
also von unser "main"-Funktion her

170
00:07:51,290 --> 00:07:53,226
aus zugreifen. Dann müssten wir die Variablen

171
00:07:53,220 --> 00:07:56,831
auch woanders ablegen als in unser lokalen Variablentabelle.

172
00:07:56,830 --> 00:07:59,026
Das Problem was wir jetzt hier haben

173
00:07:59,020 --> 00:08:01,524
beschäftigt sich mit Scopes.

174
00:08:01,520 --> 00:08:03,951
Ein so ein Scope besagt:

175
00:08:03,950 --> 00:08:08,444
Diese Variablen sind in einem definierten Bereich gültig

176
00:08:08,440 --> 00:08:11,635
und ein so ein Definitionsbereich ist ein Scope.

177
00:08:11,630 --> 00:08:14,000
Und wir haben dann jetzt hier einen globalen Scope,

178
00:08:14,000 --> 00:08:15,617
nämlich den hier unten

179
00:08:15,610 --> 00:08:18,480
oder von mir aus ist es auch ein lokaler Scope,

180
00:08:18,480 --> 00:08:20,640
nämlich der der "main"-Funktion

181
00:08:20,640 --> 00:08:24,217
aber hier haben wir auf jedenfall einen anderen Scope,

182
00:08:24,210 --> 00:08:26,573
nämlich einen lokalen Scope

183
00:08:26,570 --> 00:08:29,382
der Funktion "randomNumber".

184
00:08:29,380 --> 00:08:30,444
Da wollen wir jetzt mal schauen

185
00:08:30,440 --> 00:08:32,213
was wir da machen können.

186
00:08:32,933 --> 00:08:35,728
Also schauen wir nochmal in unseren Visitor

187
00:08:35,720 --> 00:08:37,906
und schauen nochmal nach wie unser

188
00:08:37,900 --> 00:08:41,924
System mit der Variablendefinition eigentlich funktioniert.

189
00:08:41,920 --> 00:08:43,151
Wir haben hier oben diese Map

190
00:08:43,150 --> 00:08:44,728
mit der Variablentabelle,

191
00:08:44,720 --> 00:08:47,755
das ist einfach nur eine HashMap von Strings to Integers

192
00:08:47,750 --> 00:08:50,435
und die ordnet entsprechend jedem Variablennamen

193
00:08:50,430 --> 00:08:53,240
eine Position in der Variablentabelle zu.

194
00:08:53,502 --> 00:08:56,351
Jetzt haben wir aber nicht nur eine Variablentabelle

195
00:08:56,350 --> 00:08:58,560
sondern ganz viele, nämlich eine pro Funktion

196
00:08:58,560 --> 00:09:02,191
und das ist zumindest mal eine der "main"-Funktion

197
00:09:02,190 --> 00:09:04,733
und eine unser lokalen Funktion

198
00:09:04,730 --> 00:09:07,337
"randomNumber" in dem Beispiel welches wir eben hatten.

199
00:09:07,330 --> 00:09:08,546
Wir könnten auch noch sagen,

200
00:09:08,540 --> 00:09:11,871
dass der Scope der "main"-Funktion global sein soll,

201
00:09:11,870 --> 00:09:13,715
dann hätten wir eben einen globalen Scope

202
00:09:13,710 --> 00:09:17,324
und einen lokalen Scope für unsere Funktion "randomNumber".

203
00:09:17,320 --> 00:09:18,982
Und wenn wir noch mehr Funktionen hätten,

204
00:09:18,980 --> 00:09:20,915
dann eben noch mehr lokale Scopes.

205
00:09:20,910 --> 00:09:22,293
Wir müssen jetzt also in der Lage sein

206
00:09:22,290 --> 00:09:25,017
zwischen diesen Scopes hin- und herzuwecheln

207
00:09:25,010 --> 00:09:27,040
und zwar an den richtigen Stellen.

208
00:09:27,040 --> 00:09:28,777
Das heißt immer wenn wir uns gerade

209
00:09:28,770 --> 00:09:31,573
mit dem Inhalt einer Funktion beschäftigen

210
00:09:31,570 --> 00:09:33,564
brauchen wir die Variablentabelle

211
00:09:33,560 --> 00:09:36,151
die zu unser aktuellen Funktion passt.

212
00:09:37,102 --> 00:09:39,084
Das heißt zu Funktionen kommen wir

213
00:09:39,080 --> 00:09:41,880
immer wenn wir eine "functionDeclaration" bekommen.

214
00:09:42,573 --> 00:09:45,657
Jetzt haben wir hier diese "functionDefinition"s,

215
00:09:45,650 --> 00:09:48,120
jetzt können wir hier sagen, dass

216
00:09:48,488 --> 00:09:52,071
vor der Funktion... unser alter Scope,

217
00:09:52,070 --> 00:09:56,600
das ist die Variablentabelle,

218
00:09:56,950 --> 00:09:58,973
dass wir uns die merken

219
00:10:00,737 --> 00:10:04,671
und zwar ist das die "oldVariables"

220
00:10:06,426 --> 00:10:09,288
und dann legen wir uns

221
00:10:09,280 --> 00:10:12,617
in unser aktuellen Variablentabelle 

222
00:10:12,610 --> 00:10:15,511
eine neue Variablentabelle an,

223
00:10:15,510 --> 00:10:17,906
die am Anfang erstmal leer ist.

224
00:10:21,786 --> 00:10:23,826
Jetzt können wir wunderbar

225
00:10:23,820 --> 00:10:26,093
mit dieser Tabelle arbeiten

226
00:10:26,417 --> 00:10:29,168
und am Ende müssen wir natürlich diese

227
00:10:29,160 --> 00:10:32,484
alte Tabelle auch wiederherstellen, diese "oldVariables",

228
00:10:32,480 --> 00:10:34,684
das heißt am Ende der Methode können wir

229
00:10:34,680 --> 00:10:36,866
das was wir hier temporär verwendet haben,

230
00:10:36,860 --> 00:10:39,120
diese Variablestabelle einfach vergessen

231
00:10:39,120 --> 00:10:41,982
und dann hier entsprechend sagen:

232
00:10:41,980 --> 00:10:45,986
"variables" ist wieder "oldVariables".

233
00:10:45,980 --> 00:10:49,333
Jetzt muss das natürlich passieren vor dem "return",

234
00:10:49,330 --> 00:10:53,355
das heißt wir ziehen das hier in eine temporäre Variable,

235
00:10:54,560 --> 00:10:57,777
die unser result enthält mit dem generierten Code

236
00:10:57,770 --> 00:10:59,480
und die geben wir erst

237
00:10:59,480 --> 00:11:03,422
nachdem wir die Variablentabelle wiederhergestellt haben zurück.

238
00:11:06,497 --> 00:11:09,982
Dann probieren wir nochmal aus, was jetzt passiert.

239
00:11:12,453 --> 00:11:14,097
Und wie ihr seht:

240
00:11:14,090 --> 00:11:16,200
Alle Tests haben funktioniert,

241
00:11:16,200 --> 00:11:18,200
auch das Beispiel jetzt:

242
00:11:18,200 --> 00:11:21,773
Unsere Variablen sind jetzt getrennt,

243
00:11:21,770 --> 00:11:25,760
das heißt hier kommt tatsächlich erst die vier und dann die 42 raus.

244
00:11:25,760 --> 00:11:27,671
Was natürlich noch nicht passiert ist

245
00:11:27,670 --> 00:11:29,937
ist dass wir jetzt einen globalen Scope haben,

246
00:11:29,930 --> 00:11:31,955
ich habe es jetzt erstmal so implementiert

247
00:11:31,950 --> 00:11:34,502
dass wir zwei lokale Scopes haben, also

248
00:11:34,500 --> 00:11:38,573
die "main"-Funktion hier unten, die hat einen lokalen Scope

249
00:11:38,570 --> 00:11:39,960
und die hier hat einen lokalen.

250
00:11:39,960 --> 00:11:41,195
Das heißt wir könnten jetzt auch nicht

251
00:11:41,190 --> 00:11:43,408
von hier auf die "main"-Funktion zugreifen.

252
00:11:43,400 --> 00:11:46,208
Jetzt kann man natürlich sagen dass das Absicht ist,

253
00:11:46,200 --> 00:11:51,191
aber auf lange Sicht werden wir auch noch globale Variablen

254
00:11:51,190 --> 00:11:53,551
einbauen, einfach weil wir es können.

255
00:11:54,555 --> 00:11:56,511
In dieser Folge haben wir gelernt

256
00:11:56,510 --> 00:11:58,342
wie wir vor dem "return"-Statement

257
00:11:58,340 --> 00:12:00,933
beliebige weitere Instruktionen zulassen.

258
00:12:00,930 --> 00:12:03,675
Außerdem haben wir gelernt wie wir die Variablentabbellen

259
00:12:03,670 --> 00:12:07,595
mehrere Funktionen mit einfachen Mitteln voneinander trennen können.

260
00:12:07,800 --> 00:12:10,577
Trotzdem gibt es bei den Funktionen noch viel zu tun:

261
00:12:10,570 --> 00:12:12,840
Das Returnstatement muss aktuell noch immer

262
00:12:12,840 --> 00:12:15,351
das letzte Statement in jeder Funktion sein.

263
00:12:15,350 --> 00:12:17,622
Es gibt keine globalen Variablen.

264
00:12:17,620 --> 00:12:19,528
Wir unterstützen noch keine Parameter

265
00:12:19,520 --> 00:12:22,066
und auch keine Funktionen ohne Rückgabewert.

266
00:12:22,060 --> 00:12:25,386
Wie wir all dies umsetzen seht ihn den nächsten Folgen.

267
00:12:26,128 --> 00:12:29,351
Schreibt mir eure Fragen, Probleme und Wünsche in die Kommentare.

268
00:12:29,350 --> 00:12:31,906
Lasst mir einen Daumen da wenn euch das Video gefallen hat

269
00:12:31,900 --> 00:12:34,946
und ein Abo damit ihr keine neue Folge verpasst.

270
00:12:35,177 --> 00:12:36,426
Vielen Dank an Gadarol

271
00:12:36,420 --> 00:12:38,893
der mir für die Aufnahmen sein Studio zur Verfügung stellt

272
00:12:38,890 --> 00:12:41,751
und euch vielen Dank für eure Aufmerksamkeit.

273
00:12:41,750 --> 00:12:43,066
Mein Name ist yankee,

274
00:12:43,060 --> 00:12:44,733
ich hoffe es hat euch Spaß gemacht,

275
00:12:44,730 --> 00:12:45,995
bis zum nächsten Mal

276
00:12:45,990 --> 00:12:48,880
wenn es wieder heißt: "Let's build a compiler".

