1
00:00:00,000 --> 00:00:02,990
Welcome back to "Let's build a compiler".

2
00:00:02,990 --> 00:00:06,160
In this episode we are going to improve the visitor

3
00:00:06,160 --> 00:00:09,060
from last episode converning readbility and usefulness.

4
00:00:09,060 --> 00:00:12,510
My name is yankee and I wish you a lot of fun.

5
00:00:13,470 --> 00:00:16,220
Our visitor is currently doing what it is supposed to

6
00:00:16,220 --> 00:00:18,660
but it is not doing so in a very readable way.

7
00:00:18,660 --> 00:00:22,360
Here we have "ctx.getChildCount()==1"

8
00:00:22,360 --> 00:00:24,360
but what is this telling us?

9
00:00:24,490 --> 00:00:26,810
Of course when I open the tree next to it

10
00:00:26,810 --> 00:00:27,980
then one can see:

11
00:00:27,980 --> 00:00:31,990
Sometimes an addition node has only one child

12
00:00:32,350 --> 00:00:33,990
and sometimes it has three children.

13
00:00:34,290 --> 00:00:36,550
In here we are handling the case for one child

14
00:00:36,550 --> 00:00:38,530
und if you have the tree in front of you then

15
00:00:38,530 --> 00:00:40,530
you can see what the idea is

16
00:00:41,090 --> 00:00:43,520
but it is not really easy to understand

17
00:00:43,520 --> 00:00:46,200
and it is time consuming to explain again every time.

18
00:00:46,200 --> 00:00:48,700
If our visitor reaches bigger sizes

19
00:00:48,700 --> 00:00:51,320
and our language has more and more elements

20
00:00:51,320 --> 00:00:53,510
then it will be even more difficult for us

21
00:00:53,510 --> 00:00:56,600
to keep in mind what is meant by our code.

22
00:00:56,600 --> 00:00:59,430
The same is true for context.getChild(0)

23
00:00:59,430 --> 00:01:00,990
and getChild(2).

24
00:01:01,680 --> 00:01:04,390
For an outsider or after a while

25
00:01:04,390 --> 00:01:07,600
after complexity has risen also for us

26
00:01:07,600 --> 00:01:10,250
it will be very difficult to understand

27
00:01:10,250 --> 00:01:11,580
what these parts do

28
00:01:11,580 --> 00:01:14,960
or which part of our tree they access.

29
00:01:15,430 --> 00:01:17,970
That is why I am going to show you how this is done better.

30
00:01:19,680 --> 00:01:21,850
At first we open our grammar

31
00:01:21,850 --> 00:01:24,210
and add labels.

32
00:01:24,210 --> 00:01:26,050
For example I give this subrule,

33
00:01:26,250 --> 00:01:28,940
meaning this part of the rule,

34
00:01:28,940 --> 00:01:31,280
the label "Plus".

35
00:01:32,450 --> 00:01:34,600
And this part of the subrule,

36
00:01:35,170 --> 00:01:38,160
after I moved the semicolon to the next line

37
00:01:38,160 --> 00:01:39,540
so that it does not disturb anymore,

38
00:01:39,540 --> 00:01:43,320
this subrule gets the label "Zahl"[german: Number].

39
00:01:45,700 --> 00:01:48,580
Furthermore I assign to the smaller parts of the rules

40
00:01:48,580 --> 00:01:50,770
labels as well.

41
00:01:51,370 --> 00:01:54,210
For example this part here is "links"[german: left],

42
00:01:54,210 --> 00:01:56,160
the left part of the addition

43
00:01:56,160 --> 00:01:58,280
and this part is "rechts"[german: right],

44
00:01:58,280 --> 00:02:00,400
the right part of the addition.

45
00:02:00,550 --> 00:02:04,660
And the part down here is... Well... My number.

46
00:02:07,450 --> 00:02:08,960
Then I save this

47
00:02:09,340 --> 00:02:11,950
and generate

48
00:02:12,040 --> 00:02:13,050
the

49
00:02:14,400 --> 00:02:16,670
parser again with ANTLR.

50
00:02:17,380 --> 00:02:19,380
Now in eclipse

51
00:02:19,380 --> 00:02:21,740
I need to press F5 on the parser

52
00:02:21,740 --> 00:02:23,740
so that it refreshes itself

53
00:02:23,740 --> 00:02:25,000
and as we can immediately see

54
00:02:25,000 --> 00:02:27,560
our visitor does not fit anymore to

55
00:02:27,560 --> 00:02:29,970
the ANTLR generated DemoBaseVisitor,

56
00:02:29,970 --> 00:02:32,130
because that one changed due to the labels.

57
00:02:34,940 --> 00:02:38,740
As of late we have a method "visitPlus"

58
00:02:38,740 --> 00:02:41,480
and a method "visitZahl".

59
00:02:43,860 --> 00:02:47,560
These are going to be called for the matching part

60
00:02:47,560 --> 00:02:50,500
which has child count one

61
00:02:50,500 --> 00:02:52,940
because if we have another look

62
00:02:52,940 --> 00:02:55,300
here, this is the part of the rule

63
00:02:55,300 --> 00:02:56,980
with child count one,

64
00:02:56,980 --> 00:02:58,980
that calls the subrule "Zahl"

65
00:02:58,980 --> 00:03:00,980
and the one with child count three

66
00:03:00,980 --> 00:03:03,590
calls "visitPlus".

67
00:03:04,840 --> 00:03:06,860
Thus we have here "visitPlus",

68
00:03:07,380 --> 00:03:09,820
that is the part here

69
00:03:16,310 --> 00:03:18,620
and furthermore we have

70
00:03:18,620 --> 00:03:21,130
"visitZahl"

71
00:03:21,130 --> 00:03:23,260
and "visitZahl" is

72
00:03:23,260 --> 00:03:24,790
this part of the rule.

73
00:03:25,180 --> 00:03:28,110
The old "visitAddition"-Rule ehm...

74
00:03:28,110 --> 00:03:29,700
-method is thrown away,

75
00:03:31,740 --> 00:03:35,720
We add our "return null"

76
00:03:40,910 --> 00:03:42,530
and see that our visitor

77
00:03:42,530 --> 00:03:44,730
has already gained a little readability.

78
00:03:45,030 --> 00:03:46,780
But it could still be better.

79
00:03:46,780 --> 00:03:50,690
Because we still have ctx.getChild(2).

80
00:03:51,660 --> 00:03:52,690
Instead,

81
00:03:52,690 --> 00:03:54,190
we want to access the part

82
00:03:54,190 --> 00:03:56,190
with the lable "rechts".

83
00:03:56,420 --> 00:03:58,290
How do we do that? Easy:

84
00:03:58,290 --> 00:04:00,530
By entering "rechts" here.

85
00:04:01,270 --> 00:04:02,770
This is a token.

86
00:04:03,920 --> 00:04:05,520
When we call getText()

87
00:04:05,520 --> 00:04:08,370
on this token, then we get

88
00:04:08,370 --> 00:04:09,900
the text of the node.

89
00:04:11,040 --> 00:04:13,670
It is exactly the same down here, except

90
00:04:14,100 --> 00:04:16,280
out token is called "Zahl".

91
00:04:23,710 --> 00:04:26,690
Now I run our compiler again

92
00:04:31,230 --> 00:04:32,250
and we see:

93
00:04:32,250 --> 00:04:35,240
I forgot the "visitChildren".

94
00:04:35,240 --> 00:04:36,870
Of course this is important,

95
00:04:36,870 --> 00:04:39,550
because after all the "visitPlus"

96
00:04:39,550 --> 00:04:41,550
has subnodes.

97
00:04:47,010 --> 00:04:52,280
Now again... And we still have the same output

98
00:04:52,280 --> 00:04:55,660
but now with a much better readable visitor.

99
00:04:55,660 --> 00:04:57,140
Our current approach

100
00:04:57,140 --> 00:05:00,460
to directly write to System.out has a couple of disadvantages:

101
00:05:00,460 --> 00:05:02,610
Because what has been written to the console

102
00:05:02,610 --> 00:05:04,430
that is written away and cannot be accessed anymore.

103
00:05:04,430 --> 00:05:05,990
E.g. we cannot post process the output.

104
00:05:05,990 --> 00:05:08,030
And we cannot change our mind anymore

105
00:05:08,030 --> 00:05:10,680
and say "hey we do not even want to write to console"

106
00:05:10,680 --> 00:05:12,120
but rather to a file.

107
00:05:12,120 --> 00:05:14,300
That's why we are going to change this a bit:

108
00:05:14,300 --> 00:05:16,330
We return our values that we

109
00:05:16,330 --> 00:05:19,370
generated here rather then printing them.

110
00:05:20,980 --> 00:05:23,840
For "visitZahl" this is easy, we say:

111
00:05:24,160 --> 00:05:27,000
"return context.zahl.getText());"

112
00:05:27,000 --> 00:05:29,000
instead of what we have right now.

113
00:05:30,680 --> 00:05:31,960
Up here we would return

114
00:05:31,960 --> 00:05:34,700
the value of our children that we have

115
00:05:35,860 --> 00:05:39,470
plus a line feed plus

116
00:05:41,880 --> 00:05:45,420
the right number

117
00:05:46,090 --> 00:05:48,290
plus another line feed

118
00:05:56,010 --> 00:05:59,040
and then again plus "addition".

119
00:06:01,000 --> 00:06:02,670
"return"

120
00:06:15,610 --> 00:06:17,360
But the whole thing has a problem:

121
00:06:17,360 --> 00:06:19,450
Out "visitChildren" method

122
00:06:19,450 --> 00:06:21,610
traverses over multiple nodes,

123
00:06:21,610 --> 00:06:23,900
but should only return a single string

124
00:06:23,900 --> 00:06:24,680
and it does not know

125
00:06:24,680 --> 00:06:27,700
how to concatinate two strings.

126
00:06:27,700 --> 00:06:29,830
Furthermore we have a large number of nodes

127
00:06:29,830 --> 00:06:32,720
that have no visit method at all

128
00:06:32,720 --> 00:06:34,850
and these always generate simply

129
00:06:34,850 --> 00:06:37,740
"null" as return value by default.

130
00:06:37,740 --> 00:06:39,330
Wie have to teach ANTLR

131
00:06:39,330 --> 00:06:40,660
or more precisely our

132
00:06:40,660 --> 00:06:43,080
ANTLR generated visitor

133
00:06:43,080 --> 00:06:45,530
how to concatinate those values.

134
00:06:46,300 --> 00:06:47,450
We do that by

135
00:06:47,450 --> 00:06:50,130
overriding the aggregateResult method.

136
00:06:51,530 --> 00:06:53,540
In this method we always get

137
00:06:53,540 --> 00:06:55,210
an existing result

138
00:06:55,210 --> 00:06:58,100
and another result which should be appended.

139
00:06:58,100 --> 00:07:00,100
And both can possibly be "null".

140
00:07:00,100 --> 00:07:01,640
During the first call

141
00:07:01,640 --> 00:07:03,040
"aggregate" is null

142
00:07:03,040 --> 00:07:05,590
and only "nextResult" has a value,

143
00:07:05,590 --> 00:07:08,650
because we should

144
00:07:08,650 --> 00:07:10,730
append something to nothing.

145
00:07:10,730 --> 00:07:13,660
And if both is set,

146
00:07:13,660 --> 00:07:15,000
then we have two item

147
00:07:15,000 --> 00:07:17,600
that we want to concatinate.

148
00:07:17,600 --> 00:07:19,810
To make it simple:

149
00:07:20,190 --> 00:07:21,320
We look up:

150
00:07:21,320 --> 00:07:23,940
Is "aggregate" null?

151
00:07:27,660 --> 00:07:31,760
Then we return "nextResult".

152
00:07:34,400 --> 00:07:37,750
If "nextResult" is null,

153
00:07:43,170 --> 00:07:46,430
then we return "aggregate".

154
00:07:46,430 --> 00:07:50,160
And otherwise obviously both is not null

155
00:07:50,160 --> 00:07:54,220
and we return aggregate

156
00:07:54,220 --> 00:08:00,030
plus a line feed plus "nextResult".

157
00:08:02,290 --> 00:08:03,520
Now we need to

158
00:08:03,520 --> 00:08:05,170
print everything somewhere.

159
00:08:05,170 --> 00:08:07,170
For that we navigate to our Main class

160
00:08:07,170 --> 00:08:10,550
and this visit method will now return the aggregated result

161
00:08:10,550 --> 00:08:13,420
of all our calls.

162
00:08:14,980 --> 00:08:17,300
And that's what we print.

163
00:08:21,050 --> 00:08:23,620
As you can see: The result has not changed,

164
00:08:23,620 --> 00:08:26,450
thus it still works.

165
00:08:26,450 --> 00:08:28,110
We have now made our visitor

166
00:08:28,110 --> 00:08:30,110
more readable using labels

167
00:08:30,110 --> 00:08:33,080
and more useful with the help of return values.

168
00:08:33,080 --> 00:08:34,800
In the next videos we are going to generate actual instruction code

169
00:08:34,800 --> 00:08:37,060
execute the generated instructions

170
00:08:37,060 --> 00:08:39,170
und much more.

171
00:08:39,220 --> 00:08:40,360
Leave some thumbs!

172
00:08:40,360 --> 00:08:43,430
Write your comments, notes and questions in the comments.

173
00:08:43,430 --> 00:08:45,510
Subscribe to my channel to be informed

174
00:08:45,510 --> 00:08:48,740
of new episodes in the future.

175
00:08:48,740 --> 00:08:50,200
Thanks to Gadarol

176
00:08:50,200 --> 00:08:53,120
who allows me to use his studio for these recordings.

177
00:08:53,120 --> 00:08:54,790
I hope you had a lot of fun,

178
00:08:54,790 --> 00:08:56,680
goodbye and see you next time.

179
00:08:56,680 --> 00:08:58,530
Tune in again, when we return back to:

180
00:08:58,530 --> 00:09:00,530
"Let's build a compiler".

