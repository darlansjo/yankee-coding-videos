1
00:00:00,000 --> 00:00:02,610
Welcome back to "Let's build a compiler".

2
00:00:02,610 --> 00:00:06,790
In this episode I show you how to use an ANTLR generated visitor

3
00:00:06,790 --> 00:00:09,740
combined with code of your own to process your syntax tree.

4
00:00:09,740 --> 00:00:13,500
First we want to add our parser in Eclipse

5
00:00:13,500 --> 00:00:16,440
so that we can code more comfortable later.

6
00:00:16,440 --> 00:00:20,130
Download eclipse on eclipse.org,

7
00:00:20,130 --> 00:00:22,150
go to "Download eclipse" right here

8
00:00:22,150 --> 00:00:26,560
and that's where I choose "Eclipse Standard".

9
00:00:26,560 --> 00:00:28,670
I already downloaded it

10
00:00:28,670 --> 00:00:30,960
and also started it.

11
00:00:30,960 --> 00:00:33,690
Now here we have an empty "Package Explorer"

12
00:00:33,690 --> 00:00:37,580
and here we do: Right click -> New -> Java Project

13
00:00:37,580 --> 00:00:40,440
and create a new project. I call it...

14
00:00:40,440 --> 00:00:44,120
...Parser since it is going to contain a parser.

15
00:00:44,120 --> 00:00:46,120
Then we click "Finish"

16
00:00:46,120 --> 00:00:49,590
and we create a folder

17
00:00:49,590 --> 00:00:53,120
container our grammar

18
00:00:53,120 --> 00:00:57,470
and we create a folder

19
00:00:57,470 --> 00:01:00,990
where we are going to store out ANTLR-Jar.

20
00:01:00,990 --> 00:01:03,380
Now we are going to add these to the project

21
00:01:03,380 --> 00:01:05,670
by using "Import" here.

22
00:01:07,210 --> 00:01:10,940
On my system the Jar is stored in compiler/lib

23
00:01:11,820 --> 00:01:17,480
and we fetch the grammar from our grammar directory

24
00:01:17,480 --> 00:01:21,990
which is compiler/Demo.g4 on my system.

25
00:01:23,900 --> 00:01:28,080
And now we can already continue with generating the parser.

26
00:01:28,080 --> 00:01:30,510
To do so we switch to console

27
00:01:31,020 --> 00:01:35,510
and go to the directory of our eclipse workspace.

28
00:01:35,510 --> 00:01:38,060
On my system that's just "workspace".

29
00:01:38,060 --> 00:01:40,850
In there is a folder with our project

30
00:01:40,850 --> 00:01:44,190
"Parser" and in that folder is the folder "grammar"

31
00:01:44,190 --> 00:01:46,270
which we have just created

32
00:01:46,270 --> 00:01:49,640
and that's where our grammar can be found.

33
00:01:50,020 --> 00:01:52,260
Now we can fire up ANTLR again

34
00:01:52,260 --> 00:01:54,750
and have it generate our parser

35
00:01:54,750 --> 00:02:01,700
by calling java -jar ../lib and then antlr.jar.

36
00:02:01,850 --> 00:02:04,450
Then let's check which options we need:

37
00:02:04,450 --> 00:02:07,080
This time I want that our parser

38
00:02:07,080 --> 00:02:10,240
is not just stored in the Java default package

39
00:02:10,240 --> 00:02:12,620
but in an explicitly named package.

40
00:02:12,620 --> 00:02:15,480
That's why we have the option "-package"

41
00:02:15,480 --> 00:02:19,040
which generates the package command

42
00:02:19,040 --> 00:02:21,410
into the header of the Java file.

43
00:02:22,700 --> 00:02:24,090
Thus I specify it now

44
00:02:24,090 --> 00:02:25,690
and as a package I choose

45
00:02:25,690 --> 00:02:34,010
de.letsbuildacompiler.parser

46
00:02:36,470 --> 00:02:39,140
Then I also want to select an "output-dir"

47
00:02:39,140 --> 00:02:41,880
which is where our Java files are stored.

48
00:02:42,140 --> 00:02:44,810
This starts with ../src,

49
00:02:44,810 --> 00:02:47,790
in eclipse that is this folder here

50
00:02:48,600 --> 00:02:51,080
and then also the path

51
00:02:51,080 --> 00:02:54,760
including the package, because ANTLR does not do that automatically.

52
00:02:54,760 --> 00:03:03,270
Thus "de/letsbuildacompiler/parser".

53
00:03:04,920 --> 00:03:08,400
Then we do not need a listener for now.

54
00:03:09,460 --> 00:03:11,000
Thus I disable it.

55
00:03:11,000 --> 00:03:15,160
But I want to show you what you can do with a visitor

56
00:03:15,160 --> 00:03:17,960
and thus I enable the option "-visitor".

57
00:03:18,530 --> 00:03:20,370
And now, very important:

58
00:03:20,370 --> 00:03:22,640
Supply the name of the grammar.

59
00:03:24,050 --> 00:03:25,870
Then we execute the whole thing

60
00:03:26,690 --> 00:03:28,930
and now when in eclipse

61
00:03:28,930 --> 00:03:30,610
we press "F5"

62
00:03:31,100 --> 00:03:36,310
and see in the "src" directory our generated visitor and parser.

63
00:03:37,360 --> 00:03:40,000
While doing so we discover that in the moment

64
00:03:40,780 --> 00:03:44,080
the org.antlr-Package up here cannot be found.

65
00:03:44,080 --> 00:03:47,110
That is because we did not configure our build path yet.

66
00:03:47,660 --> 00:03:50,320
Thus we go here with the right mouse button

67
00:03:50,680 --> 00:03:52,050
on the parser project,

68
00:03:52,050 --> 00:03:54,780
then "Build Path" -> "Configure Build Path..."

69
00:03:55,300 --> 00:03:57,310
and then the "Libraries"-Tab,

70
00:03:57,950 --> 00:03:59,530
then we go to "Add JASs..."

71
00:04:00,030 --> 00:04:03,380
and then we add in "lib" out antlr.jar.

72
00:04:05,870 --> 00:04:09,270
Now eclipse can find everything it needs,

73
00:04:09,270 --> 00:04:10,990
can compile these files

74
00:04:11,240 --> 00:04:12,680
and everybody is happy.

75
00:04:15,320 --> 00:04:17,430
As announced earlier I want to show you next

76
00:04:17,430 --> 00:04:19,600
which great things we can do with the visitor.

77
00:04:20,130 --> 00:04:22,490
To do so we create a new project,

78
00:04:23,510 --> 00:04:25,640
the project I call "compiler".

79
00:04:29,380 --> 00:04:31,620
In the "Projects"-Tab of the project

80
00:04:31,620 --> 00:04:33,550
we add a dependency on our parser

81
00:04:33,550 --> 00:04:36,150
because the compiler uses our parser.

82
00:04:38,760 --> 00:04:40,270
And then we create here

83
00:04:40,270 --> 00:04:42,470
in our newly created project

84
00:04:42,470 --> 00:04:44,200
a new class

85
00:04:44,200 --> 00:04:52,060
in the package "de.letsbuildacompiler.parser",

86
00:04:52,370 --> 00:04:55,350
ehm... no... Here we use "Compiler"

87
00:04:58,220 --> 00:05:02,110
and call the class "MyVisitor".

88
00:05:06,780 --> 00:05:09,760
This class derives from the generated

89
00:05:09,760 --> 00:05:11,760
"DemoBaseVisitor".

90
00:05:16,500 --> 00:05:17,700
This class gets a type.

91
00:05:17,700 --> 00:05:19,860
In the beginning the type is not important

92
00:05:19,860 --> 00:05:21,610
but later it is going to be very important.

93
00:05:21,610 --> 00:05:24,150
For now I set the type to "String".

94
00:05:24,650 --> 00:05:27,400
Now you can already see an error here:

95
00:05:27,400 --> 00:05:29,320
"The hierarchy is inconsistent".

96
00:05:29,320 --> 00:05:31,660
When I save now another error comes up

97
00:05:32,010 --> 00:05:34,230
which reads (which is more helpful):

98
00:05:34,230 --> 00:05:37,760
"The AbstractParseTreeVisitor cannot be resolved".

99
00:05:38,080 --> 00:05:41,360
That is because in our parser project

100
00:05:42,010 --> 00:05:44,670
we did not in the build path

101
00:05:44,670 --> 00:05:47,360
that the ANTLR-Jar should be supplied

102
00:05:47,360 --> 00:05:48,900
to dependent projects.

103
00:05:49,280 --> 00:05:51,460
We do that by going to "Java Build Path"

104
00:05:51,460 --> 00:05:54,810
and then "Order and Export" for the antlr.jar

105
00:05:54,810 --> 00:05:56,980
we set the checkbox here for "export".

106
00:05:56,980 --> 00:05:58,770
Then we click "OK"

107
00:05:58,770 --> 00:06:00,770
and everybody is happy.

108
00:06:01,660 --> 00:06:03,960
If we press Ctrl+Space now

109
00:06:03,960 --> 00:06:06,520
then we see a couple of proposals on what we could do.

110
00:06:06,520 --> 00:06:08,400
Which mainly is overriding methods.

111
00:06:08,400 --> 00:06:10,880
Now I start to type "visit"

112
00:06:11,840 --> 00:06:15,380
and that's where wie find out method of interest

113
00:06:15,380 --> 00:06:18,170
name the "visitAddition"-method.

114
00:06:19,000 --> 00:06:20,780
That one is called exactly  like the rule

115
00:06:20,780 --> 00:06:23,360
"addition" in our grammar.

116
00:06:25,320 --> 00:06:28,810
Instead of this default implementation

117
00:06:29,090 --> 00:06:31,090
we can do something different now.

118
00:06:32,090 --> 00:06:35,010
As a reminder I'll show you

119
00:06:35,010 --> 00:06:38,020
what the tree looks like and what we can do here.

120
00:06:46,950 --> 00:06:48,640
Here: The tree.

121
00:06:49,720 --> 00:06:54,230
And the context node "AdditionContext"

122
00:06:54,230 --> 00:06:57,610
is now a node in the tree.

123
00:06:58,680 --> 00:07:02,890
We want to traverse these nodes in post order

124
00:07:02,890 --> 00:07:05,300
and we need to take a differentiation into account:

125
00:07:05,300 --> 00:07:09,150
Namely: The node may have a child

126
00:07:09,150 --> 00:07:11,230
like the one here at the bottom with the 3

127
00:07:11,230 --> 00:07:13,430
or it can have three children, namely

128
00:07:13,430 --> 00:07:16,830
another addition, a plus and a number.

129
00:07:17,750 --> 00:07:19,850
We need to distinguish these now.

130
00:07:19,890 --> 00:07:23,150
We do this simply by looking up:

131
00:07:23,780 --> 00:07:30,220
if... context... dot... get child count

132
00:07:30,220 --> 00:07:32,220
is equal to one

133
00:07:35,520 --> 00:07:38,800
(by the way: If you wonder about all my typos

134
00:07:38,800 --> 00:07:41,710
that is because first my microphone

135
00:07:41,710 --> 00:07:43,960
 is between me any my keyboard

136
00:07:43,960 --> 00:07:45,880
and I cannot see the keyboard and second

137
00:07:45,880 --> 00:07:48,300
this is a very unfamiliar keyboard for me

138
00:07:48,300 --> 00:07:52,020
because as mentioned before I am in Gadarol's studio),

139
00:07:55,310 --> 00:07:58,060
Now I just output the number

140
00:07:58,060 --> 00:07:59,990
if there is a number

141
00:07:59,990 --> 00:08:02,640
and I access this one by

142
00:08:02,640 --> 00:08:09,340
calling context.getChild(0).

143
00:08:10,100 --> 00:08:13,270
For comparision see that next to the tree:

144
00:08:13,920 --> 00:08:16,940
If we are here at the lower node which has only a single child

145
00:08:16,940 --> 00:08:20,310
where we have the three here then this is our first child

146
00:08:20,750 --> 00:08:23,000
and the numbering starts with zero

147
00:08:23,000 --> 00:08:25,920
and thus we use getChild(0) here

148
00:08:25,920 --> 00:08:28,840
to access the three down here.

149
00:08:30,770 --> 00:08:33,770
If the node does not have exactly one child

150
00:08:33,770 --> 00:08:35,840
then it has three nodes.

151
00:08:36,840 --> 00:08:40,400
In this case I want to output the number

152
00:08:40,400 --> 00:08:42,780
which is on the right. That is now

153
00:08:42,780 --> 00:08:45,640
the node number 3, again

154
00:08:45,640 --> 00:08:49,080
following zero based indexing the node 2.

155
00:08:50,350 --> 00:08:53,830
And furthermore

156
00:08:53,830 --> 00:08:57,000
we output that now an addition follows.

157
00:09:04,580 --> 00:09:07,030
Good? No? Anything missing?

158
00:09:07,480 --> 00:09:10,340
Yes: A return statement.

159
00:09:10,340 --> 00:09:12,420
For now I just use "return null".

160
00:09:12,420 --> 00:09:15,090
As already anounced this is going to change later

161
00:09:15,090 --> 00:09:16,750
and this is going to be interesting

162
00:09:16,750 --> 00:09:19,890
but for now we do not need it.

163
00:09:20,440 --> 00:09:24,130
What more is missing? We need to traverse our child nodes.

164
00:09:24,130 --> 00:09:27,120
And since I said that we need to do this post order,

165
00:09:27,120 --> 00:09:29,580
meaning we process the child nodes first

166
00:09:29,580 --> 00:09:32,850
and only after that have a look at the root node,

167
00:09:32,850 --> 00:09:36,230
we need to do that before we generate our outputs here.

168
00:09:36,870 --> 00:09:38,920
For our convinience ANTLR

169
00:09:38,920 --> 00:09:42,400
generated a visitChildren method for us

170
00:09:42,400 --> 00:09:44,780
to which we simply pass our context here

171
00:09:44,780 --> 00:09:47,340
and that one say: Go through all childen

172
00:09:47,340 --> 00:09:50,690
and call the matching visit method.

173
00:09:51,790 --> 00:09:54,500
Then also need a main class.

174
00:09:58,020 --> 00:10:00,010
I call it meaningfully "Main".

175
00:10:00,010 --> 00:10:04,080
It gets a "public static main" method

176
00:10:08,370 --> 00:10:10,680
and here we are going to call ANTLR,

177
00:10:10,680 --> 00:10:13,540
generate a tree and then

178
00:10:14,240 --> 00:10:16,620
feed our visitor with the tree.

179
00:10:16,620 --> 00:10:18,770
This works as follows:

180
00:10:18,770 --> 00:10:22,210
At first we need an ANTLR-Input stream

181
00:10:26,940 --> 00:10:32,870
and we can use as input and ANTLRFileStream

182
00:10:32,870 --> 00:10:37,180
and read from our code.demo file.

183
00:10:37,180 --> 00:10:42,060
For that the code.demo file needs to exist here as well,

184
00:10:42,060 --> 00:10:46,580
accordingly I import it into our project

185
00:10:49,640 --> 00:10:52,730
and this here throws an IOException.

186
00:10:52,730 --> 00:10:54,920
For this tutorial we do not need to

187
00:10:54,920 --> 00:10:58,480
deal with all the exceptions

188
00:10:58,480 --> 00:11:02,300
that's why I just add "throws Exception" to our main method.

189
00:11:02,300 --> 00:11:04,600
In case of an Error this means

190
00:11:04,600 --> 00:11:08,300
that our program will just print an error and exit

191
00:11:08,300 --> 00:11:10,830
but for this project this is OK.

192
00:11:11,780 --> 00:11:14,390
Then we need to create our Lexer.

193
00:11:14,390 --> 00:11:16,390
The lexer was generated here

194
00:11:16,390 --> 00:11:18,170
and is called DemoLexer.

195
00:11:18,550 --> 00:11:21,720
That one is called just like your grammar

196
00:11:21,720 --> 00:11:23,210
in my case the grammar is called "Demo"

197
00:11:23,210 --> 00:11:25,820
that's why the Lexer is also called DemoLexer.

198
00:11:34,930 --> 00:11:39,500
And now we feed the lexer with our input.

199
00:11:40,740 --> 00:11:43,160
From the lexer results a...

200
00:11:43,970 --> 00:11:45,650
...CommonTokenStream.

201
00:11:45,950 --> 00:11:48,680
You should be aware that ANTLR

202
00:11:48,680 --> 00:11:51,680
oftentimes offers two of these classes

203
00:11:51,680 --> 00:11:53,090
to you. Also here:

204
00:11:53,090 --> 00:11:54,620
CommonTokenStream exists twice

205
00:11:54,620 --> 00:11:56,140
and the difference is here:

206
00:11:56,140 --> 00:11:59,040
Once with "v4" and once without "v4".

207
00:11:59,690 --> 00:12:02,740
In the case two classes are offered,

208
00:12:02,740 --> 00:12:06,070
then you always want to choose the "v4" version.

209
00:12:07,620 --> 00:12:09,970
If you make a mistake here

210
00:12:09,970 --> 00:12:12,380
then you get very strange errors

211
00:12:12,380 --> 00:12:15,730
with "invalid argument" or "wrong type"

212
00:12:15,730 --> 00:12:18,740
and it can take a while until you realize

213
00:12:18,740 --> 00:12:20,910
what the actual problem is

214
00:12:20,910 --> 00:12:22,570
because then this is the wrong package

215
00:12:22,570 --> 00:12:23,770
and you see that up here

216
00:12:23,770 --> 00:12:25,770
in the import statments only

217
00:12:25,770 --> 00:12:28,610
that the "v4" is missing.

218
00:12:35,720 --> 00:12:37,750
Thus our TokenSource

219
00:12:37,750 --> 00:12:41,240
which is where we get our tokens from is the lexer.

220
00:12:43,500 --> 00:12:47,380
With these Tokens we are going to feed our parser

221
00:12:58,630 --> 00:13:03,500
and now we can use the whole thing to generate our ParseTree.

222
00:13:09,620 --> 00:13:11,760
More precisely we call the method

223
00:13:11,760 --> 00:13:14,220
with the name of the rule

224
00:13:14,220 --> 00:13:16,940
that the parser should use to start parsing.

225
00:13:16,940 --> 00:13:20,330
In the moment we have only a single rule,

226
00:13:20,330 --> 00:13:22,330
thus we call that one.

227
00:13:26,630 --> 00:13:30,020
And then we instantiate

228
00:13:30,020 --> 00:13:34,230
our Visitor which we created previsouly, the "MyVisitor"

229
00:13:34,230 --> 00:13:39,360
and call visit passing our ParseTree to it.

230
00:13:42,820 --> 00:13:46,880
Then I save it and run it.

231
00:13:51,230 --> 00:13:52,750
As you can see we got:

232
00:13:52,750 --> 00:13:56,850
3, 42, addition, 5, addition, 6, addition.

233
00:13:57,090 --> 00:14:01,080
If we look at the output together with out tree

234
00:14:01,930 --> 00:14:05,680
then we see here, the three is here, then the 42,

235
00:14:05,680 --> 00:14:08,310
then addition, then the 5,

236
00:14:08,310 --> 00:14:12,010
again addition, the 6 and again the addition.

237
00:14:12,760 --> 00:14:15,620
Hurray, because these are exactly the instructions

238
00:14:15,620 --> 00:14:18,410
that we are need later in order to

239
00:14:18,410 --> 00:14:22,240
run this code on our processor.

240
00:14:22,240 --> 00:14:25,070
At least it is already in the righ order.

241
00:14:25,070 --> 00:14:27,550
We wrote our first simple visitor

242
00:14:27,550 --> 00:14:31,360
and are just a small step away from real instruction code.

243
00:14:31,360 --> 00:14:34,360
During the next videos I show you how to use labels

244
00:14:34,360 --> 00:14:36,790
to improve the readability of our visitor,

245
00:14:36,790 --> 00:14:39,100
how we can generate actual instruction code

246
00:14:39,100 --> 00:14:40,440
and much more.

247
00:14:40,440 --> 00:14:43,190
I appreciate thumbs, comments and subscriptions.

248
00:14:43,190 --> 00:14:45,500
Many thanks to Gadarol who supplied

249
00:14:45,500 --> 00:14:47,270
his studio for these recordings.

250
00:14:47,270 --> 00:14:48,630
I hope you had a lot of fun,

251
00:14:48,630 --> 00:14:50,460
Good Bye and see you next time.

252
00:14:50,460 --> 00:14:54,210
Tune in again for the next episode of "Let's build a compiler".

