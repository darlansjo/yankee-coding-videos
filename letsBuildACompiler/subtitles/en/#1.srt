1
00:00:00,000 --> 00:00:03,690
Hello and a warm welcome to "Let's build a compiler".

2
00:00:03,690 --> 00:00:05,970
You want to design your own programming language

3
00:00:05,970 --> 00:00:10,690
but you don't know how to compile your code to an executable program?

4
00:00:10,690 --> 00:00:14,340
Or you are just interested in the magic of compilers?

5
00:00:14,340 --> 00:00:16,620
Then you have found the right source.

6
00:00:16,620 --> 00:00:19,700
I show you how to write your own compiler.

7
00:00:19,710 --> 00:00:21,900
In step with actual practice and hands-on.

8
00:00:21,900 --> 00:00:26,090
My name is yankee, have a lot of fun and join in.

9
00:00:26,090 --> 00:00:28,280
We will write our compiler in Java

10
00:00:28,280 --> 00:00:31,510
thus you should have basic knowledge in Java.

11
00:00:31,510 --> 00:00:33,690
If Java is not your favorite language:

12
00:00:33,690 --> 00:00:37,970
Don't worry. The learned lessons can be applied to other languages as well.

13
00:00:38,080 --> 00:00:41,510
At first I'll show you how a simple processor works.

14
00:00:41,580 --> 00:00:45,910
This is a simulation of such a simple processor.

15
00:00:46,200 --> 00:00:50,950
The processor has only very few elements: It has a stack,

16
00:00:51,330 --> 00:00:52,610
seen on the right side

17
00:00:52,820 --> 00:00:57,720
and on the left side there are some instructions the processor is about to execute.

18
00:00:57,870 --> 00:00:59,480
and... that...

19
00:00:59,480 --> 00:01:00,890
is all there is.

20
00:01:01,280 --> 00:01:03,500
LDC means "load constant",

21
00:01:03,500 --> 00:01:06,020
"iadd" means "integer addition".

22
00:01:06,020 --> 00:01:08,730
load constant pushes a number on the stack.

23
00:01:08,730 --> 00:01:11,290
(The one supplied as parameter).

24
00:01:11,290 --> 00:01:15,100
At first this is the number three. We execute this line

25
00:01:15,100 --> 00:01:18,600
and the three appears on the stack.

26
00:01:18,600 --> 00:01:21,930
Then... the same thing for the two

27
00:01:21,930 --> 00:01:25,670
and "iadd" takes the top two numbers from the stack

28
00:01:25,670 --> 00:01:27,290
sums them up

29
00:01:27,290 --> 00:01:30,290
and pushes the result back onto the stack.

30
00:01:30,320 --> 00:01:32,700
Here is a slightly more complicated example:

31
00:01:32,700 --> 00:01:36,220
We have the calculation "3+2*5".

32
00:01:36,220 --> 00:01:39,790
In this case we want to calculate 2*5 first

33
00:01:39,790 --> 00:01:44,710
and not before then three plus the result of 2+5.

34
00:01:44,840 --> 00:01:47,940
Here is one possibility how we could do that:

35
00:01:48,030 --> 00:01:50,870
At first we push the three on the stack.

36
00:01:51,120 --> 00:01:53,520
Then we push the two on the stack.

37
00:01:53,530 --> 00:01:58,540
Now however, wie will not sum up the 3 and the 2 using iadd,

38
00:01:58,540 --> 00:02:01,870
but instead we will push the five on the stack.

39
00:02:02,210 --> 00:02:05,850
Then we can sum up the five and the two

40
00:02:05,850 --> 00:02:08,860
receive the ten on top of the stack and the three below

41
00:02:08,860 --> 00:02:11,020
and when we sum up those two

42
00:02:11,020 --> 00:02:14,850
then we get the expected result, the 13.

43
00:02:14,850 --> 00:02:18,580
How do we get from our calculation "3+2"

44
00:02:18,580 --> 00:02:21,450
to the instruction that we have just seen?

45
00:02:21,450 --> 00:02:25,220
We start by splitting our calculation into its components:

46
00:02:25,220 --> 00:02:28,040
The three, the plus and the two

47
00:02:28,120 --> 00:02:31,010
and then we build a tree from those.

48
00:02:31,710 --> 00:02:34,340
We can still read in this tree

49
00:02:34,340 --> 00:02:37,870
what is happening here: 3+2.

50
00:02:37,870 --> 00:02:41,220
However we can also read the instructions that we need

51
00:02:41,220 --> 00:02:42,640
very easily.

52
00:02:42,640 --> 00:02:47,870
We do this by traversing the tree post-order. Post-order means:

53
00:02:47,870 --> 00:02:52,760
From every child we process at first the left child, then the  right child

54
00:02:52,760 --> 00:02:57,040
and then the upper node, the root node.

55
00:02:57,040 --> 00:03:01,470
In our case the means we first take the left child, the three

56
00:03:01,470 --> 00:03:06,100
then the right child, the two and then the root node, the plus.

57
00:03:06,100 --> 00:03:11,300
Thus our instructions are "load constant 3", "load constant 2"

58
00:03:11,300 --> 00:03:12,870
and then "iadd".

59
00:03:12,870 --> 00:03:16,170
This still works when the example becomes a little more complex.

60
00:03:16,170 --> 00:03:19,020
For example in this example:

61
00:03:19,020 --> 00:03:22,740
Here we will again split our caluclation into its components

62
00:03:22,790 --> 00:03:24,790
and then build a tree.

63
00:03:24,790 --> 00:03:28,120
As you can already see: The tree has now one more level

64
00:03:28,120 --> 00:03:31,030
but the algorithm continues to work.

65
00:03:31,030 --> 00:03:34,480
First the left child, here the 3,

66
00:03:34,480 --> 00:03:36,200
then the right child,

67
00:03:36,200 --> 00:03:37,950
this is a node which itself has children

68
00:03:37,950 --> 00:03:40,860
which means that we need to descent further:

69
00:03:40,860 --> 00:03:43,120
Again first to the left, to the two,

70
00:03:43,120 --> 00:03:44,810
then two the right, to the five

71
00:03:44,810 --> 00:03:47,080
and then the star and finally the plus.

72
00:03:47,080 --> 00:03:49,370
Thus our instructions are:

73
00:03:49,370 --> 00:03:52,670
load constant 3, load constant 2,

74
00:03:52,670 --> 00:03:55,250
load constant 5,

75
00:03:55,250 --> 00:03:56,560
multiply

76
00:03:56,560 --> 00:03:58,900
and then add.

77
00:03:58,900 --> 00:04:02,930
And our instructions are complete.

78
00:04:02,930 --> 00:04:06,430
In order to build the tree we used our operators "+" and "*"

79
00:04:06,430 --> 00:04:10,060
as root nodes and appended our operands as child nodes.

80
00:04:10,140 --> 00:04:13,030
An operand can be again a full calculation.

81
00:04:13,030 --> 00:04:16,520
In this case the child node is again an operator

82
00:04:16,520 --> 00:04:19,650
and it has its operands again as child nodes.

83
00:04:20,050 --> 00:04:22,600
If we as a human want to calculate the result

84
00:04:22,600 --> 00:04:24,680
we will process the tree bottom-up.

85
00:04:24,680 --> 00:04:25,630
That means:

86
00:04:25,630 --> 00:04:29,500
We start with calculating 2*5.

87
00:04:29,500 --> 00:04:33,470
This leaves us with the calculation 3+10

88
00:04:33,470 --> 00:04:37,150
which results in 13.

89
00:04:39,340 --> 00:04:42,460
Up until now our trees were tiny

90
00:04:42,460 --> 00:04:45,870
but imagine the size of our tree once we got thousands

91
00:04:45,870 --> 00:04:47,900
of lines of code that we want to compile

92
00:04:47,900 --> 00:04:51,940
which don't contain simple plus and times calculations but which, in addition, contain

93
00:04:51,940 --> 00:04:54,870
variables, loops and more.

94
00:04:54,870 --> 00:04:57,310
For those inputs we need a clear method

95
00:04:57,310 --> 00:04:59,180
for building our trees.

96
00:04:59,180 --> 00:05:01,380
One tool for the task is ANTLR.

97
00:05:01,380 --> 00:05:06,120
Next I show you how to use ANTLR to generate trees.

98
00:05:06,120 --> 00:05:09,270
First you need to download ANTLR.

99
00:05:09,270 --> 00:05:16,270
You can do so on antlr.org.

100
00:05:17,020 --> 00:05:21,970
On the entry page you can directly find the download link.

101
00:05:21,970 --> 00:05:23,430
Or,

102
00:05:23,430 --> 00:05:27,570
on the quick start page for Windows (this down here are supposed to be tabs by the way)

103
00:05:28,490 --> 00:05:31,090
you can even find a clickable link.

104
00:05:31,090 --> 00:05:35,430
Apart from that there exists a download page up here were you can find the link yet again.

105
00:05:35,430 --> 00:05:36,870
You'll manage it somehow.

106
00:05:36,870 --> 00:05:41,400
Additionally you need the JDK, which is easiest to find

107
00:05:41,400 --> 00:05:46,550
by searching for "JDK" on google

108
00:05:46,550 --> 00:05:50,750
where it is the first search result.

109
00:05:50,750 --> 00:05:53,400
Go here to "Download"

110
00:05:53,400 --> 00:05:57,390
and find for all kinds of system, whatever you use

111
00:05:57,390 --> 00:05:59,160
your JDK.

112
00:05:59,160 --> 00:06:03,590
If you develop Java frequently you will obviously already have the JDK installed.

113
00:06:03,590 --> 00:06:06,550
Actually I hope that this is the case.

114
00:06:06,550 --> 00:06:11,520
If it is not, doesn't matter, then you will need to learn it quickly now.

115
00:06:11,520 --> 00:06:14,940
I already downloaded ANTLR for you

116
00:06:14,940 --> 00:06:17,450
and saved the JAR

117
00:06:17,450 --> 00:06:20,020
here into the "lib"-directory.

118
00:06:20,020 --> 00:06:22,490
And now I show you how to use it.

119
00:06:22,490 --> 00:06:27,050
At first I rename the ANTLR-Jar, because in my opinion the name is too long.

120
00:06:27,690 --> 00:06:33,360
Just "antlr.jar" will do for me.

121
00:06:34,400 --> 00:06:39,130
Then we create a file that we want to parse.

122
00:06:39,130 --> 00:06:43,790
I will call it "code.demo".

123
00:06:46,300 --> 00:06:50,240
Into the file we will simply write "3+2".

124
00:06:50,240 --> 00:06:53,620
That should be our first simple program.

125
00:06:54,680 --> 00:06:59,990
Then we need a grammar which describes our language.

126
00:06:59,990 --> 00:07:02,470
Of course we need to give our grammar a name

127
00:07:02,470 --> 00:07:04,780
and the name of the grammar file should have

128
00:07:04,780 --> 00:07:07,430
the same name as the grammar

129
00:07:07,430 --> 00:07:10,180
plus the extension ".g4".

130
00:07:10,180 --> 00:07:15,180
Furthermore it is recommended that our name starts with a capital letter.

131
00:07:15,180 --> 00:07:20,210
Thus I will call the file, now with an uppercase "D" "Demo.g4".

132
00:07:21,080 --> 00:07:25,120
In this file we start with the name of our grammar

133
00:07:25,120 --> 00:07:27,460
prefixed with "grammar".

134
00:07:31,310 --> 00:07:33,130
And then we start

135
00:07:33,130 --> 00:07:35,210
to define rules.

136
00:07:35,210 --> 00:07:37,810
For getting started a single rule will do.

137
00:07:37,810 --> 00:07:42,740
Namely our rule for additions, so I call it "addition".

138
00:07:42,740 --> 00:07:50,050
This rule recognizes 3 plus 2, only.

139
00:07:50,050 --> 00:07:52,330
Nothing more.

140
00:07:52,330 --> 00:07:55,830
That should suffice for now.

141
00:07:55,830 --> 00:08:00,020
Now we sway ANTLR to use the grammar to

142
00:08:00,020 --> 00:08:03,360
generate a parser.

143
00:08:03,360 --> 00:08:10,270
We do that by simply calling "java -jar" with our ANTLR-Jar and

144
00:08:10,270 --> 00:08:14,770
by passing our grammar file.

145
00:08:14,770 --> 00:08:16,080
You can see then

146
00:08:16,080 --> 00:08:21,740
that multiple Java files have appeared. Those were generated by ANTLR for us.

147
00:08:21,740 --> 00:08:24,800
Next we will compile these files.

148
00:08:24,800 --> 00:08:26,890
To compile them you need to mind

149
00:08:26,890 --> 00:08:31,420
that dependencies to the ANTLR-Jar exist.

150
00:08:31,420 --> 00:08:35,310
Because of that you need to pass the antlr.jar to the compiler.

151
00:08:35,310 --> 00:08:39,250
You can do so with the classpath option "-cp"

152
00:08:39,310 --> 00:08:44,380
"lib" and then "antlr.jar".

153
00:08:45,800 --> 00:08:47,790
Then we want to compile all java files

154
00:08:47,790 --> 00:08:52,690
thus we write "*.java".

155
00:08:52,690 --> 00:08:56,490
The Java compiler has created a number of .class files.

156
00:08:56,490 --> 00:09:00,760
These represent our executable parser.

157
00:09:00,760 --> 00:09:02,970
ANTLR ships with a nice tool

158
00:09:02,970 --> 00:09:06,180
which can display a tree for us.

159
00:09:06,180 --> 00:09:08,470
We can call this tool now

160
00:09:08,470 --> 00:09:11,170
by

161
00:09:11,170 --> 00:09:13,690
using the classpath dot

162
00:09:13,690 --> 00:09:16,450
because dot is the current working directory and

163
00:09:16,450 --> 00:09:18,720
this is where our parser that we need is.

164
00:09:18,720 --> 00:09:21,380
Then with a colon delimited on Linux

165
00:09:21,380 --> 00:09:24,790
on Windows delimited with a semicolon

166
00:09:25,270 --> 00:09:28,410
the ANTLR-Jar

167
00:09:30,510 --> 00:09:31,850
and then

168
00:09:31,850 --> 00:09:34,850
the class to call which is the class

169
00:09:34,850 --> 00:09:37,340
that can display a tree for us:

170
00:09:37,420 --> 00:09:49,070
org.antlr.v4.runtime.misc.TestRig.

171
00:09:49,480 --> 00:09:53,110
If we execute this command without any argument

172
00:09:53,110 --> 00:09:54,800
we get a small help page

173
00:09:54,800 --> 00:09:58,370
which explains what we can do with the program.

174
00:09:58,370 --> 00:10:01,880
First it would like to have the name of the grammar

175
00:10:02,160 --> 00:10:04,360
which is "Demo",

176
00:10:04,360 --> 00:10:06,360
then the name of the start rule

177
00:10:06,360 --> 00:10:08,710
(we have only one rule).

178
00:10:08,710 --> 00:10:11,460
We'll pass the name of the start rule here

179
00:10:11,460 --> 00:10:14,800
and then we have a bunch of options with things we can do to choose from.

180
00:10:14,800 --> 00:10:18,000
We start with the option "-gui",

181
00:10:18,000 --> 00:10:22,080
because it displays a tree

182
00:10:22,080 --> 00:10:23,930
and input-filenames

183
00:10:23,930 --> 00:10:27,160
is the name of the file to compile.

184
00:10:27,160 --> 00:10:28,360
If you don't specify the later

185
00:10:28,360 --> 00:10:31,990
the program reads from stdin.

186
00:10:31,990 --> 00:10:35,400
But we deliberately created a file

187
00:10:35,400 --> 00:10:39,340
with the name "code.demo".

188
00:10:39,340 --> 00:10:41,840
Here you can see the generated tree.

189
00:10:41,840 --> 00:10:43,300
And because it is very small

190
00:10:43,300 --> 00:10:46,210
and I don't know whether you can see

191
00:10:46,210 --> 00:10:48,390
it completely in the video

192
00:10:48,390 --> 00:10:52,780
(it is possible to zoom a tiny bit, but not very much)

193
00:10:52,780 --> 00:10:55,880
I will use a different method for generating the tree:

194
00:10:55,880 --> 00:10:58,880
Instead of the option "-gui"

195
00:10:58,880 --> 00:11:01,700
I use "-ps"

196
00:11:01,700 --> 00:11:05,770
to save our tree into a PostScript file

197
00:11:08,690 --> 00:11:14,090
because now I can easily open that file

198
00:11:18,810 --> 00:11:22,400
and display it full screen.

199
00:11:22,400 --> 00:11:24,520
Here you can see the generated tree

200
00:11:24,520 --> 00:11:26,420
with the first thing to notice:

201
00:11:26,420 --> 00:11:29,300
The plus ist contained twice.

202
00:11:29,300 --> 00:11:33,470
Once it hides in the word "addition"

203
00:11:33,470 --> 00:11:35,990
even if it is not that obvious

204
00:11:35,990 --> 00:11:39,110
and a second time the plus is down here.

205
00:11:39,110 --> 00:11:42,880
We want our operators

206
00:11:42,880 --> 00:11:44,870
to always be in the root node,

207
00:11:44,870 --> 00:11:48,010
thus we only care

208
00:11:48,010 --> 00:11:49,500
for the "addition" up here.

209
00:11:49,500 --> 00:11:52,530
We don't need to care about the plus down here,

210
00:11:52,530 --> 00:11:55,760
you are free to just ignore it.

211
00:11:55,760 --> 00:11:57,860
With that we have already fulfilled

212
00:11:57,860 --> 00:12:00,330
the first simple Task with ANTLR:

213
00:12:00,330 --> 00:12:02,890
Wir have constructed a simple tree.

214
00:12:02,890 --> 00:12:04,990
In the next videos I show you

215
00:12:04,990 --> 00:12:09,170
how to accept arbitrary numbers rather than just 3 and 2,

216
00:12:09,170 --> 00:12:13,050
how to accept chained expression such as "1+2+3+4",

217
00:12:13,050 --> 00:12:15,210
how to add further operators,

218
00:12:15,210 --> 00:12:18,700
how to create an executable application and much more.

219
00:12:18,700 --> 00:12:20,990
If you are interested in a book about ANTLR

220
00:12:20,990 --> 00:12:25,050
I can recommend "The definitive ANTLR4 Reference".

221
00:12:25,050 --> 00:12:28,180
I add an affiliate link to the video description.

222
00:12:28,180 --> 00:12:31,650
If you buy the book or your new waching machine using the link

223
00:12:31,650 --> 00:12:34,290
I get a couple of cents and I'd be happy about that.

224
00:12:34,290 --> 00:12:36,880
Furthermore I appreciate your comments and thumbs.

225
00:12:36,880 --> 00:12:39,420
Did you like the video? Do you have questions?

226
00:12:39,420 --> 00:12:41,920
A huge thank you to Gadarol

227
00:12:41,920 --> 00:12:45,000
who allows me to use his studio for the recordings.

228
00:12:45,000 --> 00:12:48,490
Thank you for your attention, I hope you enjoyed watching,

229
00:12:48,490 --> 00:12:51,790
join again on the next video called "Let's build a compiler".

230
00:12:51,790 --> 00:12:56,310
My name is yankee, good bye until the next episode.

