1
00:00:00,000 --> 00:00:02,780
Welcome back to "Let's build a compiler".

2
00:00:02,780 --> 00:00:05,590
In this episode we will generate instruction code

3
00:00:05,590 --> 00:00:07,430
which we can actually execute.

4
00:00:07,430 --> 00:00:09,070
My name is yankee,

5
00:00:09,070 --> 00:00:12,080
I wish you a lot of fun and: Take part!

6
00:00:12,380 --> 00:00:14,980
All of the generated byte code is of course boring

7
00:00:14,980 --> 00:00:16,660
if we cannot execute it.

8
00:00:16,660 --> 00:00:19,060
That is why I will show you next

9
00:00:19,060 --> 00:00:20,660
how to do exactly that.

10
00:00:20,660 --> 00:00:21,950
To do so we need Jasmin

11
00:00:21,950 --> 00:00:25,320
which you can download from jasmin.sourceforge.net.

12
00:00:25,320 --> 00:00:27,320
Go here to download

13
00:00:28,170 --> 00:00:29,890
then here to the next "download"

14
00:00:29,890 --> 00:00:31,310
then you get a file.

15
00:00:31,310 --> 00:00:33,470
I already downloaded it here.

16
00:00:33,470 --> 00:00:36,460
In the zip file there is "jasmin.jar".

17
00:00:36,460 --> 00:00:39,610
This is the only file from the zip that you need.

18
00:00:39,610 --> 00:00:43,850
Extract it to some place which you can memorize

19
00:00:46,170 --> 00:00:49,960
which in my case is the directory "lib"

20
00:00:49,960 --> 00:00:53,090
in "compiler" next to my antlr.jar.

21
00:00:53,090 --> 00:00:56,120
And then we can create a sample file

22
00:00:56,120 --> 00:00:58,080
with instructions to compile

23
00:00:58,080 --> 00:00:59,450
and execute.

24
00:00:59,450 --> 00:01:01,670
For that I create a new text file

25
00:01:01,670 --> 00:01:05,150
which I call "HelloWorld.j"

26
00:01:06,690 --> 00:01:08,880
and in this file

27
00:01:08,880 --> 00:01:12,300
we declare a Java class

28
00:01:14,760 --> 00:01:17,010
which is called "HelloWorld"

29
00:01:17,790 --> 00:01:25,870
und which derives from java.lang.Object

30
00:01:26,490 --> 00:01:29,830
and which has a method

31
00:01:31,880 --> 00:01:35,500
which is public, is static, is called main,

32
00:01:35,500 --> 00:01:38,420
gets as arguments an array

33
00:01:38,420 --> 00:01:39,840
of type object,

34
00:01:39,840 --> 00:01:46,210
of type java.lang.String,

35
00:01:46,820 --> 00:01:50,880
has now return type,

36
00:01:54,190 --> 00:01:58,610
has a stack limit of 100

37
00:01:58,610 --> 00:02:01,080
and which has a limit for

38
00:02:01,080 --> 00:02:04,930
our local variable table of 100.

39
00:02:07,630 --> 00:02:09,800
Here the method ends.

40
00:02:10,880 --> 00:02:12,450
We can indent this part a bit

41
00:02:12,450 --> 00:02:14,050
so that we can read it better.

42
00:02:14,730 --> 00:02:16,150
The most elements seen here

43
00:02:16,150 --> 00:02:17,470
will be explained later in more detail,

44
00:02:17,470 --> 00:02:18,850
e.g. the exact format here

45
00:02:18,850 --> 00:02:20,810
for the arguments,

46
00:02:20,810 --> 00:02:22,920
what more types we have,

47
00:02:22,920 --> 00:02:24,150
and what the limit means.

48
00:02:27,230 --> 00:02:29,820
But for now it is enough that we

49
00:02:29,820 --> 00:02:31,210
can execute something.

50
00:02:32,260 --> 00:02:34,100
To simply print

51
00:02:34,310 --> 00:02:37,170
42 to console

52
00:02:37,170 --> 00:02:39,100
we would write that in Java,

53
00:02:39,100 --> 00:02:40,710
as a simple example in here:

54
00:02:40,710 --> 00:02:46,160
"System.out.println(42);".

55
00:02:47,050 --> 00:02:49,620
If we want to express this in Jasmin,

56
00:02:49,620 --> 00:02:51,910
then we first need the object

57
00:02:51,910 --> 00:02:54,750
which hides between "System.out"

58
00:02:54,750 --> 00:02:56,520
and we need to put it on the stack.

59
00:02:56,520 --> 00:02:59,130
We do that by calling

60
00:02:59,130 --> 00:03:00,740
getstatic

61
00:03:02,150 --> 00:03:09,060
java/lang/System/out.

62
00:03:09,450 --> 00:03:13,460
"System/out" here is this "System.out",

63
00:03:13,460 --> 00:03:16,760
the "java/lang" usually does not need to be specified

64
00:03:16,760 --> 00:03:18,910
in Java but this is the

65
00:03:18,910 --> 00:03:22,640
full package name of this class "System".

66
00:03:23,140 --> 00:03:27,010
The type of that object must be specified as well.

67
00:03:27,010 --> 00:03:29,420
We do this by writing:

68
00:03:29,420 --> 00:03:32,300
"L" for "it is an object" and

69
00:03:32,300 --> 00:03:35,360
then the fully qualified class name

70
00:03:35,610 --> 00:03:43,140
which is "java/io/PrintStream".

71
00:03:49,210 --> 00:03:51,010
Then we need a literal,

72
00:03:51,010 --> 00:03:53,640
here the 42 which we put on the stack,

73
00:03:53,640 --> 00:03:55,510
so that we can print it.

74
00:03:56,380 --> 00:03:59,320
To do so we write "ldc 42".

75
00:04:00,760 --> 00:04:04,040
And now we need to call the println method.

76
00:04:04,040 --> 00:04:05,180
That simply works like this:

77
00:04:05,180 --> 00:04:08,900
Using "invokevirtual".

78
00:04:10,350 --> 00:04:13,650
And then we unfortunatelly need to specify the full path again

79
00:04:13,650 --> 00:04:16,320
of the the method that we want to call.

80
00:04:16,320 --> 00:04:20,200
That is java/io/PrintStream.

81
00:04:21,080 --> 00:04:24,200
The method is "println"

82
00:04:24,200 --> 00:04:27,810
which as arguments gets an integer

83
00:04:28,500 --> 00:04:31,140
and has no return value.

84
00:04:31,860 --> 00:04:34,070
Then we need a "return"

85
00:04:34,070 --> 00:04:36,470
to indicate that the method ends here.

86
00:04:36,470 --> 00:04:37,810
You do not need this in Java

87
00:04:37,810 --> 00:04:39,370
if it is a void method

88
00:04:39,370 --> 00:04:41,680
but in the instruction code

89
00:04:41,680 --> 00:04:43,610
the return must always be present.

90
00:04:43,930 --> 00:04:46,160
The blank lines are for readability only.

91
00:04:46,960 --> 00:04:48,400
Then we can compile

92
00:04:48,400 --> 00:04:51,150
the file to a Java class

93
00:04:51,150 --> 00:04:52,470
and execute it.

94
00:04:56,170 --> 00:04:58,290
For that we simply call:

95
00:04:58,290 --> 00:05:03,210
"java -jar lib/jasmin.jar",

96
00:05:03,210 --> 00:05:04,600
because that is the location where it is on my system,

97
00:05:04,600 --> 00:05:05,580
if it is in another location

98
00:05:05,580 --> 00:05:07,370
you need to adapt the path

99
00:05:07,370 --> 00:05:10,600
and then we pass our HelloWorld.j file as argument.

100
00:05:11,100 --> 00:05:14,550
That generates a HelloWorld.class.

101
00:05:14,550 --> 00:05:16,080
As you can see we have here

102
00:05:16,080 --> 00:05:17,930
the .j file and the .class file

103
00:05:17,930 --> 00:05:20,690
and we can execute the .class file

104
00:05:20,690 --> 00:05:24,990
by calling "java HelloWorld" omitting the ".class".

105
00:05:25,180 --> 00:05:28,300
As you can see: It prints 42.

106
00:05:29,260 --> 00:05:30,980
So how can we generate such classes

107
00:05:30,980 --> 00:05:32,980
automatically as next step?

108
00:05:32,980 --> 00:05:35,300
For that a short look back

109
00:05:35,300 --> 00:05:38,000
on the .j file which I created:

110
00:05:39,420 --> 00:05:43,050
Here you see that first

111
00:05:43,050 --> 00:05:45,010
objects are put on the stack

112
00:05:45,010 --> 00:05:47,140
on which we want to call a method.

113
00:05:47,140 --> 00:05:49,150
We want to call on the object

114
00:05:49,150 --> 00:05:50,600
which came from here

115
00:05:50,600 --> 00:05:52,600
(ich zoom out so you can see everything)

116
00:05:52,970 --> 00:05:54,980
the method "println".

117
00:05:55,620 --> 00:05:58,540
This instruction, the "invokevirtual"

118
00:05:58,540 --> 00:06:02,470
takes as many elements from the stack

119
00:06:02,470 --> 00:06:04,700
as needed as parameters

120
00:06:04,700 --> 00:06:06,830
plus one more for the object

121
00:06:06,830 --> 00:06:08,990
on which the method is invoked.

122
00:06:09,390 --> 00:06:11,610
That means: The method here gets

123
00:06:11,610 --> 00:06:13,610
a single parameter,

124
00:06:13,610 --> 00:06:16,200
which is removed from the stack (the 42)

125
00:06:16,200 --> 00:06:19,890
and then it removes another element from the stack

126
00:06:19,890 --> 00:06:23,360
which is the object on which to call

127
00:06:23,360 --> 00:06:24,860
the method "println"

128
00:06:24,860 --> 00:06:27,580
And that is our "java/lang/System/out".

129
00:06:28,050 --> 00:06:32,080
Practically that means for what we have done so far:

130
00:06:32,080 --> 00:06:35,150
We can simply replace the "ldc 42"

131
00:06:35,150 --> 00:06:38,570
with the instructions we generated

132
00:06:38,570 --> 00:06:41,120
and would then end up with the result

133
00:06:41,120 --> 00:06:44,300
of our current simple addition on top of the stack

134
00:06:44,300 --> 00:06:48,130
und could then just print it.

135
00:06:48,130 --> 00:06:50,300
And that's what we are going to do next.

136
00:06:51,980 --> 00:06:54,360
For that we need to adapt our compiler here

137
00:06:54,360 --> 00:06:56,040
so that it does not simply

138
00:06:56,040 --> 00:06:57,370
print the instructions.

139
00:06:57,370 --> 00:06:58,770
As a reminder:

140
00:06:58,770 --> 00:07:02,110
In the moment the output of our program looks as follows:

141
00:07:02,110 --> 00:07:05,140
.... but the

142
00:07:05,140 --> 00:07:08,310
full skeloton that jasmin requires

143
00:07:08,310 --> 00:07:09,900
needs to surround our instructions.

144
00:07:09,900 --> 00:07:11,980
Und this here should now

145
00:07:11,980 --> 00:07:15,870
be in this file instead of "ldc 42".

146
00:07:16,290 --> 00:07:17,180
So what are we going to do?

147
00:07:17,180 --> 00:07:19,730
We simply copy the whole file

148
00:07:19,730 --> 00:07:21,510
into the clipboard

149
00:07:21,970 --> 00:07:24,710
and then we create a small helper method

150
00:07:32,060 --> 00:07:35,950
which receives our instructions as arguments.

151
00:07:43,170 --> 00:07:44,990
We simply write here

152
00:07:44,990 --> 00:07:50,270
"return" and paste the full jasmin file,

153
00:07:50,270 --> 00:07:51,670
our sample file.

154
00:07:52,410 --> 00:07:54,130
Then you might say:

155
00:07:54,130 --> 00:07:55,600
Hey, who did you do it

156
00:07:55,600 --> 00:07:57,520
that you pasted everything in there

157
00:07:57,520 --> 00:07:59,110
including line feeds.

158
00:07:59,110 --> 00:08:00,210
If you want to do this

159
00:08:00,210 --> 00:08:03,300
then you need to go to "Window" -> "Preferences" in eclipse

160
00:08:03,300 --> 00:08:05,940
and then select "Java"->"Editor"->"Typing"

161
00:08:05,940 --> 00:08:09,360
and activate "Escape text when pasting into a string literal".

162
00:08:10,830 --> 00:08:12,070
Now we want here

163
00:08:12,070 --> 00:08:14,260
instead of the "ldc 42"

164
00:08:14,770 --> 00:08:17,190
our instructions to be inserted

165
00:08:19,970 --> 00:08:22,710
and then our small helper method is finished.

166
00:08:23,230 --> 00:08:27,310
And here we will, before printing

167
00:08:27,310 --> 00:08:32,420
insert a "createJasminFile" call.

168
00:08:34,970 --> 00:08:37,560
Now I execute the compiler again

169
00:08:38,430 --> 00:08:40,060
and as you can see

170
00:08:41,340 --> 00:08:44,390
we now have our jasmin description

171
00:08:44,390 --> 00:08:47,690
and here are our generated instructions.

172
00:08:47,690 --> 00:08:50,210
Of course the instructions are not quite correct yet,

173
00:08:50,210 --> 00:08:53,310
so we will need to fix that next.

174
00:08:53,640 --> 00:08:55,870
For that we go to our visitor

175
00:08:56,520 --> 00:08:59,040
and instead of "addition" we use

176
00:08:59,040 --> 00:09:02,780
"iadd" because that is the correct instruction for adding.

177
00:09:03,290 --> 00:09:06,130
And instead of just the number

178
00:09:06,130 --> 00:09:09,100
we need to insert the prefix "ldc"

179
00:09:09,880 --> 00:09:11,050
(for "load constant").

180
00:09:12,790 --> 00:09:15,940
Then we execute the whole thing again

181
00:09:18,250 --> 00:09:20,710
and as you can see I forgot about the "ldc" here.

182
00:09:20,710 --> 00:09:23,130
It is only considered here

183
00:09:24,450 --> 00:09:26,760
so we need to add it

184
00:09:26,760 --> 00:09:29,540
in this location

185
00:09:37,880 --> 00:09:39,510
and then we execute again

186
00:09:40,720 --> 00:09:43,790
and now we have our full jasmin description

187
00:09:43,790 --> 00:09:45,580
which looks alright.

188
00:09:45,580 --> 00:09:49,070
Yes, the indention is not pretty

189
00:09:49,070 --> 00:09:51,070
but that does not need to disturb us.

190
00:09:51,480 --> 00:09:53,400
Next we copy the

191
00:09:53,400 --> 00:09:57,320
generated jasmin class description,

192
00:09:58,050 --> 00:10:00,350
and save it to a text file.

193
00:10:00,350 --> 00:10:02,140
I'll simply overwrite

194
00:10:02,140 --> 00:10:04,860
our existing HelloWorld-Example

195
00:10:06,810 --> 00:10:09,130
then we compile it again

196
00:10:09,130 --> 00:10:11,460
to a java class

197
00:10:14,900 --> 00:10:17,360
and then we execute the java class.

198
00:10:20,280 --> 00:10:21,970
The result is 56.

199
00:10:21,970 --> 00:10:24,970
Now we want to check if that is really correct.

200
00:10:25,770 --> 00:10:29,510
For that we have a look at the code

201
00:10:29,510 --> 00:10:30,420
and there it reads:

202
00:10:30,420 --> 00:10:33,350
"3+42" which is 45

203
00:10:33,600 --> 00:10:37,050
plus 5

204
00:10:37,050 --> 00:10:37,960
then we are at 50,

205
00:10:37,960 --> 00:10:40,480
plus 6 then we are ar 56.

206
00:10:41,020 --> 00:10:42,480
Thus it was correct.

207
00:10:43,420 --> 00:10:45,340
Here again the full process that we created

208
00:10:45,340 --> 00:10:46,570
in an overview.

209
00:10:46,570 --> 00:10:49,260
During the next videos we are going to tune it further.

210
00:10:49,260 --> 00:10:51,960
We started with a grammar,

211
00:10:51,960 --> 00:10:53,960
our demo grammar.

212
00:10:54,300 --> 00:10:56,590
From that grammar ANTLR

213
00:10:56,590 --> 00:10:58,900
generated a lexer and a parser for us,

214
00:10:59,660 --> 00:11:02,660
then we fed the lexer and parser

215
00:11:02,660 --> 00:11:05,540
with an input program

216
00:11:05,870 --> 00:11:08,920
which resulted in a syntax tree.

217
00:11:09,420 --> 00:11:11,560
From that tree we created

218
00:11:11,560 --> 00:11:14,910
with the help of our visitor instruction code.

219
00:11:16,550 --> 00:11:18,560
Then we created from the instruction code

220
00:11:18,560 --> 00:11:22,640
with the help of jasmin a java .class file.

221
00:11:23,290 --> 00:11:27,530
And finally we executed that file using the JVM

222
00:11:27,530 --> 00:11:30,040
and ended up with a result.

223
00:11:30,040 --> 00:11:31,700
During the next videos

224
00:11:31,700 --> 00:11:33,610
we will develop tests

225
00:11:33,610 --> 00:11:35,870
and give more control to our language

226
00:11:35,870 --> 00:11:39,300
so that we can do more things than printing a single number.

227
00:11:39,300 --> 00:11:41,360
Leave your questions and your feedback for me

228
00:11:41,360 --> 00:11:43,360
in the form of comments and thumbs

229
00:11:43,360 --> 00:11:45,410
and do not forget to subscribe

230
00:11:45,410 --> 00:11:47,590
so that you never miss a new episode.

231
00:11:48,280 --> 00:11:52,310
Thank you to Gadarol who allows me to use his studio for these recordings.

232
00:11:52,400 --> 00:11:53,760
My name is yankee,

233
00:11:53,760 --> 00:11:55,220
I hope you had a lot of fun,

234
00:11:55,220 --> 00:11:57,020
thank you for your attention,

235
00:11:57,020 --> 00:11:58,580
good by and until next time

236
00:11:58,580 --> 00:12:01,590
for the next episode of "Let's build a compiler".

